func.func @forward(%input2: tensor<1x3x32x32xf32>, %input1: tensor<1x3x32x32xf32>) -> tensor<1x10xf32>  { 
	%1="ufront.conv2d"(%input1){"kernel": "[3, 3]", "stride": "[1, 1]", "groups": "1", "padding": "[0, 0]"}:(tensor<1x3x32x32xf32>) -> tensor<1x32x30x30xf32>
	%2="ufront.relu"(%1):(tensor<1x32x30x30xf32>) -> tensor<1x32x30x30xf32>
	%3="ufront.conv2d"(%input2){"kernel": "[3, 3]", "stride": "[1, 1]", "groups": "1", "padding": "[0, 0]"}:(tensor<1x3x32x32xf32>) -> tensor<1x32x30x30xf32>
	%4="ufront.relu"(%3):(tensor<1x32x30x30xf32>) -> tensor<1x32x30x30xf32>
	%5="ufront.concat"(%2, %4){"axis": "1"}:(tensor<1x32x30x30xf32>, tensor<1x32x30x30xf32>) -> tensor<1x64x30x30xf32>
	%6, %7="ufront.split"(%5){"sizes": "[32, 32]", "axis": "1"}:(tensor<1x64x30x30xf32>) -> tensor<1x32x30x30xf32>, tensor<1x32x30x30xf32>
	%8="ufront.concat"(%6, %7){"axis": "1"}:(tensor<1x32x30x30xf32>, tensor<1x32x30x30xf32>) -> tensor<1x64x30x30xf32>
	%9="ufront.conv2d"(%8){"padding": "[0, 0]", "stride": "[1, 1]", "kernel": "[3, 3]", "groups": "1"}:(tensor<1x64x30x30xf32>) -> tensor<1x64x28x28xf32>
	%10="ufront.relu"(%9):(tensor<1x64x28x28xf32>) -> tensor<1x64x28x28xf32>
	%11="ufront.pool2d"(%10){"padding": "[0, 0]", "kernel": "[2, 2]", "stride": "[2, 2]", "pool_type": "PoolType.POOL_MAX"}:(tensor<1x64x28x28xf32>) -> tensor<1x64x14x14xf32>
	%12="ufront.conv2d"(%11){"stride": "[1, 1]", "groups": "1", "kernel": "[3, 3]", "padding": "[0, 0]"}:(tensor<1x64x14x14xf32>) -> tensor<1x64x12x12xf32>
	%13="ufront.relu"(%12):(tensor<1x64x12x12xf32>) -> tensor<1x64x12x12xf32>
	%14="ufront.conv2d"(%13){"groups": "1", "padding": "[0, 0]", "stride": "[1, 1]", "kernel": "[3, 3]"}:(tensor<1x64x12x12xf32>) -> tensor<1x64x10x10xf32>
	%15="ufront.relu"(%14):(tensor<1x64x10x10xf32>) -> tensor<1x64x10x10xf32>
	%16="ufront.pool2d"(%15){"pool_type": "PoolType.POOL_MAX", "kernel": "[2, 2]", "padding": "[0, 0]", "stride": "[2, 2]"}:(tensor<1x64x10x10xf32>) -> tensor<1x64x5x5xf32>
	%17="ufront.flat"(%16):(tensor<1x64x5x5xf32>) -> tensor<1x1600xf32>
	%18="ufront.linear"(%17):(tensor<1x1600xf32>) -> tensor<1x512xf32>
	%19="ufront.relu"(%18):(tensor<1x512xf32>) -> tensor<1x512xf32>
	%20="ufront.linear"(%19):(tensor<1x512xf32>) -> tensor<1x10xf32>
	%21="ufront.softmax"(%20):(tensor<1x10xf32>) -> tensor<1x10xf32>
	return %21: tensor<1x10xf32>
}
func.func @forward(%input_1: tensor<1x3x224x224xf32>) -> tensor<1x1000xf32>  { 
	%1="ufront.parameter"(){dtype="Float", initializer="0x5574127179b0", requires_grad=true}:() -> tensor<768x3x16x16xf32>
	%2="ufront.conv2d"(%input_1, %1){dilation=[1, 1], groups=1, kernel=[16, 16], operand_segment_sizes=array<i32:1, 1, 0>, pad=[0, 0, 0, 0], stride=[16, 16]}:(tensor<1x3x224x224xf32>, tensor<768x3x16x16xf32>) -> tensor<1x768x14x14xf32>
	%3="ufront.reshape"(%2){shape=[1, 196, 768]}:(tensor<1x768x14x14xf32>) -> tensor<1x196x768xf32>
	%4="ufront.parameter"(){dtype="Float", initializer="0x55742e1e7260", requires_grad=false}:() -> tensor<1x1x768xf32>
	%5="ufront.expand"(%4){sizes=[1, 1, 768]}:(tensor<1x1x768xf32>) -> tensor<1x1x768xf32>
	%6="ufront.concat"(%5, %3){axis=1}:(tensor<1x1x768xf32>, tensor<1x196x768xf32>) -> tensor<1x197x768xf32>
	%7="ufront.parameter"(){dtype="Float", initializer="0x5572f9cb2160", requires_grad=false}:() -> tensor<1x197x768xf32>
	%8="ufront.add"(%6, %7):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%9="ufront.layer_norm"(%8){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%10="ufront.parameter"(){dtype="Float", initializer="0x55742e678b30", requires_grad=true}:() -> tensor<768x768xf32>
	%11="ufront.parameter"(){dtype="Float", initializer="0x55742fad37e0", requires_grad=true}:() -> tensor<768x768xf32>
	%12="ufront.parameter"(){dtype="Float", initializer="0x557425c182e0", requires_grad=true}:() -> tensor<768x768xf32>
	%13="ufront.parameter"(){dtype="Float", initializer="0x5574240ebbe0", requires_grad=true}:() -> tensor<768x768xf32>
	%14="ufront.multihead_attention"(%9, %9, %9, %10, %11, %12, %13){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<1x197x768xf32>
	%15="ufront.add"(%14, %8):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%16="ufront.layer_norm"(%15){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%17="ufront.parameter"(){dtype="Float", initializer="0x557413930740", requires_grad=true}:() -> tensor<768x3072xf32>
	%18="ufront.linear"(%16, %17){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>) -> tensor<1x197x3072xf32>
	%19="ufront.gelu"(%18){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%20="ufront.parameter"(){dtype="Float", initializer="0x557430cf7440", requires_grad=true}:() -> tensor<3072x768xf32>
	%21="ufront.linear"(%19, %20){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>) -> tensor<1x197x768xf32>
	%22="ufront.add"(%15, %21):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%23="ufront.layer_norm"(%22){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%24="ufront.parameter"(){dtype="Float", initializer="0x55740f7a04a0", requires_grad=true}:() -> tensor<768x768xf32>
	%25="ufront.parameter"(){dtype="Float", initializer="0x557422804520", requires_grad=true}:() -> tensor<768x768xf32>
	%26="ufront.parameter"(){dtype="Float", initializer="0x55743337ab10", requires_grad=true}:() -> tensor<768x768xf32>
	%27="ufront.parameter"(){dtype="Float", initializer="0x557427744e80", requires_grad=true}:() -> tensor<768x768xf32>
	%28="ufront.multihead_attention"(%23, %23, %23, %24, %25, %26, %27){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<1x197x768xf32>
	%29="ufront.add"(%28, %22):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%30="ufront.layer_norm"(%29){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%31="ufront.parameter"(){dtype="Float", initializer="0x55742f1ca4e0", requires_grad=true}:() -> tensor<768x3072xf32>
	%32="ufront.linear"(%30, %31){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>) -> tensor<1x197x3072xf32>
	%33="ufront.gelu"(%32){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%34="ufront.parameter"(){dtype="Float", initializer="0x557409af7e20", requires_grad=true}:() -> tensor<3072x768xf32>
	%35="ufront.linear"(%33, %34){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>) -> tensor<1x197x768xf32>
	%36="ufront.add"(%29, %35):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%37="ufront.layer_norm"(%36){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%38="ufront.parameter"(){dtype="Float", initializer="0x5573fef327e0", requires_grad=true}:() -> tensor<768x768xf32>
	%39="ufront.parameter"(){dtype="Float", initializer="0x55742b01f600", requires_grad=true}:() -> tensor<768x768xf32>
	%40="ufront.parameter"(){dtype="Float", initializer="0x5574335c28f0", requires_grad=true}:() -> tensor<768x768xf32>
	%41="ufront.parameter"(){dtype="Float", initializer="0x5574225bf650", requires_grad=true}:() -> tensor<768x768xf32>
	%42="ufront.multihead_attention"(%37, %37, %37, %38, %39, %40, %41){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<1x197x768xf32>
	%43="ufront.add"(%42, %36):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%44="ufront.layer_norm"(%43){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%45="ufront.parameter"(){dtype="Float", initializer="0x5574091f7e10", requires_grad=true}:() -> tensor<768x3072xf32>
	%46="ufront.linear"(%44, %45){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>) -> tensor<1x197x3072xf32>
	%47="ufront.gelu"(%46){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%48="ufront.parameter"(){dtype="Float", initializer="0x5573fc9ecdd0", requires_grad=true}:() -> tensor<3072x768xf32>
	%49="ufront.linear"(%47, %48){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>) -> tensor<1x197x768xf32>
	%50="ufront.add"(%43, %49):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%51="ufront.layer_norm"(%50){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%52="ufront.parameter"(){dtype="Float", initializer="0x55742e4331f0", requires_grad=true}:() -> tensor<768x768xf32>
	%53="ufront.parameter"(){dtype="Float", initializer="0x55742c9058c0", requires_grad=true}:() -> tensor<768x768xf32>
	%54="ufront.parameter"(){dtype="Float", initializer="0x5574301a5a90", requires_grad=true}:() -> tensor<768x768xf32>
	%55="ufront.parameter"(){dtype="Float", initializer="0x5573b8bf6600", requires_grad=true}:() -> tensor<768x768xf32>
	%56="ufront.multihead_attention"(%51, %51, %51, %52, %53, %54, %55){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<1x197x768xf32>
	%57="ufront.add"(%56, %50):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%58="ufront.layer_norm"(%57){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%59="ufront.parameter"(){dtype="Float", initializer="0x5573fdbecdf0", requires_grad=true}:() -> tensor<768x3072xf32>
	%60="ufront.linear"(%58, %59){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>) -> tensor<1x197x3072xf32>
	%61="ufront.gelu"(%60){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%62="ufront.parameter"(){dtype="Float", initializer="0x55733be66d00", requires_grad=true}:() -> tensor<3072x768xf32>
	%63="ufront.linear"(%61, %62){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>) -> tensor<1x197x768xf32>
	%64="ufront.add"(%57, %63):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%65="ufront.layer_norm"(%64){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%66="ufront.parameter"(){dtype="Float", initializer="0x55742578cba0", requires_grad=true}:() -> tensor<768x768xf32>
	%67="ufront.parameter"(){dtype="Float", initializer="0x55740d523070", requires_grad=true}:() -> tensor<768x768xf32>
	%68="ufront.parameter"(){dtype="Float", initializer="0x55741e76e8d0", requires_grad=true}:() -> tensor<768x768xf32>
	%69="ufront.parameter"(){dtype="Float", initializer="0x55741e52e8c0", requires_grad=true}:() -> tensor<768x768xf32>
	%70="ufront.multihead_attention"(%65, %65, %65, %66, %67, %68, %69){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<1x197x768xf32>
	%71="ufront.add"(%70, %64):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%72="ufront.layer_norm"(%71){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%73="ufront.parameter"(){dtype="Float", initializer="0x55733e10d250", requires_grad=true}:() -> tensor<768x3072xf32>
	%74="ufront.linear"(%72, %73){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>) -> tensor<1x197x3072xf32>
	%75="ufront.gelu"(%74){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%76="ufront.parameter"(){dtype="Float", initializer="0x55733f30d270", requires_grad=true}:() -> tensor<3072x768xf32>
	%77="ufront.linear"(%75, %76){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>) -> tensor<1x197x768xf32>
	%78="ufront.add"(%71, %77):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%79="ufront.layer_norm"(%78){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%80="ufront.parameter"(){dtype="Float", initializer="0x557423ea5450", requires_grad=true}:() -> tensor<768x768xf32>
	%81="ufront.parameter"(){dtype="Float", initializer="0x55733dbc9a00", requires_grad=true}:() -> tensor<768x768xf32>
	%82="ufront.parameter"(){dtype="Float", initializer="0x5573b885d790", requires_grad=true}:() -> tensor<768x768xf32>
	%83="ufront.parameter"(){dtype="Float", initializer="0x55733d066d20", requires_grad=true}:() -> tensor<768x768xf32>
	%84="ufront.multihead_attention"(%79, %79, %79, %80, %81, %82, %83){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<1x197x768xf32>
	%85="ufront.add"(%84, %78):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%86="ufront.layer_norm"(%85){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%87="ufront.parameter"(){dtype="Float", initializer="0x55734950ec30", requires_grad=true}:() -> tensor<768x3072xf32>
	%88="ufront.linear"(%86, %87){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>) -> tensor<1x197x3072xf32>
	%89="ufront.gelu"(%88){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%90="ufront.parameter"(){dtype="Float", initializer="0x557349e0ec40", requires_grad=true}:() -> tensor<3072x768xf32>
	%91="ufront.linear"(%89, %90){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>) -> tensor<1x197x768xf32>
	%92="ufront.add"(%85, %91):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%93="ufront.layer_norm"(%92){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%94="ufront.parameter"(){dtype="Float", initializer="0x55733d2a6d30", requires_grad=true}:() -> tensor<768x768xf32>
	%95="ufront.parameter"(){dtype="Float", initializer="0x5573445efb10", requires_grad=true}:() -> tensor<768x768xf32>
	%96="ufront.parameter"(){dtype="Float", initializer="0x55734482fb20", requires_grad=true}:() -> tensor<768x768xf32>
	%97="ufront.parameter"(){dtype="Float", initializer="0x55733fc0d280", requires_grad=true}:() -> tensor<768x768xf32>
	%98="ufront.multihead_attention"(%93, %93, %93, %94, %95, %96, %97){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<1x197x768xf32>
	%99="ufront.add"(%98, %92):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%100="ufront.layer_norm"(%99){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%101="ufront.parameter"(){dtype="Float", initializer="0x55734d40ed40", requires_grad=true}:() -> tensor<768x3072xf32>
	%102="ufront.linear"(%100, %101){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>) -> tensor<1x197x3072xf32>
	%103="ufront.gelu"(%102){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%104="ufront.parameter"(){dtype="Float", initializer="0x55734dd0ed50", requires_grad=true}:() -> tensor<3072x768xf32>
	%105="ufront.linear"(%103, %104){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>) -> tensor<1x197x768xf32>
	%106="ufront.add"(%99, %105):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%107="ufront.layer_norm"(%106){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%108="ufront.parameter"(){dtype="Float", initializer="0x55734b00ec60", requires_grad=true}:() -> tensor<768x768xf32>
	%109="ufront.parameter"(){dtype="Float", initializer="0x55734b24ec70", requires_grad=true}:() -> tensor<768x768xf32>
	%110="ufront.parameter"(){dtype="Float", initializer="0x55733fe4d290", requires_grad=true}:() -> tensor<768x768xf32>
	%111="ufront.parameter"(){dtype="Float", initializer="0x55734008d2a0", requires_grad=true}:() -> tensor<768x768xf32>
	%112="ufront.multihead_attention"(%107, %107, %107, %108, %109, %110, %111){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<1x197x768xf32>
	%113="ufront.add"(%112, %106):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%114="ufront.layer_norm"(%113){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%115="ufront.parameter"(){dtype="Float", initializer="0x55734ef0ed70", requires_grad=true}:() -> tensor<768x3072xf32>
	%116="ufront.linear"(%114, %115){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>) -> tensor<1x197x3072xf32>
	%117="ufront.gelu"(%116){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%118="ufront.parameter"(){dtype="Float", initializer="0x55734194eaf0", requires_grad=true}:() -> tensor<3072x768xf32>
	%119="ufront.linear"(%117, %118){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>) -> tensor<1x197x768xf32>
	%120="ufront.add"(%113, %119):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%121="ufront.layer_norm"(%120){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%122="ufront.parameter"(){dtype="Float", initializer="0x5574274ff310", requires_grad=true}:() -> tensor<768x768xf32>
	%123="ufront.parameter"(){dtype="Float", initializer="0x557342b4eb10", requires_grad=true}:() -> tensor<768x768xf32>
	%124="ufront.parameter"(){dtype="Float", initializer="0x557342d8eb20", requires_grad=true}:() -> tensor<768x768xf32>
	%125="ufront.parameter"(){dtype="Float", initializer="0x557342fceb30", requires_grad=true}:() -> tensor<768x768xf32>
	%126="ufront.multihead_attention"(%121, %121, %121, %122, %123, %124, %125){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<1x197x768xf32>
	%127="ufront.add"(%126, %120):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%128="ufront.layer_norm"(%127){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%129="ufront.parameter"(){dtype="Float", initializer="0x557347136f50", requires_grad=true}:() -> tensor<768x3072xf32>
	%130="ufront.linear"(%128, %129){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>) -> tensor<1x197x3072xf32>
	%131="ufront.gelu"(%130){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%132="ufront.parameter"(){dtype="Float", initializer="0x557347a36f60", requires_grad=true}:() -> tensor<3072x768xf32>
	%133="ufront.linear"(%131, %132){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>) -> tensor<1x197x768xf32>
	%134="ufront.add"(%127, %133):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%135="ufront.layer_norm"(%134){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%136="ufront.parameter"(){dtype="Float", initializer="0x5574259d29f0", requires_grad=true}:() -> tensor<768x768xf32>
	%137="ufront.parameter"(){dtype="Float", initializer="0x557348c36f80", requires_grad=true}:() -> tensor<768x768xf32>
	%138="ufront.parameter"(){dtype="Float", initializer="0x557348e76f90", requires_grad=true}:() -> tensor<768x768xf32>
	%139="ufront.parameter"(){dtype="Float", initializer="0x5573490b6fa0", requires_grad=true}:() -> tensor<768x768xf32>
	%140="ufront.multihead_attention"(%135, %135, %135, %136, %137, %138, %139){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<1x197x768xf32>
	%141="ufront.add"(%140, %134):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%142="ufront.layer_norm"(%141){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%143="ufront.parameter"(){dtype="Float", initializer="0x5573356ab5f0", requires_grad=true}:() -> tensor<768x3072xf32>
	%144="ufront.linear"(%142, %143){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>) -> tensor<1x197x3072xf32>
	%145="ufront.gelu"(%144){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%146="ufront.parameter"(){dtype="Float", initializer="0x557335fab600", requires_grad=true}:() -> tensor<3072x768xf32>
	%147="ufront.linear"(%145, %146){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>) -> tensor<1x197x768xf32>
	%148="ufront.add"(%141, %147):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%149="ufront.layer_norm"(%148){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%150="ufront.parameter"(){dtype="Float", initializer="0x55733402b5b0", requires_grad=true}:() -> tensor<768x768xf32>
	%151="ufront.parameter"(){dtype="Float", initializer="0x55734320eb40", requires_grad=true}:() -> tensor<768x768xf32>
	%152="ufront.parameter"(){dtype="Float", initializer="0x55734344eb50", requires_grad=true}:() -> tensor<768x768xf32>
	%153="ufront.parameter"(){dtype="Float", initializer="0x55734368eb60", requires_grad=true}:() -> tensor<768x768xf32>
	%154="ufront.multihead_attention"(%149, %149, %149, %150, %151, %152, %153){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<1x197x768xf32>
	%155="ufront.add"(%154, %148):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%156="ufront.layer_norm"(%155){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%157="ufront.parameter"(){dtype="Float", initializer="0x5573371ab620", requires_grad=true}:() -> tensor<768x3072xf32>
	%158="ufront.linear"(%156, %157){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>) -> tensor<1x197x3072xf32>
	%159="ufront.gelu"(%158){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%160="ufront.parameter"(){dtype="Float", initializer="0x557338eeb690", requires_grad=true}:() -> tensor<3072x768xf32>
	%161="ufront.linear"(%159, %160){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>) -> tensor<1x197x768xf32>
	%162="ufront.add"(%155, %161):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%163="ufront.layer_norm"(%162){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%164="ufront.parameter"(){dtype="Float", initializer="0x5573383ab640", requires_grad=true}:() -> tensor<768x768xf32>
	%165="ufront.parameter"(){dtype="Float", initializer="0x55733a0eb6b0", requires_grad=true}:() -> tensor<768x768xf32>
	%166="ufront.parameter"(){dtype="Float", initializer="0x55733a32b6c0", requires_grad=true}:() -> tensor<768x768xf32>
	%167="ufront.parameter"(){dtype="Float", initializer="0x55733a56b6d0", requires_grad=true}:() -> tensor<768x768xf32>
	%168="ufront.multihead_attention"(%163, %163, %163, %164, %165, %166, %167){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<1x197x768xf32>
	%169="ufront.add"(%168, %162):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%170="ufront.layer_norm"(%169){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%171="ufront.parameter"(){dtype="Float", initializer="0x55743bb87e60", requires_grad=true}:() -> tensor<768x3072xf32>
	%172="ufront.linear"(%170, %171){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>) -> tensor<1x197x3072xf32>
	%173="ufront.gelu"(%172){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%174="ufront.parameter"(){dtype="Float", initializer="0x55743cd87ee0", requires_grad=true}:() -> tensor<3072x768xf32>
	%175="ufront.linear"(%173, %174){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>) -> tensor<1x197x768xf32>
	%176="ufront.add"(%169, %175):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%177="ufront.mean"(%176){dims=[2], keepdims=true}:(tensor<1x197x768xf32>) -> tensor<1x197x1xf32>
	%178="ufront.subtract"(%176, %177):(tensor<1x197x768xf32>, tensor<1x197x1xf32>) -> tensor<1x197x768xf32>
	%179="ufront.multiply"(%178, %178):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%180="ufront.mean"(%179){dims=[2], keepdims=true}:(tensor<1x197x768xf32>) -> tensor<1x197x1xf32>
	%181="ufront.sadd"(%180){scalar=0.0001}:(tensor<1x197x1xf32>) -> tensor<1x197x1xf32>
	%182="ufront.sqrt"(%181):(tensor<1x197x1xf32>) -> tensor<1x197x1xf32>
	%183="ufront.reciprocal"(%182):(tensor<1x197x1xf32>) -> tensor<1x197x1xf32>
	%184="ufront.parameter"(){dtype="Float", initializer="0x557423ea0620", requires_grad=false}:() -> tensor<768xf32>
	%185="ufront.multiply"(%183, %184):(tensor<1x197x1xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%186="ufront.multiply"(%177, %185):(tensor<1x197x1xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%187="ufront.smultiply"(%186){scalar=-1.0}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%188="ufront.multiply"(%176, %185):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%189="ufront.add"(%188, %187):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%190="ufront.slice"(%189){axis=[0, 1], end=[1, 1], output_shape=[1, 1, 768], start=[0, 0]}:(tensor<1x197x768xf32>) -> tensor<1x1x768xf32>
	%191="ufront.flat"(%190){end_dim=-1, start_dim=1}:(tensor<1x1x768xf32>) -> tensor<1x768xf32>
	%192="ufront.parameter"(){dtype="Float", initializer="0x55743e275f10", requires_grad=true}:() -> tensor<768x1000xf32>
	%193="ufront.matmul"(%191, %192):(tensor<1x768xf32>, tensor<768x1000xf32>) -> tensor<1x1000xf32>
	%194="ufront.relu"(%193):(tensor<1x1000xf32>) -> tensor<1x1000xf32>
	%195="ufront.softmax"(%194):(tensor<1x1000xf32>) -> tensor<1x1000xf32>
	return %195: tensor<1x1000xf32>
}
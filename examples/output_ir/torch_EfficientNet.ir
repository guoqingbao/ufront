func.func @forward(%input1: tensor<1x3x224x224xf32>) -> tensor<1x1000xf32>  { 
	%1="ufront.conv2d"(%input1){groups=1, kernel=[3, 3], pad=[1, 1], stride=[2, 2]}:(tensor<1x3x224x224xf32>) -> tensor<1x24x112x112xf32>
	%2="ufront.batchnorm"(%1){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%3="ufront.silu"(%2):(tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%4="ufront.conv2d"(%3){groups=1, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%5="ufront.batchnorm"(%4){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%6="ufront.silu"(%5):(tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%7="ufront.call"(%6){addargs=[('p', 0.0), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%8="ufront.add"(%7, %3):(tensor<1x24x112x112xf32>, tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%9="ufront.conv2d"(%8){groups=1, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%10="ufront.batchnorm"(%9){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%11="ufront.silu"(%10):(tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%12="ufront.call"(%11){addargs=[('p', 0.005), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%13="ufront.add"(%12, %8):(tensor<1x24x112x112xf32>, tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%14="ufront.conv2d"(%13){groups=1, kernel=[3, 3], pad=[1, 1], stride=[2, 2]}:(tensor<1x24x112x112xf32>) -> tensor<1x96x56x56xf32>
	%15="ufront.batchnorm"(%14){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x96x56x56xf32>) -> tensor<1x96x56x56xf32>
	%16="ufront.silu"(%15):(tensor<1x96x56x56xf32>) -> tensor<1x96x56x56xf32>
	%17="ufront.conv2d"(%16){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x96x56x56xf32>) -> tensor<1x48x56x56xf32>
	%18="ufront.batchnorm"(%17){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x48x56x56xf32>) -> tensor<1x48x56x56xf32>
	%19="ufront.conv2d"(%18){groups=1, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x48x56x56xf32>) -> tensor<1x192x56x56xf32>
	%20="ufront.batchnorm"(%19){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x192x56x56xf32>) -> tensor<1x192x56x56xf32>
	%21="ufront.silu"(%20):(tensor<1x192x56x56xf32>) -> tensor<1x192x56x56xf32>
	%22="ufront.conv2d"(%21){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x192x56x56xf32>) -> tensor<1x48x56x56xf32>
	%23="ufront.batchnorm"(%22){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x48x56x56xf32>) -> tensor<1x48x56x56xf32>
	%24="ufront.call"(%23){addargs=[('p', 0.015000000000000003), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x48x56x56xf32>) -> tensor<1x48x56x56xf32>
	%25="ufront.add"(%24, %18):(tensor<1x48x56x56xf32>, tensor<1x48x56x56xf32>) -> tensor<1x48x56x56xf32>
	%26="ufront.conv2d"(%25){groups=1, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x48x56x56xf32>) -> tensor<1x192x56x56xf32>
	%27="ufront.batchnorm"(%26){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x192x56x56xf32>) -> tensor<1x192x56x56xf32>
	%28="ufront.silu"(%27):(tensor<1x192x56x56xf32>) -> tensor<1x192x56x56xf32>
	%29="ufront.conv2d"(%28){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x192x56x56xf32>) -> tensor<1x48x56x56xf32>
	%30="ufront.batchnorm"(%29){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x48x56x56xf32>) -> tensor<1x48x56x56xf32>
	%31="ufront.call"(%30){addargs=[('p', 0.02), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x48x56x56xf32>) -> tensor<1x48x56x56xf32>
	%32="ufront.add"(%31, %25):(tensor<1x48x56x56xf32>, tensor<1x48x56x56xf32>) -> tensor<1x48x56x56xf32>
	%33="ufront.conv2d"(%32){groups=1, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x48x56x56xf32>) -> tensor<1x192x56x56xf32>
	%34="ufront.batchnorm"(%33){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x192x56x56xf32>) -> tensor<1x192x56x56xf32>
	%35="ufront.silu"(%34):(tensor<1x192x56x56xf32>) -> tensor<1x192x56x56xf32>
	%36="ufront.conv2d"(%35){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x192x56x56xf32>) -> tensor<1x48x56x56xf32>
	%37="ufront.batchnorm"(%36){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x48x56x56xf32>) -> tensor<1x48x56x56xf32>
	%38="ufront.call"(%37){addargs=[('p', 0.025), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x48x56x56xf32>) -> tensor<1x48x56x56xf32>
	%39="ufront.add"(%38, %32):(tensor<1x48x56x56xf32>, tensor<1x48x56x56xf32>) -> tensor<1x48x56x56xf32>
	%40="ufront.conv2d"(%39){groups=1, kernel=[3, 3], pad=[1, 1], stride=[2, 2]}:(tensor<1x48x56x56xf32>) -> tensor<1x192x28x28xf32>
	%41="ufront.batchnorm"(%40){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x192x28x28xf32>) -> tensor<1x192x28x28xf32>
	%42="ufront.silu"(%41):(tensor<1x192x28x28xf32>) -> tensor<1x192x28x28xf32>
	%43="ufront.conv2d"(%42){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x192x28x28xf32>) -> tensor<1x64x28x28xf32>
	%44="ufront.batchnorm"(%43){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x64x28x28xf32>) -> tensor<1x64x28x28xf32>
	%45="ufront.conv2d"(%44){groups=1, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x64x28x28xf32>) -> tensor<1x256x28x28xf32>
	%46="ufront.batchnorm"(%45){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32>
	%47="ufront.silu"(%46):(tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32>
	%48="ufront.conv2d"(%47){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x28x28xf32>) -> tensor<1x64x28x28xf32>
	%49="ufront.batchnorm"(%48){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x64x28x28xf32>) -> tensor<1x64x28x28xf32>
	%50="ufront.call"(%49){addargs=[('p', 0.035), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x64x28x28xf32>) -> tensor<1x64x28x28xf32>
	%51="ufront.add"(%50, %44):(tensor<1x64x28x28xf32>, tensor<1x64x28x28xf32>) -> tensor<1x64x28x28xf32>
	%52="ufront.conv2d"(%51){groups=1, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x64x28x28xf32>) -> tensor<1x256x28x28xf32>
	%53="ufront.batchnorm"(%52){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32>
	%54="ufront.silu"(%53):(tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32>
	%55="ufront.conv2d"(%54){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x28x28xf32>) -> tensor<1x64x28x28xf32>
	%56="ufront.batchnorm"(%55){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x64x28x28xf32>) -> tensor<1x64x28x28xf32>
	%57="ufront.call"(%56){addargs=[('p', 0.04), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x64x28x28xf32>) -> tensor<1x64x28x28xf32>
	%58="ufront.add"(%57, %51):(tensor<1x64x28x28xf32>, tensor<1x64x28x28xf32>) -> tensor<1x64x28x28xf32>
	%59="ufront.conv2d"(%58){groups=1, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x64x28x28xf32>) -> tensor<1x256x28x28xf32>
	%60="ufront.batchnorm"(%59){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32>
	%61="ufront.silu"(%60):(tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32>
	%62="ufront.conv2d"(%61){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x28x28xf32>) -> tensor<1x64x28x28xf32>
	%63="ufront.batchnorm"(%62){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x64x28x28xf32>) -> tensor<1x64x28x28xf32>
	%64="ufront.call"(%63){addargs=[('p', 0.045), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x64x28x28xf32>) -> tensor<1x64x28x28xf32>
	%65="ufront.add"(%64, %58):(tensor<1x64x28x28xf32>, tensor<1x64x28x28xf32>) -> tensor<1x64x28x28xf32>
	%66="ufront.conv2d"(%65){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x28x28xf32>) -> tensor<1x256x28x28xf32>
	%67="ufront.batchnorm"(%66){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32>
	%68="ufront.silu"(%67):(tensor<1x256x28x28xf32>) -> tensor<1x256x28x28xf32>
	%69="ufront.conv2d"(%68){groups=256, kernel=[3, 3], pad=[1, 1], stride=[2, 2]}:(tensor<1x256x28x28xf32>) -> tensor<1x256x14x14xf32>
	%70="ufront.batchnorm"(%69){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
	%71="ufront.silu"(%70):(tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
	%72="ufront.pool2d"(%71){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x256x14x14xf32>) -> tensor<1x256x1x1xf32>
	%73="ufront.conv2d"(%72){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x1x1xf32>) -> tensor<1x16x1x1xf32>
	%74="ufront.silu"(%73):(tensor<1x16x1x1xf32>) -> tensor<1x16x1x1xf32>
	%75="ufront.conv2d"(%74){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x16x1x1xf32>) -> tensor<1x256x1x1xf32>
	%76="ufront.sigmoid"(%75):(tensor<1x256x1x1xf32>) -> tensor<1x256x1x1xf32>
	%77="ufront.multiply"(%76, %71):(tensor<1x256x1x1xf32>, tensor<1x256x14x14xf32>) -> tensor<1x256x14x14xf32>
	%78="ufront.conv2d"(%77){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x14x14xf32>) -> tensor<1x128x14x14xf32>
	%79="ufront.batchnorm"(%78){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%80="ufront.conv2d"(%79){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x128x14x14xf32>) -> tensor<1x512x14x14xf32>
	%81="ufront.batchnorm"(%80){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%82="ufront.silu"(%81):(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%83="ufront.conv2d"(%82){groups=512, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%84="ufront.batchnorm"(%83){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%85="ufront.silu"(%84):(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%86="ufront.pool2d"(%85){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x512x14x14xf32>) -> tensor<1x512x1x1xf32>
	%87="ufront.conv2d"(%86){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x512x1x1xf32>) -> tensor<1x32x1x1xf32>
	%88="ufront.silu"(%87):(tensor<1x32x1x1xf32>) -> tensor<1x32x1x1xf32>
	%89="ufront.conv2d"(%88){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x32x1x1xf32>) -> tensor<1x512x1x1xf32>
	%90="ufront.sigmoid"(%89):(tensor<1x512x1x1xf32>) -> tensor<1x512x1x1xf32>
	%91="ufront.multiply"(%90, %85):(tensor<1x512x1x1xf32>, tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%92="ufront.conv2d"(%91){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x512x14x14xf32>) -> tensor<1x128x14x14xf32>
	%93="ufront.batchnorm"(%92){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%94="ufront.call"(%93){addargs=[('p', 0.05500000000000001), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%95="ufront.add"(%94, %79):(tensor<1x128x14x14xf32>, tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%96="ufront.conv2d"(%95){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x128x14x14xf32>) -> tensor<1x512x14x14xf32>
	%97="ufront.batchnorm"(%96){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%98="ufront.silu"(%97):(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%99="ufront.conv2d"(%98){groups=512, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%100="ufront.batchnorm"(%99){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%101="ufront.silu"(%100):(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%102="ufront.pool2d"(%101){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x512x14x14xf32>) -> tensor<1x512x1x1xf32>
	%103="ufront.conv2d"(%102){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x512x1x1xf32>) -> tensor<1x32x1x1xf32>
	%104="ufront.silu"(%103):(tensor<1x32x1x1xf32>) -> tensor<1x32x1x1xf32>
	%105="ufront.conv2d"(%104){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x32x1x1xf32>) -> tensor<1x512x1x1xf32>
	%106="ufront.sigmoid"(%105):(tensor<1x512x1x1xf32>) -> tensor<1x512x1x1xf32>
	%107="ufront.multiply"(%106, %101):(tensor<1x512x1x1xf32>, tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%108="ufront.conv2d"(%107){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x512x14x14xf32>) -> tensor<1x128x14x14xf32>
	%109="ufront.batchnorm"(%108){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%110="ufront.call"(%109){addargs=[('p', 0.06000000000000001), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%111="ufront.add"(%110, %95):(tensor<1x128x14x14xf32>, tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%112="ufront.conv2d"(%111){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x128x14x14xf32>) -> tensor<1x512x14x14xf32>
	%113="ufront.batchnorm"(%112){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%114="ufront.silu"(%113):(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%115="ufront.conv2d"(%114){groups=512, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%116="ufront.batchnorm"(%115){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%117="ufront.silu"(%116):(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%118="ufront.pool2d"(%117){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x512x14x14xf32>) -> tensor<1x512x1x1xf32>
	%119="ufront.conv2d"(%118){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x512x1x1xf32>) -> tensor<1x32x1x1xf32>
	%120="ufront.silu"(%119):(tensor<1x32x1x1xf32>) -> tensor<1x32x1x1xf32>
	%121="ufront.conv2d"(%120){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x32x1x1xf32>) -> tensor<1x512x1x1xf32>
	%122="ufront.sigmoid"(%121):(tensor<1x512x1x1xf32>) -> tensor<1x512x1x1xf32>
	%123="ufront.multiply"(%122, %117):(tensor<1x512x1x1xf32>, tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%124="ufront.conv2d"(%123){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x512x14x14xf32>) -> tensor<1x128x14x14xf32>
	%125="ufront.batchnorm"(%124){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%126="ufront.call"(%125){addargs=[('p', 0.065), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%127="ufront.add"(%126, %111):(tensor<1x128x14x14xf32>, tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%128="ufront.conv2d"(%127){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x128x14x14xf32>) -> tensor<1x512x14x14xf32>
	%129="ufront.batchnorm"(%128){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%130="ufront.silu"(%129):(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%131="ufront.conv2d"(%130){groups=512, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%132="ufront.batchnorm"(%131){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%133="ufront.silu"(%132):(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%134="ufront.pool2d"(%133){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x512x14x14xf32>) -> tensor<1x512x1x1xf32>
	%135="ufront.conv2d"(%134){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x512x1x1xf32>) -> tensor<1x32x1x1xf32>
	%136="ufront.silu"(%135):(tensor<1x32x1x1xf32>) -> tensor<1x32x1x1xf32>
	%137="ufront.conv2d"(%136){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x32x1x1xf32>) -> tensor<1x512x1x1xf32>
	%138="ufront.sigmoid"(%137):(tensor<1x512x1x1xf32>) -> tensor<1x512x1x1xf32>
	%139="ufront.multiply"(%138, %133):(tensor<1x512x1x1xf32>, tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%140="ufront.conv2d"(%139){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x512x14x14xf32>) -> tensor<1x128x14x14xf32>
	%141="ufront.batchnorm"(%140){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%142="ufront.call"(%141){addargs=[('p', 0.07), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%143="ufront.add"(%142, %127):(tensor<1x128x14x14xf32>, tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%144="ufront.conv2d"(%143){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x128x14x14xf32>) -> tensor<1x512x14x14xf32>
	%145="ufront.batchnorm"(%144){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%146="ufront.silu"(%145):(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%147="ufront.conv2d"(%146){groups=512, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%148="ufront.batchnorm"(%147){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%149="ufront.silu"(%148):(tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%150="ufront.pool2d"(%149){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x512x14x14xf32>) -> tensor<1x512x1x1xf32>
	%151="ufront.conv2d"(%150){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x512x1x1xf32>) -> tensor<1x32x1x1xf32>
	%152="ufront.silu"(%151):(tensor<1x32x1x1xf32>) -> tensor<1x32x1x1xf32>
	%153="ufront.conv2d"(%152){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x32x1x1xf32>) -> tensor<1x512x1x1xf32>
	%154="ufront.sigmoid"(%153):(tensor<1x512x1x1xf32>) -> tensor<1x512x1x1xf32>
	%155="ufront.multiply"(%154, %149):(tensor<1x512x1x1xf32>, tensor<1x512x14x14xf32>) -> tensor<1x512x14x14xf32>
	%156="ufront.conv2d"(%155){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x512x14x14xf32>) -> tensor<1x128x14x14xf32>
	%157="ufront.batchnorm"(%156){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%158="ufront.call"(%157){addargs=[('p', 0.075), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%159="ufront.add"(%158, %143):(tensor<1x128x14x14xf32>, tensor<1x128x14x14xf32>) -> tensor<1x128x14x14xf32>
	%160="ufront.conv2d"(%159){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x128x14x14xf32>) -> tensor<1x768x14x14xf32>
	%161="ufront.batchnorm"(%160){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x768x14x14xf32>) -> tensor<1x768x14x14xf32>
	%162="ufront.silu"(%161):(tensor<1x768x14x14xf32>) -> tensor<1x768x14x14xf32>
	%163="ufront.conv2d"(%162){groups=768, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x768x14x14xf32>) -> tensor<1x768x14x14xf32>
	%164="ufront.batchnorm"(%163){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x768x14x14xf32>) -> tensor<1x768x14x14xf32>
	%165="ufront.silu"(%164):(tensor<1x768x14x14xf32>) -> tensor<1x768x14x14xf32>
	%166="ufront.pool2d"(%165){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x768x14x14xf32>) -> tensor<1x768x1x1xf32>
	%167="ufront.conv2d"(%166){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x768x1x1xf32>) -> tensor<1x32x1x1xf32>
	%168="ufront.silu"(%167):(tensor<1x32x1x1xf32>) -> tensor<1x32x1x1xf32>
	%169="ufront.conv2d"(%168){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x32x1x1xf32>) -> tensor<1x768x1x1xf32>
	%170="ufront.sigmoid"(%169):(tensor<1x768x1x1xf32>) -> tensor<1x768x1x1xf32>
	%171="ufront.multiply"(%170, %165):(tensor<1x768x1x1xf32>, tensor<1x768x14x14xf32>) -> tensor<1x768x14x14xf32>
	%172="ufront.conv2d"(%171){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x768x14x14xf32>) -> tensor<1x160x14x14xf32>
	%173="ufront.batchnorm"(%172){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%174="ufront.conv2d"(%173){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x160x14x14xf32>) -> tensor<1x960x14x14xf32>
	%175="ufront.batchnorm"(%174){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%176="ufront.silu"(%175):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%177="ufront.conv2d"(%176){groups=960, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%178="ufront.batchnorm"(%177){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%179="ufront.silu"(%178):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%180="ufront.pool2d"(%179){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x960x14x14xf32>) -> tensor<1x960x1x1xf32>
	%181="ufront.conv2d"(%180){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x1x1xf32>) -> tensor<1x40x1x1xf32>
	%182="ufront.silu"(%181):(tensor<1x40x1x1xf32>) -> tensor<1x40x1x1xf32>
	%183="ufront.conv2d"(%182){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x40x1x1xf32>) -> tensor<1x960x1x1xf32>
	%184="ufront.sigmoid"(%183):(tensor<1x960x1x1xf32>) -> tensor<1x960x1x1xf32>
	%185="ufront.multiply"(%184, %179):(tensor<1x960x1x1xf32>, tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%186="ufront.conv2d"(%185){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x160x14x14xf32>
	%187="ufront.batchnorm"(%186){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%188="ufront.call"(%187){addargs=[('p', 0.085), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%189="ufront.add"(%188, %173):(tensor<1x160x14x14xf32>, tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%190="ufront.conv2d"(%189){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x160x14x14xf32>) -> tensor<1x960x14x14xf32>
	%191="ufront.batchnorm"(%190){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%192="ufront.silu"(%191):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%193="ufront.conv2d"(%192){groups=960, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%194="ufront.batchnorm"(%193){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%195="ufront.silu"(%194):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%196="ufront.pool2d"(%195){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x960x14x14xf32>) -> tensor<1x960x1x1xf32>
	%197="ufront.conv2d"(%196){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x1x1xf32>) -> tensor<1x40x1x1xf32>
	%198="ufront.silu"(%197):(tensor<1x40x1x1xf32>) -> tensor<1x40x1x1xf32>
	%199="ufront.conv2d"(%198){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x40x1x1xf32>) -> tensor<1x960x1x1xf32>
	%200="ufront.sigmoid"(%199):(tensor<1x960x1x1xf32>) -> tensor<1x960x1x1xf32>
	%201="ufront.multiply"(%200, %195):(tensor<1x960x1x1xf32>, tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%202="ufront.conv2d"(%201){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x160x14x14xf32>
	%203="ufront.batchnorm"(%202){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%204="ufront.call"(%203){addargs=[('p', 0.09), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%205="ufront.add"(%204, %189):(tensor<1x160x14x14xf32>, tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%206="ufront.conv2d"(%205){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x160x14x14xf32>) -> tensor<1x960x14x14xf32>
	%207="ufront.batchnorm"(%206){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%208="ufront.silu"(%207):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%209="ufront.conv2d"(%208){groups=960, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%210="ufront.batchnorm"(%209){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%211="ufront.silu"(%210):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%212="ufront.pool2d"(%211){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x960x14x14xf32>) -> tensor<1x960x1x1xf32>
	%213="ufront.conv2d"(%212){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x1x1xf32>) -> tensor<1x40x1x1xf32>
	%214="ufront.silu"(%213):(tensor<1x40x1x1xf32>) -> tensor<1x40x1x1xf32>
	%215="ufront.conv2d"(%214){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x40x1x1xf32>) -> tensor<1x960x1x1xf32>
	%216="ufront.sigmoid"(%215):(tensor<1x960x1x1xf32>) -> tensor<1x960x1x1xf32>
	%217="ufront.multiply"(%216, %211):(tensor<1x960x1x1xf32>, tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%218="ufront.conv2d"(%217){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x160x14x14xf32>
	%219="ufront.batchnorm"(%218){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%220="ufront.call"(%219){addargs=[('p', 0.095), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%221="ufront.add"(%220, %205):(tensor<1x160x14x14xf32>, tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%222="ufront.conv2d"(%221){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x160x14x14xf32>) -> tensor<1x960x14x14xf32>
	%223="ufront.batchnorm"(%222){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%224="ufront.silu"(%223):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%225="ufront.conv2d"(%224){groups=960, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%226="ufront.batchnorm"(%225){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%227="ufront.silu"(%226):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%228="ufront.pool2d"(%227){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x960x14x14xf32>) -> tensor<1x960x1x1xf32>
	%229="ufront.conv2d"(%228){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x1x1xf32>) -> tensor<1x40x1x1xf32>
	%230="ufront.silu"(%229):(tensor<1x40x1x1xf32>) -> tensor<1x40x1x1xf32>
	%231="ufront.conv2d"(%230){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x40x1x1xf32>) -> tensor<1x960x1x1xf32>
	%232="ufront.sigmoid"(%231):(tensor<1x960x1x1xf32>) -> tensor<1x960x1x1xf32>
	%233="ufront.multiply"(%232, %227):(tensor<1x960x1x1xf32>, tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%234="ufront.conv2d"(%233){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x160x14x14xf32>
	%235="ufront.batchnorm"(%234){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%236="ufront.call"(%235){addargs=[('p', 0.1), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%237="ufront.add"(%236, %221):(tensor<1x160x14x14xf32>, tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%238="ufront.conv2d"(%237){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x160x14x14xf32>) -> tensor<1x960x14x14xf32>
	%239="ufront.batchnorm"(%238){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%240="ufront.silu"(%239):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%241="ufront.conv2d"(%240){groups=960, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%242="ufront.batchnorm"(%241){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%243="ufront.silu"(%242):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%244="ufront.pool2d"(%243){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x960x14x14xf32>) -> tensor<1x960x1x1xf32>
	%245="ufront.conv2d"(%244){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x1x1xf32>) -> tensor<1x40x1x1xf32>
	%246="ufront.silu"(%245):(tensor<1x40x1x1xf32>) -> tensor<1x40x1x1xf32>
	%247="ufront.conv2d"(%246){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x40x1x1xf32>) -> tensor<1x960x1x1xf32>
	%248="ufront.sigmoid"(%247):(tensor<1x960x1x1xf32>) -> tensor<1x960x1x1xf32>
	%249="ufront.multiply"(%248, %243):(tensor<1x960x1x1xf32>, tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%250="ufront.conv2d"(%249){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x160x14x14xf32>
	%251="ufront.batchnorm"(%250){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%252="ufront.call"(%251){addargs=[('p', 0.10500000000000001), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%253="ufront.add"(%252, %237):(tensor<1x160x14x14xf32>, tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%254="ufront.conv2d"(%253){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x160x14x14xf32>) -> tensor<1x960x14x14xf32>
	%255="ufront.batchnorm"(%254){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%256="ufront.silu"(%255):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%257="ufront.conv2d"(%256){groups=960, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%258="ufront.batchnorm"(%257){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%259="ufront.silu"(%258):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%260="ufront.pool2d"(%259){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x960x14x14xf32>) -> tensor<1x960x1x1xf32>
	%261="ufront.conv2d"(%260){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x1x1xf32>) -> tensor<1x40x1x1xf32>
	%262="ufront.silu"(%261):(tensor<1x40x1x1xf32>) -> tensor<1x40x1x1xf32>
	%263="ufront.conv2d"(%262){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x40x1x1xf32>) -> tensor<1x960x1x1xf32>
	%264="ufront.sigmoid"(%263):(tensor<1x960x1x1xf32>) -> tensor<1x960x1x1xf32>
	%265="ufront.multiply"(%264, %259):(tensor<1x960x1x1xf32>, tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%266="ufront.conv2d"(%265){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x160x14x14xf32>
	%267="ufront.batchnorm"(%266){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%268="ufront.call"(%267){addargs=[('p', 0.11000000000000001), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%269="ufront.add"(%268, %253):(tensor<1x160x14x14xf32>, tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%270="ufront.conv2d"(%269){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x160x14x14xf32>) -> tensor<1x960x14x14xf32>
	%271="ufront.batchnorm"(%270){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%272="ufront.silu"(%271):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%273="ufront.conv2d"(%272){groups=960, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%274="ufront.batchnorm"(%273){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%275="ufront.silu"(%274):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%276="ufront.pool2d"(%275){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x960x14x14xf32>) -> tensor<1x960x1x1xf32>
	%277="ufront.conv2d"(%276){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x1x1xf32>) -> tensor<1x40x1x1xf32>
	%278="ufront.silu"(%277):(tensor<1x40x1x1xf32>) -> tensor<1x40x1x1xf32>
	%279="ufront.conv2d"(%278){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x40x1x1xf32>) -> tensor<1x960x1x1xf32>
	%280="ufront.sigmoid"(%279):(tensor<1x960x1x1xf32>) -> tensor<1x960x1x1xf32>
	%281="ufront.multiply"(%280, %275):(tensor<1x960x1x1xf32>, tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%282="ufront.conv2d"(%281){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x160x14x14xf32>
	%283="ufront.batchnorm"(%282){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%284="ufront.call"(%283){addargs=[('p', 0.11500000000000002), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%285="ufront.add"(%284, %269):(tensor<1x160x14x14xf32>, tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%286="ufront.conv2d"(%285){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x160x14x14xf32>) -> tensor<1x960x14x14xf32>
	%287="ufront.batchnorm"(%286){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%288="ufront.silu"(%287):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%289="ufront.conv2d"(%288){groups=960, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%290="ufront.batchnorm"(%289){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%291="ufront.silu"(%290):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%292="ufront.pool2d"(%291){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x960x14x14xf32>) -> tensor<1x960x1x1xf32>
	%293="ufront.conv2d"(%292){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x1x1xf32>) -> tensor<1x40x1x1xf32>
	%294="ufront.silu"(%293):(tensor<1x40x1x1xf32>) -> tensor<1x40x1x1xf32>
	%295="ufront.conv2d"(%294){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x40x1x1xf32>) -> tensor<1x960x1x1xf32>
	%296="ufront.sigmoid"(%295):(tensor<1x960x1x1xf32>) -> tensor<1x960x1x1xf32>
	%297="ufront.multiply"(%296, %291):(tensor<1x960x1x1xf32>, tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%298="ufront.conv2d"(%297){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x14x14xf32>) -> tensor<1x160x14x14xf32>
	%299="ufront.batchnorm"(%298){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%300="ufront.call"(%299){addargs=[('p', 0.12000000000000002), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%301="ufront.add"(%300, %285):(tensor<1x160x14x14xf32>, tensor<1x160x14x14xf32>) -> tensor<1x160x14x14xf32>
	%302="ufront.conv2d"(%301){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x160x14x14xf32>) -> tensor<1x960x14x14xf32>
	%303="ufront.batchnorm"(%302){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%304="ufront.silu"(%303):(tensor<1x960x14x14xf32>) -> tensor<1x960x14x14xf32>
	%305="ufront.conv2d"(%304){groups=960, kernel=[3, 3], pad=[1, 1], stride=[2, 2]}:(tensor<1x960x14x14xf32>) -> tensor<1x960x7x7xf32>
	%306="ufront.batchnorm"(%305){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x960x7x7xf32>) -> tensor<1x960x7x7xf32>
	%307="ufront.silu"(%306):(tensor<1x960x7x7xf32>) -> tensor<1x960x7x7xf32>
	%308="ufront.pool2d"(%307){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x960x7x7xf32>) -> tensor<1x960x1x1xf32>
	%309="ufront.conv2d"(%308){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x1x1xf32>) -> tensor<1x40x1x1xf32>
	%310="ufront.silu"(%309):(tensor<1x40x1x1xf32>) -> tensor<1x40x1x1xf32>
	%311="ufront.conv2d"(%310){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x40x1x1xf32>) -> tensor<1x960x1x1xf32>
	%312="ufront.sigmoid"(%311):(tensor<1x960x1x1xf32>) -> tensor<1x960x1x1xf32>
	%313="ufront.multiply"(%312, %307):(tensor<1x960x1x1xf32>, tensor<1x960x7x7xf32>) -> tensor<1x960x7x7xf32>
	%314="ufront.conv2d"(%313){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x960x7x7xf32>) -> tensor<1x256x7x7xf32>
	%315="ufront.batchnorm"(%314){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%316="ufront.conv2d"(%315){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%317="ufront.batchnorm"(%316){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%318="ufront.silu"(%317):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%319="ufront.conv2d"(%318){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%320="ufront.batchnorm"(%319){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%321="ufront.silu"(%320):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%322="ufront.pool2d"(%321){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%323="ufront.conv2d"(%322){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%324="ufront.silu"(%323):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%325="ufront.conv2d"(%324){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%326="ufront.sigmoid"(%325):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%327="ufront.multiply"(%326, %321):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%328="ufront.conv2d"(%327){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%329="ufront.batchnorm"(%328){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%330="ufront.call"(%329){addargs=[('p', 0.13), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%331="ufront.add"(%330, %315):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%332="ufront.conv2d"(%331){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%333="ufront.batchnorm"(%332){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%334="ufront.silu"(%333):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%335="ufront.conv2d"(%334){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%336="ufront.batchnorm"(%335){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%337="ufront.silu"(%336):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%338="ufront.pool2d"(%337){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%339="ufront.conv2d"(%338){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%340="ufront.silu"(%339):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%341="ufront.conv2d"(%340){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%342="ufront.sigmoid"(%341):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%343="ufront.multiply"(%342, %337):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%344="ufront.conv2d"(%343){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%345="ufront.batchnorm"(%344){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%346="ufront.call"(%345){addargs=[('p', 0.135), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%347="ufront.add"(%346, %331):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%348="ufront.conv2d"(%347){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%349="ufront.batchnorm"(%348){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%350="ufront.silu"(%349):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%351="ufront.conv2d"(%350){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%352="ufront.batchnorm"(%351){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%353="ufront.silu"(%352):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%354="ufront.pool2d"(%353){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%355="ufront.conv2d"(%354){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%356="ufront.silu"(%355):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%357="ufront.conv2d"(%356){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%358="ufront.sigmoid"(%357):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%359="ufront.multiply"(%358, %353):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%360="ufront.conv2d"(%359){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%361="ufront.batchnorm"(%360){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%362="ufront.call"(%361){addargs=[('p', 0.14), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%363="ufront.add"(%362, %347):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%364="ufront.conv2d"(%363){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%365="ufront.batchnorm"(%364){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%366="ufront.silu"(%365):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%367="ufront.conv2d"(%366){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%368="ufront.batchnorm"(%367){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%369="ufront.silu"(%368):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%370="ufront.pool2d"(%369){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%371="ufront.conv2d"(%370){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%372="ufront.silu"(%371):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%373="ufront.conv2d"(%372){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%374="ufront.sigmoid"(%373):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%375="ufront.multiply"(%374, %369):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%376="ufront.conv2d"(%375){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%377="ufront.batchnorm"(%376){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%378="ufront.call"(%377){addargs=[('p', 0.14500000000000002), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%379="ufront.add"(%378, %363):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%380="ufront.conv2d"(%379){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%381="ufront.batchnorm"(%380){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%382="ufront.silu"(%381):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%383="ufront.conv2d"(%382){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%384="ufront.batchnorm"(%383){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%385="ufront.silu"(%384):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%386="ufront.pool2d"(%385){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%387="ufront.conv2d"(%386){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%388="ufront.silu"(%387):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%389="ufront.conv2d"(%388){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%390="ufront.sigmoid"(%389):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%391="ufront.multiply"(%390, %385):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%392="ufront.conv2d"(%391){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%393="ufront.batchnorm"(%392){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%394="ufront.call"(%393){addargs=[('p', 0.15), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%395="ufront.add"(%394, %379):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%396="ufront.conv2d"(%395){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%397="ufront.batchnorm"(%396){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%398="ufront.silu"(%397):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%399="ufront.conv2d"(%398){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%400="ufront.batchnorm"(%399){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%401="ufront.silu"(%400):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%402="ufront.pool2d"(%401){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%403="ufront.conv2d"(%402){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%404="ufront.silu"(%403):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%405="ufront.conv2d"(%404){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%406="ufront.sigmoid"(%405):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%407="ufront.multiply"(%406, %401):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%408="ufront.conv2d"(%407){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%409="ufront.batchnorm"(%408){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%410="ufront.call"(%409){addargs=[('p', 0.155), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%411="ufront.add"(%410, %395):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%412="ufront.conv2d"(%411){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%413="ufront.batchnorm"(%412){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%414="ufront.silu"(%413):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%415="ufront.conv2d"(%414){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%416="ufront.batchnorm"(%415){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%417="ufront.silu"(%416):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%418="ufront.pool2d"(%417){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%419="ufront.conv2d"(%418){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%420="ufront.silu"(%419):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%421="ufront.conv2d"(%420){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%422="ufront.sigmoid"(%421):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%423="ufront.multiply"(%422, %417):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%424="ufront.conv2d"(%423){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%425="ufront.batchnorm"(%424){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%426="ufront.call"(%425){addargs=[('p', 0.16), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%427="ufront.add"(%426, %411):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%428="ufront.conv2d"(%427){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%429="ufront.batchnorm"(%428){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%430="ufront.silu"(%429):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%431="ufront.conv2d"(%430){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%432="ufront.batchnorm"(%431){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%433="ufront.silu"(%432):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%434="ufront.pool2d"(%433){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%435="ufront.conv2d"(%434){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%436="ufront.silu"(%435):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%437="ufront.conv2d"(%436){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%438="ufront.sigmoid"(%437):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%439="ufront.multiply"(%438, %433):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%440="ufront.conv2d"(%439){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%441="ufront.batchnorm"(%440){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%442="ufront.call"(%441){addargs=[('p', 0.165), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%443="ufront.add"(%442, %427):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%444="ufront.conv2d"(%443){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%445="ufront.batchnorm"(%444){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%446="ufront.silu"(%445):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%447="ufront.conv2d"(%446){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%448="ufront.batchnorm"(%447){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%449="ufront.silu"(%448):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%450="ufront.pool2d"(%449){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%451="ufront.conv2d"(%450){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%452="ufront.silu"(%451):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%453="ufront.conv2d"(%452){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%454="ufront.sigmoid"(%453):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%455="ufront.multiply"(%454, %449):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%456="ufront.conv2d"(%455){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%457="ufront.batchnorm"(%456){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%458="ufront.call"(%457){addargs=[('p', 0.17), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%459="ufront.add"(%458, %443):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%460="ufront.conv2d"(%459){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%461="ufront.batchnorm"(%460){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%462="ufront.silu"(%461):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%463="ufront.conv2d"(%462){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%464="ufront.batchnorm"(%463){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%465="ufront.silu"(%464):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%466="ufront.pool2d"(%465){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%467="ufront.conv2d"(%466){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%468="ufront.silu"(%467):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%469="ufront.conv2d"(%468){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%470="ufront.sigmoid"(%469):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%471="ufront.multiply"(%470, %465):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%472="ufront.conv2d"(%471){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%473="ufront.batchnorm"(%472){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%474="ufront.call"(%473){addargs=[('p', 0.175), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%475="ufront.add"(%474, %459):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%476="ufront.conv2d"(%475){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%477="ufront.batchnorm"(%476){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%478="ufront.silu"(%477):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%479="ufront.conv2d"(%478){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%480="ufront.batchnorm"(%479){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%481="ufront.silu"(%480):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%482="ufront.pool2d"(%481){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%483="ufront.conv2d"(%482){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%484="ufront.silu"(%483):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%485="ufront.conv2d"(%484){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%486="ufront.sigmoid"(%485):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%487="ufront.multiply"(%486, %481):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%488="ufront.conv2d"(%487){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%489="ufront.batchnorm"(%488){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%490="ufront.call"(%489){addargs=[('p', 0.18), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%491="ufront.add"(%490, %475):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%492="ufront.conv2d"(%491){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%493="ufront.batchnorm"(%492){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%494="ufront.silu"(%493):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%495="ufront.conv2d"(%494){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%496="ufront.batchnorm"(%495){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%497="ufront.silu"(%496):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%498="ufront.pool2d"(%497){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%499="ufront.conv2d"(%498){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%500="ufront.silu"(%499):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%501="ufront.conv2d"(%500){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%502="ufront.sigmoid"(%501):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%503="ufront.multiply"(%502, %497):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%504="ufront.conv2d"(%503){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%505="ufront.batchnorm"(%504){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%506="ufront.call"(%505){addargs=[('p', 0.185), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%507="ufront.add"(%506, %491):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%508="ufront.conv2d"(%507){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%509="ufront.batchnorm"(%508){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%510="ufront.silu"(%509):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%511="ufront.conv2d"(%510){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%512="ufront.batchnorm"(%511){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%513="ufront.silu"(%512):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%514="ufront.pool2d"(%513){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%515="ufront.conv2d"(%514){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%516="ufront.silu"(%515):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%517="ufront.conv2d"(%516){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%518="ufront.sigmoid"(%517):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%519="ufront.multiply"(%518, %513):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%520="ufront.conv2d"(%519){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%521="ufront.batchnorm"(%520){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%522="ufront.call"(%521){addargs=[('p', 0.19), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%523="ufront.add"(%522, %507):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%524="ufront.conv2d"(%523){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%525="ufront.batchnorm"(%524){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%526="ufront.silu"(%525):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%527="ufront.conv2d"(%526){groups=1536, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%528="ufront.batchnorm"(%527){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%529="ufront.silu"(%528):(tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%530="ufront.pool2d"(%529){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1536x7x7xf32>) -> tensor<1x1536x1x1xf32>
	%531="ufront.conv2d"(%530){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x1x1xf32>) -> tensor<1x64x1x1xf32>
	%532="ufront.silu"(%531):(tensor<1x64x1x1xf32>) -> tensor<1x64x1x1xf32>
	%533="ufront.conv2d"(%532){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x64x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%534="ufront.sigmoid"(%533):(tensor<1x1536x1x1xf32>) -> tensor<1x1536x1x1xf32>
	%535="ufront.multiply"(%534, %529):(tensor<1x1536x1x1xf32>, tensor<1x1536x7x7xf32>) -> tensor<1x1536x7x7xf32>
	%536="ufront.conv2d"(%535){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x1536x7x7xf32>) -> tensor<1x256x7x7xf32>
	%537="ufront.batchnorm"(%536){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%538="ufront.call"(%537){addargs=[('p', 0.195), ('mode', 'row'), ('training', False)], func=stochastic_depth}:(tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%539="ufront.add"(%538, %523):(tensor<1x256x7x7xf32>, tensor<1x256x7x7xf32>) -> tensor<1x256x7x7xf32>
	%540="ufront.conv2d"(%539){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<1x256x7x7xf32>) -> tensor<1x1280x7x7xf32>
	%541="ufront.batchnorm"(%540){affine=true, eps=0.001, momentum=0.1, track_running_stats=true}:(tensor<1x1280x7x7xf32>) -> tensor<1x1280x7x7xf32>
	%542="ufront.silu"(%541):(tensor<1x1280x7x7xf32>) -> tensor<1x1280x7x7xf32>
	%543="ufront.pool2d"(%542){output_size=[1, 1], pool_type="POOL_ADAPTIVE"}:(tensor<1x1280x7x7xf32>) -> tensor<1x1280x1x1xf32>
	%544="ufront.flat"(%543){end_dim=-1, start_dim=1}:(tensor<1x1280x1x1xf32>) -> tensor<1x1280xf32>
	%545="ufront.dropout"(%544){rate=0.2, seed=0}:(tensor<1x1280xf32>) -> tensor<1x1280xf32>
	%546="ufront.linear"(%545):(tensor<1x1280xf32>) -> tensor<1x1000xf32>
	%547="ufront.softmax"(%546):(tensor<1x1000xf32>) -> tensor<1x1000xf32>
	return %547: tensor<1x1000xf32>
}
func.func @forward(%input1: tensor<2x3xi64>, %input2: tensor<2x3xi64>, %input3: tensor<2x3xi64>) -> tensor<2x3x768xf32>  { 
	%1="ufront.reshape"(%input3){shape=[2, 1, 3]}:(tensor<2x3xi64>) -> tensor<2x1x3xi64>
	%2="ufront.reshape"(%1){shape=[2, 1, 1, 3]}:(tensor<2x1x3xi64>) -> tensor<2x1x1x3xi64>
	%3="ufront.ssub"(%2){scalar=1.0}:(tensor<2x1x1x3xi64>) -> tensor<2x1x1x3xi64>
	%4="ufront.smultiply"(%3){scalar=-10000.0}:(tensor<2x1x1x3xi64>) -> tensor<2x1x1x3xi64>
	%5="ufront.parameter"(){dtype="Int64", initializer="0x558568907ba0", requires_grad=false}:() -> tensor<3xi64>
	%6="ufront.reshape"(%5){shape=[1, 3]}:(tensor<3xi64>) -> tensor<1x3xi64>
	%7="ufront.expand"(%6){sizes=[2, 3]}:(tensor<1x3xi64>) -> tensor<2x3xi64>
	%8="ufront.parameter"(){dtype="Float", initializer="0x7f106623f010", requires_grad=true}:() -> tensor<32000x768xf32>
	%9="ufront.embedding"(%input1, %8){embedding_dim=768, num_embeddings=32000}:(tensor<2x3xi64>, tensor<32000x768xf32>) -> tensor<2x3x768xf32>
	%10="ufront.parameter"(){dtype="Float", initializer="0x558568cafce0", requires_grad=true}:() -> tensor<512x768xf32>
	%11="ufront.embedding"(%7, %10){embedding_dim=768, num_embeddings=512}:(tensor<2x3xi64>, tensor<512x768xf32>) -> tensor<2x3x768xf32>
	%12="ufront.parameter"(){dtype="Float", initializer="0x558568c6b200", requires_grad=true}:() -> tensor<2x768xf32>
	%13="ufront.embedding"(%input2, %12){embedding_dim=768, num_embeddings=2}:(tensor<2x3xi64>, tensor<2x768xf32>) -> tensor<2x3x768xf32>
	%14="ufront.add"(%9, %11):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%15="ufront.add"(%14, %13):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%16="ufront.parameter"(){dtype="Float", initializer="0x558568c94c40", requires_grad=true}:() -> tensor<768xf32>
	%17="ufront.parameter"(){dtype="Float", initializer="0x558568c98730", requires_grad=true}:() -> tensor<768xf32>
	%18="ufront.layer_norm"(%15, %16, %17){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%19="ufront.dropout"(%18){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%20="ufront.parameter"(){dtype="Float", initializer="0x55856912fd10", requires_grad=true}:() -> tensor<768x768xf32>
	%21="ufront.parameter"(){dtype="Float", initializer="0x558568e30650", requires_grad=true}:() -> tensor<768xf32>
	%22="ufront.linear"(%19, %20, %21){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%23="ufront.parameter"(){dtype="Float", initializer="0x55856936fd20", requires_grad=true}:() -> tensor<768x768xf32>
	%24="ufront.parameter"(){dtype="Float", initializer="0x558568e31fc0", requires_grad=true}:() -> tensor<768xf32>
	%25="ufront.linear"(%19, %23, %24){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%26="ufront.parameter"(){dtype="Float", initializer="0x5585697efd40", requires_grad=true}:() -> tensor<768x768xf32>
	%27="ufront.parameter"(){dtype="Float", initializer="0x558568e35400", requires_grad=true}:() -> tensor<768xf32>
	%28="ufront.linear"(%19, %26, %27){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%29="ufront.reshape"(%22){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%30="ufront.transpose"(%29){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%31="ufront.reshape"(%25){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%32="ufront.transpose"(%31){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%33="ufront.reshape"(%28){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%34="ufront.transpose"(%33){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%35="ufront.transpose"(%32){perms=[0, 1, 3, 2]}:(tensor<2x12x3x64xf32>) -> tensor<2x12x64x3xf32>
	%36="ufront.batch_matmul"(%30, %35):(tensor<2x12x3x64xf32>, tensor<2x12x64x3xf32>) -> tensor<2x12x3x3xf32>
	%37="ufront.struediv"(%36){scalar=8.0}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%38="ufront.add"(%37, %4):(tensor<2x12x3x3xf32>, tensor<2x1x1x3xi64>) -> tensor<2x12x3x3xf32>
	%39="ufront.softmax"(%38):(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%40="ufront.dropout"(%39){rate=0.1, seed=0, training=false}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%41="ufront.batch_matmul"(%40, %34):(tensor<2x12x3x3xf32>, tensor<2x12x3x64xf32>) -> tensor<2x12x3x64xf32>
	%42="ufront.transpose"(%41){perms=[0, 2, 1, 3]}:(tensor<2x12x3x64xf32>) -> tensor<2x3x12x64xf32>
	%43="ufront.reshape"(%42){shape=[2, 3, 768]}:(tensor<2x3x12x64xf32>) -> tensor<2x3x768xf32>
	%44="ufront.parameter"(){dtype="Float", initializer="0x558569c6fd60", requires_grad=true}:() -> tensor<768x768xf32>
	%45="ufront.parameter"(){dtype="Float", initializer="0x558568e41af0", requires_grad=true}:() -> tensor<768xf32>
	%46="ufront.linear"(%43, %44, %45){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%47="ufront.dropout"(%46){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%48="ufront.add"(%47, %19):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%49="ufront.parameter"(){dtype="Float", initializer="0x558568e44cd0", requires_grad=true}:() -> tensor<768xf32>
	%50="ufront.parameter"(){dtype="Float", initializer="0x558568e47370", requires_grad=true}:() -> tensor<768xf32>
	%51="ufront.layer_norm"(%48, %49, %50){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%52="ufront.parameter"(){dtype="Float", initializer="0x55856a56fda0", requires_grad=true}:() -> tensor<3072x768xf32>
	%53="ufront.parameter"(){dtype="Float", initializer="0x558568e4bd80", requires_grad=true}:() -> tensor<3072xf32>
	%54="ufront.linear"(%51, %52, %53){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<3072x768xf32>, tensor<3072xf32>) -> tensor<2x3x3072xf32>
	%55="ufront.smultiply"(%54){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%56="ufront.struediv"(%54){scalar=1.4142135623730951}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%57="ufront.erf"(%56):(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%58="ufront.sadd"(%57){scalar=1.0}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%59="ufront.multiply"(%55, %58):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%60="ufront.parameter"(){dtype="Float", initializer="0x55856ae6fdb0", requires_grad=true}:() -> tensor<768x3072xf32>
	%61="ufront.parameter"(){dtype="Float", initializer="0x558568e579d0", requires_grad=true}:() -> tensor<768xf32>
	%62="ufront.linear"(%59, %60, %61){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x3072xf32>, tensor<768x3072xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%63="ufront.dropout"(%62){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%64="ufront.add"(%63, %51):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%65="ufront.parameter"(){dtype="Float", initializer="0x558568e59a20", requires_grad=true}:() -> tensor<768xf32>
	%66="ufront.parameter"(){dtype="Float", initializer="0x558568e5d620", requires_grad=true}:() -> tensor<768xf32>
	%67="ufront.layer_norm"(%64, %65, %66){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%68="ufront.parameter"(){dtype="Float", initializer="0x55856a0efd80", requires_grad=true}:() -> tensor<768x768xf32>
	%69="ufront.parameter"(){dtype="Float", initializer="0x558568e60660", requires_grad=true}:() -> tensor<768xf32>
	%70="ufront.linear"(%67, %68, %69){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%71="ufront.parameter"(){dtype="Float", initializer="0x55856c06fdd0", requires_grad=true}:() -> tensor<768x768xf32>
	%72="ufront.parameter"(){dtype="Float", initializer="0x558568e636a0", requires_grad=true}:() -> tensor<768xf32>
	%73="ufront.linear"(%67, %71, %72){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%74="ufront.parameter"(){dtype="Float", initializer="0x55856c4efdf0", requires_grad=true}:() -> tensor<768x768xf32>
	%75="ufront.parameter"(){dtype="Float", initializer="0x558568e68e00", requires_grad=true}:() -> tensor<768xf32>
	%76="ufront.linear"(%67, %74, %75){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%77="ufront.reshape"(%70){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%78="ufront.transpose"(%77){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%79="ufront.reshape"(%73){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%80="ufront.transpose"(%79){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%81="ufront.reshape"(%76){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%82="ufront.transpose"(%81){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%83="ufront.transpose"(%80){perms=[0, 1, 3, 2]}:(tensor<2x12x3x64xf32>) -> tensor<2x12x64x3xf32>
	%84="ufront.batch_matmul"(%78, %83):(tensor<2x12x3x64xf32>, tensor<2x12x64x3xf32>) -> tensor<2x12x3x3xf32>
	%85="ufront.struediv"(%84){scalar=8.0}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%86="ufront.add"(%85, %4):(tensor<2x12x3x3xf32>, tensor<2x1x1x3xi64>) -> tensor<2x12x3x3xf32>
	%87="ufront.softmax"(%86):(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%88="ufront.dropout"(%87){rate=0.1, seed=0, training=false}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%89="ufront.batch_matmul"(%88, %82):(tensor<2x12x3x3xf32>, tensor<2x12x3x64xf32>) -> tensor<2x12x3x64xf32>
	%90="ufront.transpose"(%89){perms=[0, 2, 1, 3]}:(tensor<2x12x3x64xf32>) -> tensor<2x3x12x64xf32>
	%91="ufront.reshape"(%90){shape=[2, 3, 768]}:(tensor<2x3x12x64xf32>) -> tensor<2x3x768xf32>
	%92="ufront.parameter"(){dtype="Float", initializer="0x55856d4afe00", requires_grad=true}:() -> tensor<768x768xf32>
	%93="ufront.parameter"(){dtype="Float", initializer="0x558568e74f40", requires_grad=true}:() -> tensor<768xf32>
	%94="ufront.linear"(%91, %92, %93){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%95="ufront.dropout"(%94){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%96="ufront.add"(%95, %67):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%97="ufront.parameter"(){dtype="Float", initializer="0x558568e76b90", requires_grad=true}:() -> tensor<768xf32>
	%98="ufront.parameter"(){dtype="Float", initializer="0x558568e7a3b0", requires_grad=true}:() -> tensor<768xf32>
	%99="ufront.layer_norm"(%96, %97, %98){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%100="ufront.parameter"(){dtype="Float", initializer="0x55856ddafe40", requires_grad=true}:() -> tensor<3072x768xf32>
	%101="ufront.parameter"(){dtype="Float", initializer="0x558568e7d3f0", requires_grad=true}:() -> tensor<3072xf32>
	%102="ufront.linear"(%99, %100, %101){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<3072x768xf32>, tensor<3072xf32>) -> tensor<2x3x3072xf32>
	%103="ufront.smultiply"(%102){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%104="ufront.struediv"(%102){scalar=1.4142135623730951}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%105="ufront.erf"(%104):(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%106="ufront.sadd"(%105){scalar=1.0}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%107="ufront.multiply"(%103, %106):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%108="ufront.parameter"(){dtype="Float", initializer="0x55856e6afe50", requires_grad=true}:() -> tensor<768x3072xf32>
	%109="ufront.parameter"(){dtype="Float", initializer="0x558568e827a0", requires_grad=true}:() -> tensor<768xf32>
	%110="ufront.linear"(%107, %108, %109){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x3072xf32>, tensor<768x3072xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%111="ufront.dropout"(%110){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%112="ufront.add"(%111, %99):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%113="ufront.parameter"(){dtype="Float", initializer="0x558568e8a620", requires_grad=true}:() -> tensor<768xf32>
	%114="ufront.parameter"(){dtype="Float", initializer="0x558568e8df80", requires_grad=true}:() -> tensor<768xf32>
	%115="ufront.layer_norm"(%112, %113, %114){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%116="ufront.parameter"(){dtype="Float", initializer="0x55856d92fe20", requires_grad=true}:() -> tensor<768x768xf32>
	%117="ufront.parameter"(){dtype="Float", initializer="0x558568e8eb90", requires_grad=true}:() -> tensor<768xf32>
	%118="ufront.linear"(%115, %116, %117){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%119="ufront.parameter"(){dtype="Float", initializer="0x55856f8afe70", requires_grad=true}:() -> tensor<768x768xf32>
	%120="ufront.parameter"(){dtype="Float", initializer="0x558568e93970", requires_grad=true}:() -> tensor<768xf32>
	%121="ufront.linear"(%115, %119, %120){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%122="ufront.parameter"(){dtype="Float", initializer="0x55856fd2fe90", requires_grad=true}:() -> tensor<768x768xf32>
	%123="ufront.parameter"(){dtype="Float", initializer="0x558568e96ae0", requires_grad=true}:() -> tensor<768xf32>
	%124="ufront.linear"(%115, %122, %123){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%125="ufront.reshape"(%118){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%126="ufront.transpose"(%125){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%127="ufront.reshape"(%121){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%128="ufront.transpose"(%127){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%129="ufront.reshape"(%124){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%130="ufront.transpose"(%129){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%131="ufront.transpose"(%128){perms=[0, 1, 3, 2]}:(tensor<2x12x3x64xf32>) -> tensor<2x12x64x3xf32>
	%132="ufront.batch_matmul"(%126, %131):(tensor<2x12x3x64xf32>, tensor<2x12x64x3xf32>) -> tensor<2x12x3x3xf32>
	%133="ufront.struediv"(%132){scalar=8.0}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%134="ufront.add"(%133, %4):(tensor<2x12x3x3xf32>, tensor<2x1x1x3xi64>) -> tensor<2x12x3x3xf32>
	%135="ufront.softmax"(%134):(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%136="ufront.dropout"(%135){rate=0.1, seed=0, training=false}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%137="ufront.batch_matmul"(%136, %130):(tensor<2x12x3x3xf32>, tensor<2x12x3x64xf32>) -> tensor<2x12x3x64xf32>
	%138="ufront.transpose"(%137){perms=[0, 2, 1, 3]}:(tensor<2x12x3x64xf32>) -> tensor<2x3x12x64xf32>
	%139="ufront.reshape"(%138){shape=[2, 3, 768]}:(tensor<2x3x12x64xf32>) -> tensor<2x3x768xf32>
	%140="ufront.parameter"(){dtype="Float", initializer="0x558570cefea0", requires_grad=true}:() -> tensor<768x768xf32>
	%141="ufront.parameter"(){dtype="Float", initializer="0x558568ea3ed0", requires_grad=true}:() -> tensor<768xf32>
	%142="ufront.linear"(%139, %140, %141){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%143="ufront.dropout"(%142){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%144="ufront.add"(%143, %115):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%145="ufront.parameter"(){dtype="Float", initializer="0x558568ea7720", requires_grad=true}:() -> tensor<768xf32>
	%146="ufront.parameter"(){dtype="Float", initializer="0x558568ea92b0", requires_grad=true}:() -> tensor<768xf32>
	%147="ufront.layer_norm"(%144, %145, %146){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%148="ufront.parameter"(){dtype="Float", initializer="0x5585715efee0", requires_grad=true}:() -> tensor<3072x768xf32>
	%149="ufront.parameter"(){dtype="Float", initializer="0x558568ead500", requires_grad=true}:() -> tensor<3072xf32>
	%150="ufront.linear"(%147, %148, %149){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<3072x768xf32>, tensor<3072xf32>) -> tensor<2x3x3072xf32>
	%151="ufront.smultiply"(%150){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%152="ufront.struediv"(%150){scalar=1.4142135623730951}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%153="ufront.erf"(%152):(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%154="ufront.sadd"(%153){scalar=1.0}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%155="ufront.multiply"(%151, %154):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%156="ufront.parameter"(){dtype="Float", initializer="0x558571eefef0", requires_grad=true}:() -> tensor<768x3072xf32>
	%157="ufront.parameter"(){dtype="Float", initializer="0x558568eb6d40", requires_grad=true}:() -> tensor<768xf32>
	%158="ufront.linear"(%155, %156, %157){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x3072xf32>, tensor<768x3072xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%159="ufront.dropout"(%158){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%160="ufront.add"(%159, %147):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%161="ufront.parameter"(){dtype="Float", initializer="0x558568eb9d80", requires_grad=true}:() -> tensor<768xf32>
	%162="ufront.parameter"(){dtype="Float", initializer="0x558568ebd1c0", requires_grad=true}:() -> tensor<768xf32>
	%163="ufront.layer_norm"(%160, %161, %162){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%164="ufront.parameter"(){dtype="Float", initializer="0x55857116fec0", requires_grad=true}:() -> tensor<768x768xf32>
	%165="ufront.parameter"(){dtype="Float", initializer="0x558568ebddd0", requires_grad=true}:() -> tensor<768xf32>
	%166="ufront.linear"(%163, %164, %165){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%167="ufront.parameter"(){dtype="Float", initializer="0x5585730eff10", requires_grad=true}:() -> tensor<768x768xf32>
	%168="ufront.parameter"(){dtype="Float", initializer="0x558568ec4640", requires_grad=true}:() -> tensor<768xf32>
	%169="ufront.linear"(%163, %167, %168){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%170="ufront.parameter"(){dtype="Float", initializer="0x55857356ff30", requires_grad=true}:() -> tensor<768x768xf32>
	%171="ufront.parameter"(){dtype="Float", initializer="0x558568ec5e60", requires_grad=true}:() -> tensor<768xf32>
	%172="ufront.linear"(%163, %170, %171){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%173="ufront.reshape"(%166){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%174="ufront.transpose"(%173){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%175="ufront.reshape"(%169){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%176="ufront.transpose"(%175){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%177="ufront.reshape"(%172){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%178="ufront.transpose"(%177){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%179="ufront.transpose"(%176){perms=[0, 1, 3, 2]}:(tensor<2x12x3x64xf32>) -> tensor<2x12x64x3xf32>
	%180="ufront.batch_matmul"(%174, %179):(tensor<2x12x3x64xf32>, tensor<2x12x64x3xf32>) -> tensor<2x12x3x3xf32>
	%181="ufront.struediv"(%180){scalar=8.0}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%182="ufront.add"(%181, %4):(tensor<2x12x3x3xf32>, tensor<2x1x1x3xi64>) -> tensor<2x12x3x3xf32>
	%183="ufront.softmax"(%182):(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%184="ufront.dropout"(%183){rate=0.1, seed=0, training=false}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%185="ufront.batch_matmul"(%184, %178):(tensor<2x12x3x3xf32>, tensor<2x12x3x64xf32>) -> tensor<2x12x3x64xf32>
	%186="ufront.transpose"(%185){perms=[0, 2, 1, 3]}:(tensor<2x12x3x64xf32>) -> tensor<2x3x12x64xf32>
	%187="ufront.reshape"(%186){shape=[2, 3, 768]}:(tensor<2x3x12x64xf32>) -> tensor<2x3x768xf32>
	%188="ufront.parameter"(){dtype="Float", initializer="0x55857452ff40", requires_grad=true}:() -> tensor<768x768xf32>
	%189="ufront.parameter"(){dtype="Float", initializer="0x558568ed0530", requires_grad=true}:() -> tensor<768xf32>
	%190="ufront.linear"(%187, %188, %189){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%191="ufront.dropout"(%190){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%192="ufront.add"(%191, %163):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%193="ufront.parameter"(){dtype="Float", initializer="0x558568ed3ff0", requires_grad=true}:() -> tensor<768xf32>
	%194="ufront.parameter"(){dtype="Float", initializer="0x558568ed4c00", requires_grad=true}:() -> tensor<768xf32>
	%195="ufront.layer_norm"(%192, %193, %194){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%196="ufront.parameter"(){dtype="Float", initializer="0x558574e2ff80", requires_grad=true}:() -> tensor<3072x768xf32>
	%197="ufront.parameter"(){dtype="Float", initializer="0x558568ed9e20", requires_grad=true}:() -> tensor<3072xf32>
	%198="ufront.linear"(%195, %196, %197){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<3072x768xf32>, tensor<3072xf32>) -> tensor<2x3x3072xf32>
	%199="ufront.smultiply"(%198){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%200="ufront.struediv"(%198){scalar=1.4142135623730951}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%201="ufront.erf"(%200):(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%202="ufront.sadd"(%201){scalar=1.0}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%203="ufront.multiply"(%199, %202):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%204="ufront.parameter"(){dtype="Float", initializer="0x55857572ff90", requires_grad=true}:() -> tensor<768x3072xf32>
	%205="ufront.parameter"(){dtype="Float", initializer="0x558568ee3660", requires_grad=true}:() -> tensor<768xf32>
	%206="ufront.linear"(%203, %204, %205){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x3072xf32>, tensor<768x3072xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%207="ufront.dropout"(%206){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%208="ufront.add"(%207, %195):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%209="ufront.parameter"(){dtype="Float", initializer="0x558568ee6eb0", requires_grad=true}:() -> tensor<768xf32>
	%210="ufront.parameter"(){dtype="Float", initializer="0x558568ee8a40", requires_grad=true}:() -> tensor<768xf32>
	%211="ufront.layer_norm"(%208, %209, %210){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%212="ufront.parameter"(){dtype="Float", initializer="0x5585749aff60", requires_grad=true}:() -> tensor<768x768xf32>
	%213="ufront.parameter"(){dtype="Float", initializer="0x558568eea090", requires_grad=true}:() -> tensor<768xf32>
	%214="ufront.linear"(%211, %212, %213){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%215="ufront.parameter"(){dtype="Float", initializer="0x55857692ffb0", requires_grad=true}:() -> tensor<768x768xf32>
	%216="ufront.parameter"(){dtype="Float", initializer="0x558568ef1730", requires_grad=true}:() -> tensor<768xf32>
	%217="ufront.linear"(%211, %215, %216){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%218="ufront.parameter"(){dtype="Float", initializer="0x558576daffd0", requires_grad=true}:() -> tensor<768x768xf32>
	%219="ufront.parameter"(){dtype="Float", initializer="0x558568ef2f50", requires_grad=true}:() -> tensor<768xf32>
	%220="ufront.linear"(%211, %218, %219){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%221="ufront.reshape"(%214){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%222="ufront.transpose"(%221){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%223="ufront.reshape"(%217){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%224="ufront.transpose"(%223){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%225="ufront.reshape"(%220){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%226="ufront.transpose"(%225){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%227="ufront.transpose"(%224){perms=[0, 1, 3, 2]}:(tensor<2x12x3x64xf32>) -> tensor<2x12x64x3xf32>
	%228="ufront.batch_matmul"(%222, %227):(tensor<2x12x3x64xf32>, tensor<2x12x64x3xf32>) -> tensor<2x12x3x3xf32>
	%229="ufront.struediv"(%228){scalar=8.0}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%230="ufront.add"(%229, %4):(tensor<2x12x3x3xf32>, tensor<2x1x1x3xi64>) -> tensor<2x12x3x3xf32>
	%231="ufront.softmax"(%230):(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%232="ufront.dropout"(%231){rate=0.1, seed=0, training=false}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%233="ufront.batch_matmul"(%232, %226):(tensor<2x12x3x3xf32>, tensor<2x12x3x64xf32>) -> tensor<2x12x3x64xf32>
	%234="ufront.transpose"(%233){perms=[0, 2, 1, 3]}:(tensor<2x12x3x64xf32>) -> tensor<2x3x12x64xf32>
	%235="ufront.reshape"(%234){shape=[2, 3, 768]}:(tensor<2x3x12x64xf32>) -> tensor<2x3x768xf32>
	%236="ufront.parameter"(){dtype="Float", initializer="0x558577d6ffe0", requires_grad=true}:() -> tensor<768x768xf32>
	%237="ufront.parameter"(){dtype="Float", initializer="0x558568efd0e0", requires_grad=true}:() -> tensor<768xf32>
	%238="ufront.linear"(%235, %236, %237){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%239="ufront.dropout"(%238){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%240="ufront.add"(%239, %211):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%241="ufront.parameter"(){dtype="Float", initializer="0x558568f00ba0", requires_grad=true}:() -> tensor<768xf32>
	%242="ufront.parameter"(){dtype="Float", initializer="0x558568f02730", requires_grad=true}:() -> tensor<768xf32>
	%243="ufront.layer_norm"(%240, %241, %242){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%244="ufront.parameter"(){dtype="Float", initializer="0x558578670020", requires_grad=true}:() -> tensor<3072x768xf32>
	%245="ufront.parameter"(){dtype="Float", initializer="0x558568f06770", requires_grad=true}:() -> tensor<3072xf32>
	%246="ufront.linear"(%243, %244, %245){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<3072x768xf32>, tensor<3072xf32>) -> tensor<2x3x3072xf32>
	%247="ufront.smultiply"(%246){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%248="ufront.struediv"(%246){scalar=1.4142135623730951}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%249="ufront.erf"(%248):(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%250="ufront.sadd"(%249){scalar=1.0}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%251="ufront.multiply"(%247, %250):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%252="ufront.parameter"(){dtype="Float", initializer="0x558578f70030", requires_grad=true}:() -> tensor<768x3072xf32>
	%253="ufront.parameter"(){dtype="Float", initializer="0x558568f0ffb0", requires_grad=true}:() -> tensor<768xf32>
	%254="ufront.linear"(%251, %252, %253){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x3072xf32>, tensor<768x3072xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%255="ufront.dropout"(%254){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%256="ufront.add"(%255, %243):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%257="ufront.parameter"(){dtype="Float", initializer="0x558568f15850", requires_grad=true}:() -> tensor<768xf32>
	%258="ufront.parameter"(){dtype="Float", initializer="0x558568f17720", requires_grad=true}:() -> tensor<768xf32>
	%259="ufront.layer_norm"(%256, %257, %258){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%260="ufront.parameter"(){dtype="Float", initializer="0x5585781f0000", requires_grad=true}:() -> tensor<768x768xf32>
	%261="ufront.parameter"(){dtype="Float", initializer="0x558568f18330", requires_grad=true}:() -> tensor<768xf32>
	%262="ufront.linear"(%259, %260, %261){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%263="ufront.parameter"(){dtype="Float", initializer="0x55857a170050", requires_grad=true}:() -> tensor<768x768xf32>
	%264="ufront.parameter"(){dtype="Float", initializer="0x558568f1d0f0", requires_grad=true}:() -> tensor<768xf32>
	%265="ufront.linear"(%259, %263, %264){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%266="ufront.parameter"(){dtype="Float", initializer="0x55857a5f0070", requires_grad=true}:() -> tensor<768x768xf32>
	%267="ufront.parameter"(){dtype="Float", initializer="0x558568f20130", requires_grad=true}:() -> tensor<768xf32>
	%268="ufront.linear"(%259, %266, %267){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%269="ufront.reshape"(%262){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%270="ufront.transpose"(%269){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%271="ufront.reshape"(%265){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%272="ufront.transpose"(%271){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%273="ufront.reshape"(%268){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%274="ufront.transpose"(%273){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%275="ufront.transpose"(%272){perms=[0, 1, 3, 2]}:(tensor<2x12x3x64xf32>) -> tensor<2x12x64x3xf32>
	%276="ufront.batch_matmul"(%270, %275):(tensor<2x12x3x64xf32>, tensor<2x12x64x3xf32>) -> tensor<2x12x3x3xf32>
	%277="ufront.struediv"(%276){scalar=8.0}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%278="ufront.add"(%277, %4):(tensor<2x12x3x3xf32>, tensor<2x1x1x3xi64>) -> tensor<2x12x3x3xf32>
	%279="ufront.softmax"(%278):(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%280="ufront.dropout"(%279){rate=0.1, seed=0, training=false}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%281="ufront.batch_matmul"(%280, %274):(tensor<2x12x3x3xf32>, tensor<2x12x3x64xf32>) -> tensor<2x12x3x64xf32>
	%282="ufront.transpose"(%281){perms=[0, 2, 1, 3]}:(tensor<2x12x3x64xf32>) -> tensor<2x3x12x64xf32>
	%283="ufront.reshape"(%282){shape=[2, 3, 768]}:(tensor<2x3x12x64xf32>) -> tensor<2x3x768xf32>
	%284="ufront.parameter"(){dtype="Float", initializer="0x55857b5b0080", requires_grad=true}:() -> tensor<768x768xf32>
	%285="ufront.parameter"(){dtype="Float", initializer="0x558568f2e6e0", requires_grad=true}:() -> tensor<768xf32>
	%286="ufront.linear"(%283, %284, %285){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%287="ufront.dropout"(%286){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%288="ufront.add"(%287, %259):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%289="ufront.parameter"(){dtype="Float", initializer="0x558568f321a0", requires_grad=true}:() -> tensor<768xf32>
	%290="ufront.parameter"(){dtype="Float", initializer="0x558568f32db0", requires_grad=true}:() -> tensor<768xf32>
	%291="ufront.layer_norm"(%288, %289, %290){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%292="ufront.parameter"(){dtype="Float", initializer="0x55857beb00c0", requires_grad=true}:() -> tensor<3072x768xf32>
	%293="ufront.parameter"(){dtype="Float", initializer="0x558568f37cb0", requires_grad=true}:() -> tensor<3072xf32>
	%294="ufront.linear"(%291, %292, %293){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<3072x768xf32>, tensor<3072xf32>) -> tensor<2x3x3072xf32>
	%295="ufront.smultiply"(%294){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%296="ufront.struediv"(%294){scalar=1.4142135623730951}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%297="ufront.erf"(%296):(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%298="ufront.sadd"(%297){scalar=1.0}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%299="ufront.multiply"(%295, %298):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%300="ufront.parameter"(){dtype="Float", initializer="0x55857c7b00d0", requires_grad=true}:() -> tensor<768x3072xf32>
	%301="ufront.parameter"(){dtype="Float", initializer="0x558568f3c8e0", requires_grad=true}:() -> tensor<768xf32>
	%302="ufront.linear"(%299, %300, %301){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x3072xf32>, tensor<768x3072xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%303="ufront.dropout"(%302){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%304="ufront.add"(%303, %291):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%305="ufront.parameter"(){dtype="Float", initializer="0x558568f443e0", requires_grad=true}:() -> tensor<768xf32>
	%306="ufront.parameter"(){dtype="Float", initializer="0x558568f45f70", requires_grad=true}:() -> tensor<768xf32>
	%307="ufront.layer_norm"(%304, %305, %306){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%308="ufront.parameter"(){dtype="Float", initializer="0x55857ba300a0", requires_grad=true}:() -> tensor<768x768xf32>
	%309="ufront.parameter"(){dtype="Float", initializer="0x558568f47610", requires_grad=true}:() -> tensor<768xf32>
	%310="ufront.linear"(%307, %308, %309){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%311="ufront.parameter"(){dtype="Float", initializer="0x55857d9b00f0", requires_grad=true}:() -> tensor<768x768xf32>
	%312="ufront.parameter"(){dtype="Float", initializer="0x558568f4c7f0", requires_grad=true}:() -> tensor<768xf32>
	%313="ufront.linear"(%307, %311, %312){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%314="ufront.parameter"(){dtype="Float", initializer="0x55857de30110", requires_grad=true}:() -> tensor<768x768xf32>
	%315="ufront.parameter"(){dtype="Float", initializer="0x558568f4fa60", requires_grad=true}:() -> tensor<768xf32>
	%316="ufront.linear"(%307, %314, %315){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%317="ufront.reshape"(%310){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%318="ufront.transpose"(%317){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%319="ufront.reshape"(%313){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%320="ufront.transpose"(%319){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%321="ufront.reshape"(%316){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%322="ufront.transpose"(%321){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%323="ufront.transpose"(%320){perms=[0, 1, 3, 2]}:(tensor<2x12x3x64xf32>) -> tensor<2x12x64x3xf32>
	%324="ufront.batch_matmul"(%318, %323):(tensor<2x12x3x64xf32>, tensor<2x12x64x3xf32>) -> tensor<2x12x3x3xf32>
	%325="ufront.struediv"(%324){scalar=8.0}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%326="ufront.add"(%325, %4):(tensor<2x12x3x3xf32>, tensor<2x1x1x3xi64>) -> tensor<2x12x3x3xf32>
	%327="ufront.softmax"(%326):(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%328="ufront.dropout"(%327){rate=0.1, seed=0, training=false}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%329="ufront.batch_matmul"(%328, %322):(tensor<2x12x3x3xf32>, tensor<2x12x3x64xf32>) -> tensor<2x12x3x64xf32>
	%330="ufront.transpose"(%329){perms=[0, 2, 1, 3]}:(tensor<2x12x3x64xf32>) -> tensor<2x3x12x64xf32>
	%331="ufront.reshape"(%330){shape=[2, 3, 768]}:(tensor<2x3x12x64xf32>) -> tensor<2x3x768xf32>
	%332="ufront.parameter"(){dtype="Float", initializer="0x55857edf0120", requires_grad=true}:() -> tensor<768x768xf32>
	%333="ufront.parameter"(){dtype="Float", initializer="0x558568f5c6a0", requires_grad=true}:() -> tensor<768xf32>
	%334="ufront.linear"(%331, %332, %333){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%335="ufront.dropout"(%334){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%336="ufront.add"(%335, %307):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%337="ufront.parameter"(){dtype="Float", initializer="0x558568f5dec0", requires_grad=true}:() -> tensor<768xf32>
	%338="ufront.parameter"(){dtype="Float", initializer="0x558568f5fa50", requires_grad=true}:() -> tensor<768xf32>
	%339="ufront.layer_norm"(%336, %337, %338){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%340="ufront.parameter"(){dtype="Float", initializer="0x55857f6f0160", requires_grad=true}:() -> tensor<3072x768xf32>
	%341="ufront.parameter"(){dtype="Float", initializer="0x558568f64620", requires_grad=true}:() -> tensor<3072xf32>
	%342="ufront.linear"(%339, %340, %341){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<3072x768xf32>, tensor<3072xf32>) -> tensor<2x3x3072xf32>
	%343="ufront.smultiply"(%342){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%344="ufront.struediv"(%342){scalar=1.4142135623730951}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%345="ufront.erf"(%344):(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%346="ufront.sadd"(%345){scalar=1.0}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%347="ufront.multiply"(%343, %346):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%348="ufront.parameter"(){dtype="Float", initializer="0x55857fff0170", requires_grad=true}:() -> tensor<768x3072xf32>
	%349="ufront.parameter"(){dtype="Float", initializer="0x558568f6d650", requires_grad=true}:() -> tensor<768xf32>
	%350="ufront.linear"(%347, %348, %349){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x3072xf32>, tensor<768x3072xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%351="ufront.dropout"(%350){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%352="ufront.add"(%351, %339):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%353="ufront.parameter"(){dtype="Float", initializer="0x558568f70660", requires_grad=true}:() -> tensor<768xf32>
	%354="ufront.parameter"(){dtype="Float", initializer="0x558568f721f0", requires_grad=true}:() -> tensor<768xf32>
	%355="ufront.layer_norm"(%352, %353, %354){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%356="ufront.parameter"(){dtype="Float", initializer="0x55857f270140", requires_grad=true}:() -> tensor<768x768xf32>
	%357="ufront.parameter"(){dtype="Float", initializer="0x558568f76c00", requires_grad=true}:() -> tensor<768xf32>
	%358="ufront.linear"(%355, %356, %357){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%359="ufront.parameter"(){dtype="Float", initializer="0x5585811f0190", requires_grad=true}:() -> tensor<768x768xf32>
	%360="ufront.parameter"(){dtype="Float", initializer="0x558568f7b5f0", requires_grad=true}:() -> tensor<768xf32>
	%361="ufront.linear"(%355, %359, %360){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%362="ufront.parameter"(){dtype="Float", initializer="0x5585816701b0", requires_grad=true}:() -> tensor<768x768xf32>
	%363="ufront.parameter"(){dtype="Float", initializer="0x558568f7ce10", requires_grad=true}:() -> tensor<768xf32>
	%364="ufront.linear"(%355, %362, %363){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%365="ufront.reshape"(%358){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%366="ufront.transpose"(%365){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%367="ufront.reshape"(%361){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%368="ufront.transpose"(%367){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%369="ufront.reshape"(%364){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%370="ufront.transpose"(%369){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%371="ufront.transpose"(%368){perms=[0, 1, 3, 2]}:(tensor<2x12x3x64xf32>) -> tensor<2x12x64x3xf32>
	%372="ufront.batch_matmul"(%366, %371):(tensor<2x12x3x64xf32>, tensor<2x12x64x3xf32>) -> tensor<2x12x3x3xf32>
	%373="ufront.struediv"(%372){scalar=8.0}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%374="ufront.add"(%373, %4):(tensor<2x12x3x3xf32>, tensor<2x1x1x3xi64>) -> tensor<2x12x3x3xf32>
	%375="ufront.softmax"(%374):(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%376="ufront.dropout"(%375){rate=0.1, seed=0, training=false}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%377="ufront.batch_matmul"(%376, %370):(tensor<2x12x3x3xf32>, tensor<2x12x3x64xf32>) -> tensor<2x12x3x64xf32>
	%378="ufront.transpose"(%377){perms=[0, 2, 1, 3]}:(tensor<2x12x3x64xf32>) -> tensor<2x3x12x64xf32>
	%379="ufront.reshape"(%378){shape=[2, 3, 768]}:(tensor<2x3x12x64xf32>) -> tensor<2x3x768xf32>
	%380="ufront.parameter"(){dtype="Float", initializer="0x5585826301c0", requires_grad=true}:() -> tensor<768x768xf32>
	%381="ufront.parameter"(){dtype="Float", initializer="0x558568f88e90", requires_grad=true}:() -> tensor<768xf32>
	%382="ufront.linear"(%379, %380, %381){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%383="ufront.dropout"(%382){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%384="ufront.add"(%383, %355):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%385="ufront.parameter"(){dtype="Float", initializer="0x558568f8a6b0", requires_grad=true}:() -> tensor<768xf32>
	%386="ufront.parameter"(){dtype="Float", initializer="0x558568f8c150", requires_grad=true}:() -> tensor<768xf32>
	%387="ufront.layer_norm"(%384, %385, %386){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%388="ufront.parameter"(){dtype="Float", initializer="0x558582f30200", requires_grad=true}:() -> tensor<3072x768xf32>
	%389="ufront.parameter"(){dtype="Float", initializer="0x558568f90d20", requires_grad=true}:() -> tensor<3072xf32>
	%390="ufront.linear"(%387, %388, %389){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<3072x768xf32>, tensor<3072xf32>) -> tensor<2x3x3072xf32>
	%391="ufront.smultiply"(%390){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%392="ufront.struediv"(%390){scalar=1.4142135623730951}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%393="ufront.erf"(%392):(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%394="ufront.sadd"(%393){scalar=1.0}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%395="ufront.multiply"(%391, %394):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%396="ufront.parameter"(){dtype="Float", initializer="0x558583830210", requires_grad=true}:() -> tensor<768x3072xf32>
	%397="ufront.parameter"(){dtype="Float", initializer="0x558568f9a560", requires_grad=true}:() -> tensor<768xf32>
	%398="ufront.linear"(%395, %396, %397){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x3072xf32>, tensor<768x3072xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%399="ufront.dropout"(%398){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%400="ufront.add"(%399, %387):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%401="ufront.parameter"(){dtype="Float", initializer="0x558568f9e760", requires_grad=true}:() -> tensor<768xf32>
	%402="ufront.parameter"(){dtype="Float", initializer="0x558568f9f370", requires_grad=true}:() -> tensor<768xf32>
	%403="ufront.layer_norm"(%400, %401, %402){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%404="ufront.parameter"(){dtype="Float", initializer="0x558582ab01e0", requires_grad=true}:() -> tensor<768x768xf32>
	%405="ufront.parameter"(){dtype="Float", initializer="0x558568fa1710", requires_grad=true}:() -> tensor<768xf32>
	%406="ufront.linear"(%403, %404, %405){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%407="ufront.parameter"(){dtype="Float", initializer="0x558584a30230", requires_grad=true}:() -> tensor<768x768xf32>
	%408="ufront.parameter"(){dtype="Float", initializer="0x558568fa6620", requires_grad=true}:() -> tensor<768xf32>
	%409="ufront.linear"(%403, %407, %408){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%410="ufront.parameter"(){dtype="Float", initializer="0x558584eb0250", requires_grad=true}:() -> tensor<768x768xf32>
	%411="ufront.parameter"(){dtype="Float", initializer="0x558568faa420", requires_grad=true}:() -> tensor<768xf32>
	%412="ufront.linear"(%403, %410, %411){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%413="ufront.reshape"(%406){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%414="ufront.transpose"(%413){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%415="ufront.reshape"(%409){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%416="ufront.transpose"(%415){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%417="ufront.reshape"(%412){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%418="ufront.transpose"(%417){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%419="ufront.transpose"(%416){perms=[0, 1, 3, 2]}:(tensor<2x12x3x64xf32>) -> tensor<2x12x64x3xf32>
	%420="ufront.batch_matmul"(%414, %419):(tensor<2x12x3x64xf32>, tensor<2x12x64x3xf32>) -> tensor<2x12x3x3xf32>
	%421="ufront.struediv"(%420){scalar=8.0}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%422="ufront.add"(%421, %4):(tensor<2x12x3x3xf32>, tensor<2x1x1x3xi64>) -> tensor<2x12x3x3xf32>
	%423="ufront.softmax"(%422):(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%424="ufront.dropout"(%423){rate=0.1, seed=0, training=false}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%425="ufront.batch_matmul"(%424, %418):(tensor<2x12x3x3xf32>, tensor<2x12x3x64xf32>) -> tensor<2x12x3x64xf32>
	%426="ufront.transpose"(%425){perms=[0, 2, 1, 3]}:(tensor<2x12x3x64xf32>) -> tensor<2x3x12x64xf32>
	%427="ufront.reshape"(%426){shape=[2, 3, 768]}:(tensor<2x3x12x64xf32>) -> tensor<2x3x768xf32>
	%428="ufront.parameter"(){dtype="Float", initializer="0x558585e70260", requires_grad=true}:() -> tensor<768x768xf32>
	%429="ufront.parameter"(){dtype="Float", initializer="0x558576ff47a0", requires_grad=true}:() -> tensor<768xf32>
	%430="ufront.linear"(%427, %428, %429){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%431="ufront.dropout"(%430){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%432="ufront.add"(%431, %403):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%433="ufront.parameter"(){dtype="Float", initializer="0x558576ff8360", requires_grad=true}:() -> tensor<768xf32>
	%434="ufront.parameter"(){dtype="Float", initializer="0x558576ff8f70", requires_grad=true}:() -> tensor<768xf32>
	%435="ufront.layer_norm"(%432, %433, %434){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%436="ufront.parameter"(){dtype="Float", initializer="0x5585867702a0", requires_grad=true}:() -> tensor<3072x768xf32>
	%437="ufront.parameter"(){dtype="Float", initializer="0x558576ffe190", requires_grad=true}:() -> tensor<3072xf32>
	%438="ufront.linear"(%435, %436, %437){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<3072x768xf32>, tensor<3072xf32>) -> tensor<2x3x3072xf32>
	%439="ufront.smultiply"(%438){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%440="ufront.struediv"(%438){scalar=1.4142135623730951}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%441="ufront.erf"(%440):(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%442="ufront.sadd"(%441){scalar=1.0}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%443="ufront.multiply"(%439, %442):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%444="ufront.parameter"(){dtype="Float", initializer="0x5585870702b0", requires_grad=true}:() -> tensor<768x3072xf32>
	%445="ufront.parameter"(){dtype="Float", initializer="0x5585770079d0", requires_grad=true}:() -> tensor<768xf32>
	%446="ufront.linear"(%443, %444, %445){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x3072xf32>, tensor<768x3072xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%447="ufront.dropout"(%446){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%448="ufront.add"(%447, %435):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%449="ufront.parameter"(){dtype="Float", initializer="0x55857700b220", requires_grad=true}:() -> tensor<768xf32>
	%450="ufront.parameter"(){dtype="Float", initializer="0x55857700cdb0", requires_grad=true}:() -> tensor<768xf32>
	%451="ufront.layer_norm"(%448, %449, %450){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%452="ufront.parameter"(){dtype="Float", initializer="0x5585862f0280", requires_grad=true}:() -> tensor<768x768xf32>
	%453="ufront.parameter"(){dtype="Float", initializer="0x55857700e1d0", requires_grad=true}:() -> tensor<768xf32>
	%454="ufront.linear"(%451, %452, %453){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%455="ufront.parameter"(){dtype="Float", initializer="0x5585882702d0", requires_grad=true}:() -> tensor<768x768xf32>
	%456="ufront.parameter"(){dtype="Float", initializer="0x558577015870", requires_grad=true}:() -> tensor<768xf32>
	%457="ufront.linear"(%451, %455, %456){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%458="ufront.parameter"(){dtype="Float", initializer="0x5585886f02f0", requires_grad=true}:() -> tensor<768x768xf32>
	%459="ufront.parameter"(){dtype="Float", initializer="0x5585770145b0", requires_grad=true}:() -> tensor<768xf32>
	%460="ufront.linear"(%451, %458, %459){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%461="ufront.reshape"(%454){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%462="ufront.transpose"(%461){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%463="ufront.reshape"(%457){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%464="ufront.transpose"(%463){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%465="ufront.reshape"(%460){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%466="ufront.transpose"(%465){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%467="ufront.transpose"(%464){perms=[0, 1, 3, 2]}:(tensor<2x12x3x64xf32>) -> tensor<2x12x64x3xf32>
	%468="ufront.batch_matmul"(%462, %467):(tensor<2x12x3x64xf32>, tensor<2x12x64x3xf32>) -> tensor<2x12x3x3xf32>
	%469="ufront.struediv"(%468){scalar=8.0}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%470="ufront.add"(%469, %4):(tensor<2x12x3x3xf32>, tensor<2x1x1x3xi64>) -> tensor<2x12x3x3xf32>
	%471="ufront.softmax"(%470):(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%472="ufront.dropout"(%471){rate=0.1, seed=0, training=false}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%473="ufront.batch_matmul"(%472, %466):(tensor<2x12x3x3xf32>, tensor<2x12x3x64xf32>) -> tensor<2x12x3x64xf32>
	%474="ufront.transpose"(%473){perms=[0, 2, 1, 3]}:(tensor<2x12x3x64xf32>) -> tensor<2x3x12x64xf32>
	%475="ufront.reshape"(%474){shape=[2, 3, 768]}:(tensor<2x3x12x64xf32>) -> tensor<2x3x768xf32>
	%476="ufront.parameter"(){dtype="Float", initializer="0x5585896b0300", requires_grad=true}:() -> tensor<768x768xf32>
	%477="ufront.parameter"(){dtype="Float", initializer="0x5585770236e0", requires_grad=true}:() -> tensor<768xf32>
	%478="ufront.linear"(%475, %476, %477){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%479="ufront.dropout"(%478){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%480="ufront.add"(%479, %451):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%481="ufront.parameter"(){dtype="Float", initializer="0x558577024fd0", requires_grad=true}:() -> tensor<768xf32>
	%482="ufront.parameter"(){dtype="Float", initializer="0x558577028930", requires_grad=true}:() -> tensor<768xf32>
	%483="ufront.layer_norm"(%480, %481, %482){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%484="ufront.parameter"(){dtype="Float", initializer="0x558589fb0340", requires_grad=true}:() -> tensor<3072x768xf32>
	%485="ufront.parameter"(){dtype="Float", initializer="0x55857702c580", requires_grad=true}:() -> tensor<3072xf32>
	%486="ufront.linear"(%483, %484, %485){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<3072x768xf32>, tensor<3072xf32>) -> tensor<2x3x3072xf32>
	%487="ufront.smultiply"(%486){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%488="ufront.struediv"(%486){scalar=1.4142135623730951}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%489="ufront.erf"(%488):(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%490="ufront.sadd"(%489){scalar=1.0}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%491="ufront.multiply"(%487, %490):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%492="ufront.parameter"(){dtype="Float", initializer="0x55858a8b0350", requires_grad=true}:() -> tensor<768x3072xf32>
	%493="ufront.parameter"(){dtype="Float", initializer="0x558577031620", requires_grad=true}:() -> tensor<768xf32>
	%494="ufront.linear"(%491, %492, %493){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x3072xf32>, tensor<768x3072xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%495="ufront.dropout"(%494){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%496="ufront.add"(%495, %483):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%497="ufront.parameter"(){dtype="Float", initializer="0x558577037df0", requires_grad=true}:() -> tensor<768xf32>
	%498="ufront.parameter"(){dtype="Float", initializer="0x558577039980", requires_grad=true}:() -> tensor<768xf32>
	%499="ufront.layer_norm"(%496, %497, %498){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%500="ufront.parameter"(){dtype="Float", initializer="0x558589b30320", requires_grad=true}:() -> tensor<768x768xf32>
	%501="ufront.parameter"(){dtype="Float", initializer="0x55857703b200", requires_grad=true}:() -> tensor<768xf32>
	%502="ufront.linear"(%499, %500, %501){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%503="ufront.parameter"(){dtype="Float", initializer="0x55858bab0370", requires_grad=true}:() -> tensor<768x768xf32>
	%504="ufront.parameter"(){dtype="Float", initializer="0x558577040120", requires_grad=true}:() -> tensor<768xf32>
	%505="ufront.linear"(%499, %503, %504){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%506="ufront.parameter"(){dtype="Float", initializer="0x55858bf30390", requires_grad=true}:() -> tensor<768x768xf32>
	%507="ufront.parameter"(){dtype="Float", initializer="0x558577043310", requires_grad=true}:() -> tensor<768xf32>
	%508="ufront.linear"(%499, %506, %507){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%509="ufront.reshape"(%502){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%510="ufront.transpose"(%509){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%511="ufront.reshape"(%505){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%512="ufront.transpose"(%511){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%513="ufront.reshape"(%508){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%514="ufront.transpose"(%513){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%515="ufront.transpose"(%512){perms=[0, 1, 3, 2]}:(tensor<2x12x3x64xf32>) -> tensor<2x12x64x3xf32>
	%516="ufront.batch_matmul"(%510, %515):(tensor<2x12x3x64xf32>, tensor<2x12x64x3xf32>) -> tensor<2x12x3x3xf32>
	%517="ufront.struediv"(%516){scalar=8.0}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%518="ufront.add"(%517, %4):(tensor<2x12x3x3xf32>, tensor<2x1x1x3xi64>) -> tensor<2x12x3x3xf32>
	%519="ufront.softmax"(%518):(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%520="ufront.dropout"(%519){rate=0.1, seed=0, training=false}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%521="ufront.batch_matmul"(%520, %514):(tensor<2x12x3x3xf32>, tensor<2x12x3x64xf32>) -> tensor<2x12x3x64xf32>
	%522="ufront.transpose"(%521){perms=[0, 2, 1, 3]}:(tensor<2x12x3x64xf32>) -> tensor<2x3x12x64xf32>
	%523="ufront.reshape"(%522){shape=[2, 3, 768]}:(tensor<2x3x12x64xf32>) -> tensor<2x3x768xf32>
	%524="ufront.parameter"(){dtype="Float", initializer="0x55858cef03a0", requires_grad=true}:() -> tensor<768x768xf32>
	%525="ufront.parameter"(){dtype="Float", initializer="0x55857704e2c0", requires_grad=true}:() -> tensor<768xf32>
	%526="ufront.linear"(%523, %524, %525){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%527="ufront.dropout"(%526){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%528="ufront.add"(%527, %499):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%529="ufront.parameter"(){dtype="Float", initializer="0x55857704eed0", requires_grad=true}:() -> tensor<768xf32>
	%530="ufront.parameter"(){dtype="Float", initializer="0x558577055530", requires_grad=true}:() -> tensor<768xf32>
	%531="ufront.layer_norm"(%528, %529, %530){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%532="ufront.parameter"(){dtype="Float", initializer="0x55858d7f03e0", requires_grad=true}:() -> tensor<3072x768xf32>
	%533="ufront.parameter"(){dtype="Float", initializer="0x558577058570", requires_grad=true}:() -> tensor<3072xf32>
	%534="ufront.linear"(%531, %532, %533){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<3072x768xf32>, tensor<3072xf32>) -> tensor<2x3x3072xf32>
	%535="ufront.smultiply"(%534){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%536="ufront.struediv"(%534){scalar=1.4142135623730951}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%537="ufront.erf"(%536):(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%538="ufront.sadd"(%537){scalar=1.0}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%539="ufront.multiply"(%535, %538):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%540="ufront.parameter"(){dtype="Float", initializer="0x55858e0f03f0", requires_grad=true}:() -> tensor<768x3072xf32>
	%541="ufront.parameter"(){dtype="Float", initializer="0x55857705d5a0", requires_grad=true}:() -> tensor<768xf32>
	%542="ufront.linear"(%539, %540, %541){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x3072xf32>, tensor<768x3072xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%543="ufront.dropout"(%542){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%544="ufront.add"(%543, %531):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%545="ufront.parameter"(){dtype="Float", initializer="0x558577064ca0", requires_grad=true}:() -> tensor<768xf32>
	%546="ufront.parameter"(){dtype="Float", initializer="0x558577066830", requires_grad=true}:() -> tensor<768xf32>
	%547="ufront.layer_norm"(%544, %545, %546){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%548="ufront.parameter"(){dtype="Float", initializer="0x55858d3703c0", requires_grad=true}:() -> tensor<768x768xf32>
	%549="ufront.parameter"(){dtype="Float", initializer="0x558577067c50", requires_grad=true}:() -> tensor<768xf32>
	%550="ufront.linear"(%547, %548, %549){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%551="ufront.parameter"(){dtype="Float", initializer="0x55858f2f0410", requires_grad=true}:() -> tensor<768x768xf32>
	%552="ufront.parameter"(){dtype="Float", initializer="0x55857706cec0", requires_grad=true}:() -> tensor<768xf32>
	%553="ufront.linear"(%547, %551, %552){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%554="ufront.parameter"(){dtype="Float", initializer="0x55858f770430", requires_grad=true}:() -> tensor<768x768xf32>
	%555="ufront.parameter"(){dtype="Float", initializer="0x55857706ff00", requires_grad=true}:() -> tensor<768xf32>
	%556="ufront.linear"(%547, %554, %555){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%557="ufront.reshape"(%550){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%558="ufront.transpose"(%557){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%559="ufront.reshape"(%553){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%560="ufront.transpose"(%559){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%561="ufront.reshape"(%556){shape=[2, 3, 12, 64]}:(tensor<2x3x768xf32>) -> tensor<2x3x12x64xf32>
	%562="ufront.transpose"(%561){perms=[0, 2, 1, 3]}:(tensor<2x3x12x64xf32>) -> tensor<2x12x3x64xf32>
	%563="ufront.transpose"(%560){perms=[0, 1, 3, 2]}:(tensor<2x12x3x64xf32>) -> tensor<2x12x64x3xf32>
	%564="ufront.batch_matmul"(%558, %563):(tensor<2x12x3x64xf32>, tensor<2x12x64x3xf32>) -> tensor<2x12x3x3xf32>
	%565="ufront.struediv"(%564){scalar=8.0}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%566="ufront.add"(%565, %4):(tensor<2x12x3x3xf32>, tensor<2x1x1x3xi64>) -> tensor<2x12x3x3xf32>
	%567="ufront.softmax"(%566):(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%568="ufront.dropout"(%567){rate=0.1, seed=0, training=false}:(tensor<2x12x3x3xf32>) -> tensor<2x12x3x3xf32>
	%569="ufront.batch_matmul"(%568, %562):(tensor<2x12x3x3xf32>, tensor<2x12x3x64xf32>) -> tensor<2x12x3x64xf32>
	%570="ufront.transpose"(%569){perms=[0, 2, 1, 3]}:(tensor<2x12x3x64xf32>) -> tensor<2x3x12x64xf32>
	%571="ufront.reshape"(%570){shape=[2, 3, 768]}:(tensor<2x3x12x64xf32>) -> tensor<2x3x768xf32>
	%572="ufront.parameter"(){dtype="Float", initializer="0x558590730440", requires_grad=true}:() -> tensor<768x768xf32>
	%573="ufront.parameter"(){dtype="Float", initializer="0x558577080c40", requires_grad=true}:() -> tensor<768xf32>
	%574="ufront.linear"(%571, %572, %573){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%575="ufront.dropout"(%574){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%576="ufront.add"(%575, %547):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%577="ufront.parameter"(){dtype="Float", initializer="0x558577084800", requires_grad=true}:() -> tensor<768xf32>
	%578="ufront.parameter"(){dtype="Float", initializer="0x558577085410", requires_grad=true}:() -> tensor<768xf32>
	%579="ufront.layer_norm"(%576, %577, %578){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%580="ufront.parameter"(){dtype="Float", initializer="0x558591030480", requires_grad=true}:() -> tensor<3072x768xf32>
	%581="ufront.parameter"(){dtype="Float", initializer="0x55857708a480", requires_grad=true}:() -> tensor<3072xf32>
	%582="ufront.linear"(%579, %580, %581){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<3072x768xf32>, tensor<3072xf32>) -> tensor<2x3x3072xf32>
	%583="ufront.smultiply"(%582){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%584="ufront.struediv"(%582){scalar=1.4142135623730951}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%585="ufront.erf"(%584):(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%586="ufront.sadd"(%585){scalar=1.0}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%587="ufront.multiply"(%583, %586):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%588="ufront.parameter"(){dtype="Float", initializer="0x558591930490", requires_grad=true}:() -> tensor<768x3072xf32>
	%589="ufront.parameter"(){dtype="Float", initializer="0x5585770934b0", requires_grad=true}:() -> tensor<768xf32>
	%590="ufront.linear"(%587, %588, %589){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x3072xf32>, tensor<768x3072xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%591="ufront.dropout"(%590){rate=0.1, seed=0, training=false}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%592="ufront.add"(%591, %579):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%593="ufront.parameter"(){dtype="Float", initializer="0x558577096d00", requires_grad=true}:() -> tensor<768xf32>
	%594="ufront.parameter"(){dtype="Float", initializer="0x558577098890", requires_grad=true}:() -> tensor<768xf32>
	%595="ufront.layer_norm"(%592, %593, %594){elementwise_affine=true, eps=0.000000000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x3x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<2x3x768xf32>
	%596="ufront.slice"(%595){output_shape=[2, 768], slices=[["None", "None", "None"], 0]}:(tensor<2x3x768xf32>) -> tensor<2x768xf32>
	%597="ufront.parameter"(){dtype="Float", initializer="0x558590bb0460", requires_grad=true}:() -> tensor<768x768xf32>
	%598="ufront.parameter"(){dtype="Float", initializer="0x55857709cc30", requires_grad=true}:() -> tensor<768xf32>
	%599="ufront.linear"(%596, %597, %598){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<2x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x768xf32>
	%600="ufront.tanh"(%599):(tensor<2x768xf32>) -> tensor<2x768xf32>
	%601="ufront.softmax"(%595):(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	return %601: tensor<2x3x768xf32>
}
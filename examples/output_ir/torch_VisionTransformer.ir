func.func @forward(%input1: tensor<1x3x224x224xf32>) -> tensor<1x1000xf32>  { 
	%1="ufront.parameter"(){dtype="Float", initializer="0x55ebebbfa290", requires_grad=true}:() -> tensor<768x3x16x16xf32>
	%2="ufront.parameter"(){dtype="Float", initializer="0x55ebea773480", requires_grad=true}:() -> tensor<768xf32>
	%3="ufront.conv2d"(%input1, %1, %2){groups=1, kernel=[16, 16], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[16, 16]}:(tensor<1x3x224x224xf32>, tensor<768x3x16x16xf32>, tensor<768xf32>) -> tensor<1x768x14x14xf32>
	%4="ufront.reshape"(%3){shape=[1, 768, 196]}:(tensor<1x768x14x14xf32>) -> tensor<1x768x196xf32>
	%5="ufront.transpose"(%4){perms=[0, 2, 1]}:(tensor<1x768x196xf32>) -> tensor<1x196x768xf32>
	%6="ufront.parameter"(){dtype="Float", initializer="0x55ebea778bc0", requires_grad=true}:() -> tensor<1x1x768xf32>
	%7="ufront.expand"(%6){sizes=[1, -1, -1]}:(tensor<1x1x768xf32>) -> tensor<1x1x768xf32>
	%8="ufront.concat"(%7, %5){axis=1}:(tensor<1x1x768xf32>, tensor<1x196x768xf32>) -> tensor<1x197x768xf32>
	%9="ufront.parameter"(){dtype="Float", initializer="0x55ebebe3a2a0", requires_grad=true}:() -> tensor<1x197x768xf32>
	%10="ufront.add"(%8, %9):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%11="ufront.dropout"(%10){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%12="ufront.parameter"(){dtype="Float", initializer="0x55ebea780350", requires_grad=true}:() -> tensor<768xf32>
	%13="ufront.parameter"(){dtype="Float", initializer="0x55ebea784580", requires_grad=true}:() -> tensor<768xf32>
	%14="ufront.layer_norm"(%11, %12, %13){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%15="ufront.parameter"(){dtype="Float", initializer="0x55ebec2ba2c0", requires_grad=true}:() -> tensor<768x768xf32>
	%16="ufront.parameter"(){dtype="Float", initializer="0x55ebec4fa2d0", requires_grad=true}:() -> tensor<768x768xf32>
	%17="ufront.parameter"(){dtype="Float", initializer="0x55ebec73a2e0", requires_grad=true}:() -> tensor<768x768xf32>
	%18="ufront.parameter"(){dtype="Float", initializer="0x55ebec97a2f0", requires_grad=true}:() -> tensor<768x768xf32>
	%19="ufront.parameter"(){dtype="Float", initializer="0x55ebea78ad50", requires_grad=true}:() -> tensor<768xf32>
	%20="ufront.parameter"(){dtype="Float", initializer="0x55ebea789d60", requires_grad=true}:() -> tensor<768xf32>
	%21="ufront.parameter"(){dtype="Float", initializer="0x55ebea78f450", requires_grad=true}:() -> tensor<768xf32>
	%22="ufront.parameter"(){dtype="Float", initializer="0x55ebea793600", requires_grad=true}:() -> tensor<768xf32>
	%23="ufront.multihead_attention"(%14, %14, %14, %15, %16, %17, %18, %19, %20, %21, %22){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0>, weight_transposed=true}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%24="ufront.dropout"(%23){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%25="ufront.add"(%24, %11):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%26="ufront.parameter"(){dtype="Float", initializer="0x55ebea79b2a0", requires_grad=true}:() -> tensor<768xf32>
	%27="ufront.parameter"(){dtype="Float", initializer="0x55ebea795c10", requires_grad=true}:() -> tensor<768xf32>
	%28="ufront.layer_norm"(%25, %26, %27){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%29="ufront.parameter"(){dtype="Float", initializer="0x55ebeddba380", requires_grad=true}:() -> tensor<768x3072xf32>
	%30="ufront.parameter"(){dtype="Float", initializer="0x55ebea7a0050", requires_grad=true}:() -> tensor<3072xf32>
	%31="ufront.linear"(%28, %29, %30){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>, tensor<3072xf32>) -> tensor<1x197x3072xf32>
	%32="ufront.gelu"(%31){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%33="ufront.dropout"(%32){rate=0.1, seed=0, training=false}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%34="ufront.parameter"(){dtype="Float", initializer="0x55ebecbba300", requires_grad=true}:() -> tensor<3072x768xf32>
	%35="ufront.parameter"(){dtype="Float", initializer="0x55ebea7a4220", requires_grad=true}:() -> tensor<768xf32>
	%36="ufront.linear"(%33, %34, %35){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%37="ufront.dropout"(%36){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%38="ufront.add"(%25, %37):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%39="ufront.parameter"(){dtype="Float", initializer="0x55ebea7ae4e0", requires_grad=true}:() -> tensor<768xf32>
	%40="ufront.parameter"(){dtype="Float", initializer="0x55ebea7b0100", requires_grad=true}:() -> tensor<768xf32>
	%41="ufront.layer_norm"(%38, %39, %40){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%42="ufront.parameter"(){dtype="Float", initializer="0x55ebee6ba390", requires_grad=true}:() -> tensor<768x768xf32>
	%43="ufront.parameter"(){dtype="Float", initializer="0x55ebee8fa3a0", requires_grad=true}:() -> tensor<768x768xf32>
	%44="ufront.parameter"(){dtype="Float", initializer="0x55ebeeb3a3b0", requires_grad=true}:() -> tensor<768x768xf32>
	%45="ufront.parameter"(){dtype="Float", initializer="0x55ebef8ba3b0", requires_grad=true}:() -> tensor<768x768xf32>
	%46="ufront.parameter"(){dtype="Float", initializer="0x55ebea7b5010", requires_grad=true}:() -> tensor<768xf32>
	%47="ufront.parameter"(){dtype="Float", initializer="0x55ebea7b5c20", requires_grad=true}:() -> tensor<768xf32>
	%48="ufront.parameter"(){dtype="Float", initializer="0x55ebebff6310", requires_grad=true}:() -> tensor<768xf32>
	%49="ufront.parameter"(){dtype="Float", initializer="0x55ebebff79a0", requires_grad=true}:() -> tensor<768xf32>
	%50="ufront.multihead_attention"(%41, %41, %41, %42, %43, %44, %45, %46, %47, %48, %49){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0>, weight_transposed=true}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%51="ufront.dropout"(%50){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%52="ufront.add"(%51, %38):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%53="ufront.parameter"(){dtype="Float", initializer="0x55ebebff9310", requires_grad=true}:() -> tensor<768xf32>
	%54="ufront.parameter"(){dtype="Float", initializer="0x55ebebffc5f0", requires_grad=true}:() -> tensor<768xf32>
	%55="ufront.layer_norm"(%52, %53, %54){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%56="ufront.parameter"(){dtype="Float", initializer="0x55ebf213a440", requires_grad=true}:() -> tensor<768x3072xf32>
	%57="ufront.parameter"(){dtype="Float", initializer="0x55ebec006350", requires_grad=true}:() -> tensor<3072xf32>
	%58="ufront.linear"(%55, %56, %57){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>, tensor<3072xf32>) -> tensor<1x197x3072xf32>
	%59="ufront.gelu"(%58){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%60="ufront.dropout"(%59){rate=0.1, seed=0, training=false}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%61="ufront.parameter"(){dtype="Float", initializer="0x55ebf2a3a450", requires_grad=true}:() -> tensor<3072x768xf32>
	%62="ufront.parameter"(){dtype="Float", initializer="0x55ebec009b20", requires_grad=true}:() -> tensor<768xf32>
	%63="ufront.linear"(%60, %61, %62){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%64="ufront.dropout"(%63){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%65="ufront.add"(%52, %64):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%66="ufront.parameter"(){dtype="Float", initializer="0x55ebec011fb0", requires_grad=true}:() -> tensor<768xf32>
	%67="ufront.parameter"(){dtype="Float", initializer="0x55ebec010390", requires_grad=true}:() -> tensor<768xf32>
	%68="ufront.layer_norm"(%65, %66, %67){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%69="ufront.parameter"(){dtype="Float", initializer="0x55ebf0aba3d0", requires_grad=true}:() -> tensor<768x768xf32>
	%70="ufront.parameter"(){dtype="Float", initializer="0x55ebf0cfa3e0", requires_grad=true}:() -> tensor<768x768xf32>
	%71="ufront.parameter"(){dtype="Float", initializer="0x55ebefafa3c0", requires_grad=true}:() -> tensor<768x768xf32>
	%72="ufront.parameter"(){dtype="Float", initializer="0x55ebefd3a3d0", requires_grad=true}:() -> tensor<768x768xf32>
	%73="ufront.parameter"(){dtype="Float", initializer="0x55ebec014a90", requires_grad=true}:() -> tensor<768xf32>
	%74="ufront.parameter"(){dtype="Float", initializer="0x55ebec019350", requires_grad=true}:() -> tensor<768xf32>
	%75="ufront.parameter"(){dtype="Float", initializer="0x55ebec01b840", requires_grad=true}:() -> tensor<768xf32>
	%76="ufront.parameter"(){dtype="Float", initializer="0x55ebec01d2d0", requires_grad=true}:() -> tensor<768xf32>
	%77="ufront.multihead_attention"(%68, %68, %68, %69, %70, %71, %72, %73, %74, %75, %76){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0>, weight_transposed=true}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%78="ufront.dropout"(%77){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%79="ufront.add"(%78, %65):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%80="ufront.parameter"(){dtype="Float", initializer="0x55ebec0215e0", requires_grad=true}:() -> tensor<768xf32>
	%81="ufront.parameter"(){dtype="Float", initializer="0x55ebec0205d0", requires_grad=true}:() -> tensor<768xf32>
	%82="ufront.layer_norm"(%79, %80, %81){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%83="ufront.parameter"(){dtype="Float", initializer="0x55ebf52ba4b0", requires_grad=true}:() -> tensor<768x3072xf32>
	%84="ufront.parameter"(){dtype="Float", initializer="0x55ebec02a710", requires_grad=true}:() -> tensor<3072xf32>
	%85="ufront.linear"(%82, %83, %84){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>, tensor<3072xf32>) -> tensor<1x197x3072xf32>
	%86="ufront.gelu"(%85){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%87="ufront.dropout"(%86){rate=0.1, seed=0, training=false}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%88="ufront.parameter"(){dtype="Float", initializer="0x55ebf5bba4c0", requires_grad=true}:() -> tensor<3072x768xf32>
	%89="ufront.parameter"(){dtype="Float", initializer="0x55ebec02dd80", requires_grad=true}:() -> tensor<768xf32>
	%90="ufront.linear"(%87, %88, %89){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%91="ufront.dropout"(%90){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%92="ufront.add"(%79, %91):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%93="ufront.parameter"(){dtype="Float", initializer="0x55ebec035780", requires_grad=true}:() -> tensor<768xf32>
	%94="ufront.parameter"(){dtype="Float", initializer="0x55ebec033740", requires_grad=true}:() -> tensor<768xf32>
	%95="ufront.layer_norm"(%92, %93, %94){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%96="ufront.parameter"(){dtype="Float", initializer="0x55ebf3c3a470", requires_grad=true}:() -> tensor<768x768xf32>
	%97="ufront.parameter"(){dtype="Float", initializer="0x55ebf183a430", requires_grad=true}:() -> tensor<768x768xf32>
	%98="ufront.parameter"(){dtype="Float", initializer="0x55ebf1a7a440", requires_grad=true}:() -> tensor<768x768xf32>
	%99="ufront.parameter"(){dtype="Float", initializer="0x55ebf1cba450", requires_grad=true}:() -> tensor<768x768xf32>
	%100="ufront.parameter"(){dtype="Float", initializer="0x55ebec037500", requires_grad=true}:() -> tensor<768xf32>
	%101="ufront.parameter"(){dtype="Float", initializer="0x55ebec03c720", requires_grad=true}:() -> tensor<768xf32>
	%102="ufront.parameter"(){dtype="Float", initializer="0x55ebec03ebd0", requires_grad=true}:() -> tensor<768xf32>
	%103="ufront.parameter"(){dtype="Float", initializer="0x55ebec040560", requires_grad=true}:() -> tensor<768xf32>
	%104="ufront.multihead_attention"(%95, %95, %95, %96, %97, %98, %99, %100, %101, %102, %103){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0>, weight_transposed=true}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%105="ufront.dropout"(%104){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%106="ufront.add"(%105, %92):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%107="ufront.parameter"(){dtype="Float", initializer="0x55ebec045410", requires_grad=true}:() -> tensor<768xf32>
	%108="ufront.parameter"(){dtype="Float", initializer="0x55ebec0437f0", requires_grad=true}:() -> tensor<768xf32>
	%109="ufront.layer_norm"(%106, %107, %108){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%110="ufront.parameter"(){dtype="Float", initializer="0x55ebf8afa550", requires_grad=true}:() -> tensor<768x3072xf32>
	%111="ufront.parameter"(){dtype="Float", initializer="0x55ebec04da50", requires_grad=true}:() -> tensor<3072xf32>
	%112="ufront.linear"(%109, %110, %111){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>, tensor<3072xf32>) -> tensor<1x197x3072xf32>
	%113="ufront.gelu"(%112){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%114="ufront.dropout"(%113){rate=0.1, seed=0, training=false}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%115="ufront.parameter"(){dtype="Float", initializer="0x55ebf93fa560", requires_grad=true}:() -> tensor<3072x768xf32>
	%116="ufront.parameter"(){dtype="Float", initializer="0x55ebec052400", requires_grad=true}:() -> tensor<768xf32>
	%117="ufront.linear"(%114, %115, %116){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%118="ufront.dropout"(%117){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%119="ufront.add"(%106, %118):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%120="ufront.parameter"(){dtype="Float", initializer="0x55ebec0596b0", requires_grad=true}:() -> tensor<768xf32>
	%121="ufront.parameter"(){dtype="Float", initializer="0x55ebec057a90", requires_grad=true}:() -> tensor<768xf32>
	%122="ufront.layer_norm"(%119, %120, %121){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%123="ufront.parameter"(){dtype="Float", initializer="0x55ebf7fba500", requires_grad=true}:() -> tensor<768x768xf32>
	%124="ufront.parameter"(){dtype="Float", initializer="0x55ebf6dba4e0", requires_grad=true}:() -> tensor<768x768xf32>
	%125="ufront.parameter"(){dtype="Float", initializer="0x55ebf6ffa4f0", requires_grad=true}:() -> tensor<768x768xf32>
	%126="ufront.parameter"(){dtype="Float", initializer="0x55ebf723a500", requires_grad=true}:() -> tensor<768x768xf32>
	%127="ufront.parameter"(){dtype="Float", initializer="0x55ebec05c3f0", requires_grad=true}:() -> tensor<768xf32>
	%128="ufront.parameter"(){dtype="Float", initializer="0x55ebec061460", requires_grad=true}:() -> tensor<768xf32>
	%129="ufront.parameter"(){dtype="Float", initializer="0x55ebec063eb0", requires_grad=true}:() -> tensor<768xf32>
	%130="ufront.parameter"(){dtype="Float", initializer="0x55ebec064d10", requires_grad=true}:() -> tensor<768xf32>
	%131="ufront.multihead_attention"(%122, %122, %122, %123, %124, %125, %126, %127, %128, %129, %130){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0>, weight_transposed=true}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%132="ufront.dropout"(%131){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%133="ufront.add"(%132, %119):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%134="ufront.parameter"(){dtype="Float", initializer="0x55ebec069390", requires_grad=true}:() -> tensor<768xf32>
	%135="ufront.parameter"(){dtype="Float", initializer="0x55ebec068380", requires_grad=true}:() -> tensor<768xf32>
	%136="ufront.layer_norm"(%133, %134, %135){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%137="ufront.parameter"(){dtype="Float", initializer="0x55ebfc33a5f0", requires_grad=true}:() -> tensor<768x3072xf32>
	%138="ufront.parameter"(){dtype="Float", initializer="0x55ebec0723b0", requires_grad=true}:() -> tensor<3072xf32>
	%139="ufront.linear"(%136, %137, %138){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>, tensor<3072xf32>) -> tensor<1x197x3072xf32>
	%140="ufront.gelu"(%139){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%141="ufront.dropout"(%140){rate=0.1, seed=0, training=false}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%142="ufront.parameter"(){dtype="Float", initializer="0x55ebfcc3a600", requires_grad=true}:() -> tensor<3072x768xf32>
	%143="ufront.parameter"(){dtype="Float", initializer="0x55ebec075b00", requires_grad=true}:() -> tensor<768xf32>
	%144="ufront.linear"(%141, %142, %143){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%145="ufront.dropout"(%144){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%146="ufront.add"(%133, %145):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%147="ufront.parameter"(){dtype="Float", initializer="0x55ebeff7d730", requires_grad=true}:() -> tensor<768xf32>
	%148="ufront.parameter"(){dtype="Float", initializer="0x55ebec077b20", requires_grad=true}:() -> tensor<768xf32>
	%149="ufront.layer_norm"(%146, %147, %148){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%150="ufront.parameter"(){dtype="Float", initializer="0x55ebfb7fa5a0", requires_grad=true}:() -> tensor<768x768xf32>
	%151="ufront.parameter"(){dtype="Float", initializer="0x55ebfa5fa580", requires_grad=true}:() -> tensor<768x768xf32>
	%152="ufront.parameter"(){dtype="Float", initializer="0x55ebfa83a590", requires_grad=true}:() -> tensor<768x768xf32>
	%153="ufront.parameter"(){dtype="Float", initializer="0x55ebfaa7a5a0", requires_grad=true}:() -> tensor<768x768xf32>
	%154="ufront.parameter"(){dtype="Float", initializer="0x55ebeff7f960", requires_grad=true}:() -> tensor<768xf32>
	%155="ufront.parameter"(){dtype="Float", initializer="0x55ebeff84220", requires_grad=true}:() -> tensor<768xf32>
	%156="ufront.parameter"(){dtype="Float", initializer="0x55ebeff86660", requires_grad=true}:() -> tensor<768xf32>
	%157="ufront.parameter"(){dtype="Float", initializer="0x55ebeff8a7e0", requires_grad=true}:() -> tensor<768xf32>
	%158="ufront.multihead_attention"(%149, %149, %149, %150, %151, %152, %153, %154, %155, %156, %157){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0>, weight_transposed=true}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%159="ufront.dropout"(%158){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%160="ufront.add"(%159, %146):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%161="ufront.parameter"(){dtype="Float", initializer="0x55ebeff8b3f0", requires_grad=true}:() -> tensor<768xf32>
	%162="ufront.parameter"(){dtype="Float", initializer="0x55ebeff92c60", requires_grad=true}:() -> tensor<768xf32>
	%163="ufront.layer_norm"(%160, %161, %162){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%164="ufront.parameter"(){dtype="Float", initializer="0x55ebffb7a690", requires_grad=true}:() -> tensor<768x3072xf32>
	%165="ufront.parameter"(){dtype="Float", initializer="0x55ebeff960a0", requires_grad=true}:() -> tensor<3072xf32>
	%166="ufront.linear"(%163, %164, %165){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>, tensor<3072xf32>) -> tensor<1x197x3072xf32>
	%167="ufront.gelu"(%166){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%168="ufront.dropout"(%167){rate=0.1, seed=0, training=false}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%169="ufront.parameter"(){dtype="Float", initializer="0x55ec0047a6a0", requires_grad=true}:() -> tensor<3072x768xf32>
	%170="ufront.parameter"(){dtype="Float", initializer="0x55ebeff9a960", requires_grad=true}:() -> tensor<768xf32>
	%171="ufront.linear"(%168, %169, %170){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%172="ufront.dropout"(%171){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%173="ufront.add"(%160, %172):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%174="ufront.parameter"(){dtype="Float", initializer="0x55ebeffa0cf0", requires_grad=true}:() -> tensor<768xf32>
	%175="ufront.parameter"(){dtype="Float", initializer="0x55ebeff9b570", requires_grad=true}:() -> tensor<768xf32>
	%176="ufront.layer_norm"(%173, %174, %175){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%177="ufront.parameter"(){dtype="Float", initializer="0x55ebff03a640", requires_grad=true}:() -> tensor<768x768xf32>
	%178="ufront.parameter"(){dtype="Float", initializer="0x55ebfde3a620", requires_grad=true}:() -> tensor<768x768xf32>
	%179="ufront.parameter"(){dtype="Float", initializer="0x55ebfe07a630", requires_grad=true}:() -> tensor<768x768xf32>
	%180="ufront.parameter"(){dtype="Float", initializer="0x55ebfe2ba640", requires_grad=true}:() -> tensor<768x768xf32>
	%181="ufront.parameter"(){dtype="Float", initializer="0x55ebeffa20f0", requires_grad=true}:() -> tensor<768xf32>
	%182="ufront.parameter"(){dtype="Float", initializer="0x55ebeffa7140", requires_grad=true}:() -> tensor<768xf32>
	%183="ufront.parameter"(){dtype="Float", initializer="0x55ebeffa9410", requires_grad=true}:() -> tensor<768xf32>
	%184="ufront.parameter"(){dtype="Float", initializer="0x55ebeffae060", requires_grad=true}:() -> tensor<768xf32>
	%185="ufront.multihead_attention"(%176, %176, %176, %177, %178, %179, %180, %181, %182, %183, %184){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0>, weight_transposed=true}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%186="ufront.dropout"(%185){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%187="ufront.add"(%186, %173):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%188="ufront.parameter"(){dtype="Float", initializer="0x55ebeffaec70", requires_grad=true}:() -> tensor<768xf32>
	%189="ufront.parameter"(){dtype="Float", initializer="0x55ebeffb05e0", requires_grad=true}:() -> tensor<768xf32>
	%190="ufront.layer_norm"(%187, %188, %189){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%191="ufront.parameter"(){dtype="Float", initializer="0x55ec033ba730", requires_grad=true}:() -> tensor<768x3072xf32>
	%192="ufront.parameter"(){dtype="Float", initializer="0x55ebeffb9c90", requires_grad=true}:() -> tensor<3072xf32>
	%193="ufront.linear"(%190, %191, %192){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>, tensor<3072xf32>) -> tensor<1x197x3072xf32>
	%194="ufront.gelu"(%193){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%195="ufront.dropout"(%194){rate=0.1, seed=0, training=false}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%196="ufront.parameter"(){dtype="Float", initializer="0x55ec03cba740", requires_grad=true}:() -> tensor<3072x768xf32>
	%197="ufront.parameter"(){dtype="Float", initializer="0x55ebeffbe840", requires_grad=true}:() -> tensor<768xf32>
	%198="ufront.linear"(%195, %196, %197){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%199="ufront.dropout"(%198){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%200="ufront.add"(%187, %199):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%201="ufront.parameter"(){dtype="Float", initializer="0x55ebeffc53b0", requires_grad=true}:() -> tensor<768xf32>
	%202="ufront.parameter"(){dtype="Float", initializer="0x55ebeffbf450", requires_grad=true}:() -> tensor<768xf32>
	%203="ufront.layer_norm"(%200, %201, %202){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%204="ufront.parameter"(){dtype="Float", initializer="0x55ec0287a6e0", requires_grad=true}:() -> tensor<768x768xf32>
	%205="ufront.parameter"(){dtype="Float", initializer="0x55ec0167a6c0", requires_grad=true}:() -> tensor<768x768xf32>
	%206="ufront.parameter"(){dtype="Float", initializer="0x55ec018ba6d0", requires_grad=true}:() -> tensor<768x768xf32>
	%207="ufront.parameter"(){dtype="Float", initializer="0x55ec01afa6e0", requires_grad=true}:() -> tensor<768x768xf32>
	%208="ufront.parameter"(){dtype="Float", initializer="0x55ebeffc6f00", requires_grad=true}:() -> tensor<768xf32>
	%209="ufront.parameter"(){dtype="Float", initializer="0x55ebeffcbf60", requires_grad=true}:() -> tensor<768xf32>
	%210="ufront.parameter"(){dtype="Float", initializer="0x55ebeffce450", requires_grad=true}:() -> tensor<768xf32>
	%211="ufront.parameter"(){dtype="Float", initializer="0x55ebeffcf800", requires_grad=true}:() -> tensor<768xf32>
	%212="ufront.multihead_attention"(%203, %203, %203, %204, %205, %206, %207, %208, %209, %210, %211){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0>, weight_transposed=true}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%213="ufront.dropout"(%212){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%214="ufront.add"(%213, %200):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%215="ufront.parameter"(){dtype="Float", initializer="0x55ebeffd3e90", requires_grad=true}:() -> tensor<768xf32>
	%216="ufront.parameter"(){dtype="Float", initializer="0x55ebeffd2e80", requires_grad=true}:() -> tensor<768xf32>
	%217="ufront.layer_norm"(%214, %215, %216){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%218="ufront.parameter"(){dtype="Float", initializer="0x55ec06bfa7d0", requires_grad=true}:() -> tensor<768x3072xf32>
	%219="ufront.parameter"(){dtype="Float", initializer="0x55ebeffdc6f0", requires_grad=true}:() -> tensor<3072xf32>
	%220="ufront.linear"(%217, %218, %219){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>, tensor<3072xf32>) -> tensor<1x197x3072xf32>
	%221="ufront.gelu"(%220){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%222="ufront.dropout"(%221){rate=0.1, seed=0, training=false}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%223="ufront.parameter"(){dtype="Float", initializer="0x55ec074fa7e0", requires_grad=true}:() -> tensor<3072x768xf32>
	%224="ufront.parameter"(){dtype="Float", initializer="0x55ebeffe28e0", requires_grad=true}:() -> tensor<768xf32>
	%225="ufront.linear"(%222, %223, %224){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%226="ufront.dropout"(%225){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%227="ufront.add"(%214, %226):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%228="ufront.parameter"(){dtype="Float", initializer="0x55ebeffe8770", requires_grad=true}:() -> tensor<768xf32>
	%229="ufront.parameter"(){dtype="Float", initializer="0x55ebeffe6730", requires_grad=true}:() -> tensor<768xf32>
	%230="ufront.layer_norm"(%227, %228, %229){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%231="ufront.parameter"(){dtype="Float", initializer="0x55ec060ba780", requires_grad=true}:() -> tensor<768x768xf32>
	%232="ufront.parameter"(){dtype="Float", initializer="0x55ec04eba760", requires_grad=true}:() -> tensor<768x768xf32>
	%233="ufront.parameter"(){dtype="Float", initializer="0x55ec050fa770", requires_grad=true}:() -> tensor<768x768xf32>
	%234="ufront.parameter"(){dtype="Float", initializer="0x55ec0533a780", requires_grad=true}:() -> tensor<768x768xf32>
	%235="ufront.parameter"(){dtype="Float", initializer="0x55ebeffea9a0", requires_grad=true}:() -> tensor<768xf32>
	%236="ufront.parameter"(){dtype="Float", initializer="0x55ebeffef070", requires_grad=true}:() -> tensor<768xf32>
	%237="ufront.parameter"(){dtype="Float", initializer="0x55ebefff1340", requires_grad=true}:() -> tensor<768xf32>
	%238="ufront.parameter"(){dtype="Float", initializer="0x55ebefff5f90", requires_grad=true}:() -> tensor<768xf32>
	%239="ufront.multihead_attention"(%230, %230, %230, %231, %232, %233, %234, %235, %236, %237, %238){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0>, weight_transposed=true}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%240="ufront.dropout"(%239){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%241="ufront.add"(%240, %227):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%242="ufront.parameter"(){dtype="Float", initializer="0x55ebefff7bb0", requires_grad=true}:() -> tensor<768xf32>
	%243="ufront.parameter"(){dtype="Float", initializer="0x55ebefff6ba0", requires_grad=true}:() -> tensor<768xf32>
	%244="ufront.layer_norm"(%241, %242, %243){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%245="ufront.parameter"(){dtype="Float", initializer="0x55ec0a43a870", requires_grad=true}:() -> tensor<768x3072xf32>
	%246="ufront.parameter"(){dtype="Float", initializer="0x55ebf00005b0", requires_grad=true}:() -> tensor<3072xf32>
	%247="ufront.linear"(%244, %245, %246){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>, tensor<3072xf32>) -> tensor<1x197x3072xf32>
	%248="ufront.gelu"(%247){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%249="ufront.dropout"(%248){rate=0.1, seed=0, training=false}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%250="ufront.parameter"(){dtype="Float", initializer="0x55ec0ad3a880", requires_grad=true}:() -> tensor<3072x768xf32>
	%251="ufront.parameter"(){dtype="Float", initializer="0x55ebf0003ce0", requires_grad=true}:() -> tensor<768xf32>
	%252="ufront.linear"(%249, %250, %251){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%253="ufront.dropout"(%252){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%254="ufront.add"(%241, %253):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%255="ufront.parameter"(){dtype="Float", initializer="0x55ebf000be80", requires_grad=true}:() -> tensor<768xf32>
	%256="ufront.parameter"(){dtype="Float", initializer="0x55ebf00095e0", requires_grad=true}:() -> tensor<768xf32>
	%257="ufront.layer_norm"(%254, %255, %256){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%258="ufront.parameter"(){dtype="Float", initializer="0x55ec098fa820", requires_grad=true}:() -> tensor<768x768xf32>
	%259="ufront.parameter"(){dtype="Float", initializer="0x55ec086fa800", requires_grad=true}:() -> tensor<768x768xf32>
	%260="ufront.parameter"(){dtype="Float", initializer="0x55ec0893a810", requires_grad=true}:() -> tensor<768x768xf32>
	%261="ufront.parameter"(){dtype="Float", initializer="0x55ec08b7a820", requires_grad=true}:() -> tensor<768x768xf32>
	%262="ufront.parameter"(){dtype="Float", initializer="0x55ebf0013c70", requires_grad=true}:() -> tensor<768xf32>
	%263="ufront.parameter"(){dtype="Float", initializer="0x55ebf0012970", requires_grad=true}:() -> tensor<768xf32>
	%264="ufront.parameter"(){dtype="Float", initializer="0x55ebf0018710", requires_grad=true}:() -> tensor<768xf32>
	%265="ufront.parameter"(){dtype="Float", initializer="0x55ebf0017780", requires_grad=true}:() -> tensor<768xf32>
	%266="ufront.multihead_attention"(%257, %257, %257, %258, %259, %260, %261, %262, %263, %264, %265){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0>, weight_transposed=true}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%267="ufront.dropout"(%266){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%268="ufront.add"(%267, %254):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%269="ufront.parameter"(){dtype="Float", initializer="0x55ebf001a330", requires_grad=true}:() -> tensor<768xf32>
	%270="ufront.parameter"(){dtype="Float", initializer="0x55ebf0022610", requires_grad=true}:() -> tensor<768xf32>
	%271="ufront.layer_norm"(%268, %269, %270){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%272="ufront.parameter"(){dtype="Float", initializer="0x55ec0dc7a910", requires_grad=true}:() -> tensor<768x3072xf32>
	%273="ufront.parameter"(){dtype="Float", initializer="0x55ebf0024e40", requires_grad=true}:() -> tensor<3072xf32>
	%274="ufront.linear"(%271, %272, %273){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>, tensor<3072xf32>) -> tensor<1x197x3072xf32>
	%275="ufront.gelu"(%274){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%276="ufront.dropout"(%275){rate=0.1, seed=0, training=false}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%277="ufront.parameter"(){dtype="Float", initializer="0x55ec0e57a920", requires_grad=true}:() -> tensor<3072x768xf32>
	%278="ufront.parameter"(){dtype="Float", initializer="0x55ebec05a9d0", requires_grad=true}:() -> tensor<768xf32>
	%279="ufront.linear"(%276, %277, %278){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%280="ufront.dropout"(%279){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%281="ufront.add"(%268, %280):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%282="ufront.parameter"(){dtype="Float", initializer="0x55ebf0031ef0", requires_grad=true}:() -> tensor<768xf32>
	%283="ufront.parameter"(){dtype="Float", initializer="0x55ebf0032f20", requires_grad=true}:() -> tensor<768xf32>
	%284="ufront.layer_norm"(%281, %282, %283){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%285="ufront.parameter"(){dtype="Float", initializer="0x55ec0d13a8c0", requires_grad=true}:() -> tensor<768x768xf32>
	%286="ufront.parameter"(){dtype="Float", initializer="0x55ec0bf3a8a0", requires_grad=true}:() -> tensor<768x768xf32>
	%287="ufront.parameter"(){dtype="Float", initializer="0x55ec0c17a8b0", requires_grad=true}:() -> tensor<768x768xf32>
	%288="ufront.parameter"(){dtype="Float", initializer="0x55ec0c3ba8c0", requires_grad=true}:() -> tensor<768x768xf32>
	%289="ufront.parameter"(){dtype="Float", initializer="0x55ebf0033fc0", requires_grad=true}:() -> tensor<768xf32>
	%290="ufront.parameter"(){dtype="Float", initializer="0x55ebf0038880", requires_grad=true}:() -> tensor<768xf32>
	%291="ufront.parameter"(){dtype="Float", initializer="0x55ebf003c290", requires_grad=true}:() -> tensor<768xf32>
	%292="ufront.parameter"(){dtype="Float", initializer="0x55ebf003af50", requires_grad=true}:() -> tensor<768xf32>
	%293="ufront.multihead_attention"(%284, %284, %284, %285, %286, %287, %288, %289, %290, %291, %292){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0>, weight_transposed=true}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%294="ufront.dropout"(%293){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%295="ufront.add"(%294, %281):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%296="ufront.parameter"(){dtype="Float", initializer="0x55ebf003fed0", requires_grad=true}:() -> tensor<768xf32>
	%297="ufront.parameter"(){dtype="Float", initializer="0x55ebf003ed00", requires_grad=true}:() -> tensor<768xf32>
	%298="ufront.layer_norm"(%295, %296, %297){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%299="ufront.parameter"(){dtype="Float", initializer="0x55ec114ba9b0", requires_grad=true}:() -> tensor<768x3072xf32>
	%300="ufront.parameter"(){dtype="Float", initializer="0x55ebf00494c0", requires_grad=true}:() -> tensor<3072xf32>
	%301="ufront.linear"(%298, %299, %300){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>, tensor<3072xf32>) -> tensor<1x197x3072xf32>
	%302="ufront.gelu"(%301){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%303="ufront.dropout"(%302){rate=0.1, seed=0, training=false}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%304="ufront.parameter"(){dtype="Float", initializer="0x55ec11dba9c0", requires_grad=true}:() -> tensor<3072x768xf32>
	%305="ufront.parameter"(){dtype="Float", initializer="0x55ebf004c4d0", requires_grad=true}:() -> tensor<768xf32>
	%306="ufront.linear"(%303, %304, %305){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%307="ufront.dropout"(%306){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%308="ufront.add"(%295, %307):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%309="ufront.parameter"(){dtype="Float", initializer="0x55ebf0055dc0", requires_grad=true}:() -> tensor<768xf32>
	%310="ufront.parameter"(){dtype="Float", initializer="0x55ebf00524f0", requires_grad=true}:() -> tensor<768xf32>
	%311="ufront.layer_norm"(%308, %309, %310){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%312="ufront.parameter"(){dtype="Float", initializer="0x55ec1097a960", requires_grad=true}:() -> tensor<768x768xf32>
	%313="ufront.parameter"(){dtype="Float", initializer="0x55ec0f77a940", requires_grad=true}:() -> tensor<768x768xf32>
	%314="ufront.parameter"(){dtype="Float", initializer="0x55ec0f9ba950", requires_grad=true}:() -> tensor<768x768xf32>
	%315="ufront.parameter"(){dtype="Float", initializer="0x55ec0fbfa960", requires_grad=true}:() -> tensor<768x768xf32>
	%316="ufront.parameter"(){dtype="Float", initializer="0x55ebf0057510", requires_grad=true}:() -> tensor<768xf32>
	%317="ufront.parameter"(){dtype="Float", initializer="0x55ebf005a770", requires_grad=true}:() -> tensor<768xf32>
	%318="ufront.parameter"(){dtype="Float", initializer="0x55ebf005ca40", requires_grad=true}:() -> tensor<768xf32>
	%319="ufront.parameter"(){dtype="Float", initializer="0x55ebf0060d30", requires_grad=true}:() -> tensor<768xf32>
	%320="ufront.multihead_attention"(%311, %311, %311, %312, %313, %314, %315, %316, %317, %318, %319){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0>, weight_transposed=true}:(tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<1x197x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%321="ufront.dropout"(%320){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%322="ufront.add"(%321, %308):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%323="ufront.parameter"(){dtype="Float", initializer="0x55ebf005ec20", requires_grad=true}:() -> tensor<768xf32>
	%324="ufront.parameter"(){dtype="Float", initializer="0x55ebf005dc10", requires_grad=true}:() -> tensor<768xf32>
	%325="ufront.layer_norm"(%322, %323, %324){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%326="ufront.parameter"(){dtype="Float", initializer="0x55ec14cfaa50", requires_grad=true}:() -> tensor<768x3072xf32>
	%327="ufront.parameter"(){dtype="Float", initializer="0x55ebf006aa40", requires_grad=true}:() -> tensor<3072xf32>
	%328="ufront.linear"(%325, %326, %327){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x768xf32>, tensor<768x3072xf32>, tensor<3072xf32>) -> tensor<1x197x3072xf32>
	%329="ufront.gelu"(%328){approximate=true}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%330="ufront.dropout"(%329){rate=0.1, seed=0, training=false}:(tensor<1x197x3072xf32>) -> tensor<1x197x3072xf32>
	%331="ufront.parameter"(){dtype="Float", initializer="0x55ec155faa60", requires_grad=true}:() -> tensor<3072x768xf32>
	%332="ufront.parameter"(){dtype="Float", initializer="0x55ebf006e500", requires_grad=true}:() -> tensor<768xf32>
	%333="ufront.linear"(%330, %331, %332){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x197x3072xf32>, tensor<3072x768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%334="ufront.dropout"(%333){rate=0.1, seed=0, training=false}:(tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%335="ufront.add"(%322, %334):(tensor<1x197x768xf32>, tensor<1x197x768xf32>) -> tensor<1x197x768xf32>
	%336="ufront.parameter"(){dtype="Float", initializer="0x55ebf0074ea0", requires_grad=true}:() -> tensor<768xf32>
	%337="ufront.parameter"(){dtype="Float", initializer="0x55ebf0079da0", requires_grad=true}:() -> tensor<768xf32>
	%338="ufront.layer_norm"(%335, %336, %337){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x197x768xf32>, tensor<768xf32>, tensor<768xf32>) -> tensor<1x197x768xf32>
	%339="ufront.slice"(%338){output_shape=[1, 768], slices=[["None", "None", "None"], 0]}:(tensor<1x197x768xf32>) -> tensor<1x768xf32>
	%340="ufront.parameter"(){dtype="Float", initializer="0x55ec132a89f0", requires_grad=true}:() -> tensor<768x1000xf32>
	%341="ufront.parameter"(){dtype="Float", initializer="0x55ebf007ea20", requires_grad=true}:() -> tensor<1000xf32>
	%342="ufront.linear"(%339, %340, %341){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<1x768xf32>, tensor<768x1000xf32>, tensor<1000xf32>) -> tensor<1x1000xf32>
	return %342: tensor<1x1000xf32>
}
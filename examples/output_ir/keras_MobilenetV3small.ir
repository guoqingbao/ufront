func.func @forward(%input1: tensor<32x3x224x224xf32>) -> tensor<32x1000xf32>  { 
	%1="ufront.smultiply"(%input1){scalar=0.007843137718737125}:(tensor<32x3x224x224xf32>) -> tensor<32x3x224x224xf32>
	%2="ufront.sadd"(%1){scalar=-1.0}:(tensor<32x3x224x224xf32>) -> tensor<32x3x224x224xf32>
	%3="ufront.conv2d"(%2){groups=1, kernel=[3, 3], pad=[0, 0], stride=[2, 2]}:(tensor<32x3x224x224xf32>) -> tensor<32x16x111x111xf32>
	%4="ufront.sadd"(%3){scalar=3.0}:(tensor<32x16x111x111xf32>) -> tensor<32x16x111x111xf32>
	%5="ufront.smultiply"(%4){scalar=0.1666666716337204}:(tensor<32x16x111x111xf32>) -> tensor<32x16x111x111xf32>
	%6="ufront.multiply"(%5, %3):(tensor<32x16x111x111xf32>, tensor<32x16x111x111xf32>) -> tensor<32x16x111x111xf32>
	%7="ufront.conv2d"(%6){groups=16, kernel=[3, 3], pad=[0, 0], stride=[2, 2]}:(tensor<32x16x111x111xf32>) -> tensor<32x16x55x55xf32>
	%8="ufront.relu"(%7):(tensor<32x16x55x55xf32>) -> tensor<32x16x55x55xf32>
	%9="ufront.pool2d"(%8){output_size=[1, 1], pad=[0, 0], pool_type="POOL_ADAPTIVE", stride=[1, 1]}:(tensor<32x16x55x55xf32>) -> tensor<32x16x1x1xf32>
	%10="ufront.flat"(%9){end_dim=-1, start_dim=1}:(tensor<32x16x1x1xf32>) -> tensor<32x16xf32>
	%11="ufront.reshape"(%10){shape=[32, 16, 1, 1]}:(tensor<32x16xf32>) -> tensor<32x16x1x1xf32>
	%12="ufront.conv2d"(%11){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x16x1x1xf32>) -> tensor<32x8x1x1xf32>
	%13="ufront.relu"(%12):(tensor<32x8x1x1xf32>) -> tensor<32x8x1x1xf32>
	%14="ufront.conv2d"(%13){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x8x1x1xf32>) -> tensor<32x16x1x1xf32>
	%15="ufront.smultiply"(%14){scalar=0.1666666716337204}:(tensor<32x16x1x1xf32>) -> tensor<32x16x1x1xf32>
	%16="ufront.multiply"(%8, %15):(tensor<32x16x55x55xf32>, tensor<32x16x1x1xf32>) -> tensor<32x16x55x55xf32>
	%17="ufront.conv2d"(%16){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x16x55x55xf32>) -> tensor<32x16x55x55xf32>
	%18="ufront.conv2d"(%17){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x16x55x55xf32>) -> tensor<32x72x55x55xf32>
	%19="ufront.relu"(%18):(tensor<32x72x55x55xf32>) -> tensor<32x72x55x55xf32>
	%20="ufront.conv2d"(%19){groups=72, kernel=[3, 3], pad=[0, 0], stride=[2, 2]}:(tensor<32x72x55x55xf32>) -> tensor<32x72x27x27xf32>
	%21="ufront.relu"(%20):(tensor<32x72x27x27xf32>) -> tensor<32x72x27x27xf32>
	%22="ufront.conv2d"(%21){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x72x27x27xf32>) -> tensor<32x24x27x27xf32>
	%23="ufront.conv2d"(%22){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x24x27x27xf32>) -> tensor<32x88x27x27xf32>
	%24="ufront.relu"(%23):(tensor<32x88x27x27xf32>) -> tensor<32x88x27x27xf32>
	%25="ufront.conv2d"(%24){groups=88, kernel=[3, 3], pad=[1, 1], stride=[1, 1]}:(tensor<32x88x27x27xf32>) -> tensor<32x88x27x27xf32>
	%26="ufront.relu"(%25):(tensor<32x88x27x27xf32>) -> tensor<32x88x27x27xf32>
	%27="ufront.conv2d"(%26){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x88x27x27xf32>) -> tensor<32x24x27x27xf32>
	%28="ufront.add"(%22, %27):(tensor<32x24x27x27xf32>, tensor<32x24x27x27xf32>) -> tensor<32x24x27x27xf32>
	%29="ufront.conv2d"(%28){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x24x27x27xf32>) -> tensor<32x96x27x27xf32>
	%30="ufront.sadd"(%29){scalar=3.0}:(tensor<32x96x27x27xf32>) -> tensor<32x96x27x27xf32>
	%31="ufront.smultiply"(%30){scalar=0.1666666716337204}:(tensor<32x96x27x27xf32>) -> tensor<32x96x27x27xf32>
	%32="ufront.multiply"(%31, %29):(tensor<32x96x27x27xf32>, tensor<32x96x27x27xf32>) -> tensor<32x96x27x27xf32>
	%33="ufront.conv2d"(%32){groups=96, kernel=[5, 5], pad=[1, 1], stride=[2, 2]}:(tensor<32x96x27x27xf32>) -> tensor<32x96x13x13xf32>
	%34="ufront.sadd"(%33){scalar=3.0}:(tensor<32x96x13x13xf32>) -> tensor<32x96x13x13xf32>
	%35="ufront.smultiply"(%34){scalar=0.1666666716337204}:(tensor<32x96x13x13xf32>) -> tensor<32x96x13x13xf32>
	%36="ufront.multiply"(%35, %33):(tensor<32x96x13x13xf32>, tensor<32x96x13x13xf32>) -> tensor<32x96x13x13xf32>
	%37="ufront.pool2d"(%36){output_size=[1, 1], pad=[0, 0], pool_type="POOL_ADAPTIVE", stride=[1, 1]}:(tensor<32x96x13x13xf32>) -> tensor<32x96x1x1xf32>
	%38="ufront.flat"(%37){end_dim=-1, start_dim=1}:(tensor<32x96x1x1xf32>) -> tensor<32x96xf32>
	%39="ufront.reshape"(%38){shape=[32, 96, 1, 1]}:(tensor<32x96xf32>) -> tensor<32x96x1x1xf32>
	%40="ufront.conv2d"(%39){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x96x1x1xf32>) -> tensor<32x24x1x1xf32>
	%41="ufront.relu"(%40):(tensor<32x24x1x1xf32>) -> tensor<32x24x1x1xf32>
	%42="ufront.conv2d"(%41){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x24x1x1xf32>) -> tensor<32x96x1x1xf32>
	%43="ufront.smultiply"(%42){scalar=0.1666666716337204}:(tensor<32x96x1x1xf32>) -> tensor<32x96x1x1xf32>
	%44="ufront.multiply"(%36, %43):(tensor<32x96x13x13xf32>, tensor<32x96x1x1xf32>) -> tensor<32x96x13x13xf32>
	%45="ufront.conv2d"(%44){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x96x13x13xf32>) -> tensor<32x40x13x13xf32>
	%46="ufront.conv2d"(%45){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x40x13x13xf32>) -> tensor<32x240x13x13xf32>
	%47="ufront.sadd"(%46){scalar=3.0}:(tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%48="ufront.smultiply"(%47){scalar=0.1666666716337204}:(tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%49="ufront.multiply"(%48, %46):(tensor<32x240x13x13xf32>, tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%50="ufront.conv2d"(%49){groups=240, kernel=[5, 5], pad=[2, 2], stride=[1, 1]}:(tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%51="ufront.sadd"(%50){scalar=3.0}:(tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%52="ufront.smultiply"(%51){scalar=0.1666666716337204}:(tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%53="ufront.multiply"(%52, %50):(tensor<32x240x13x13xf32>, tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%54="ufront.pool2d"(%53){output_size=[1, 1], pad=[0, 0], pool_type="POOL_ADAPTIVE", stride=[1, 1]}:(tensor<32x240x13x13xf32>) -> tensor<32x240x1x1xf32>
	%55="ufront.flat"(%54){end_dim=-1, start_dim=1}:(tensor<32x240x1x1xf32>) -> tensor<32x240xf32>
	%56="ufront.reshape"(%55){shape=[32, 240, 1, 1]}:(tensor<32x240xf32>) -> tensor<32x240x1x1xf32>
	%57="ufront.conv2d"(%56){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x240x1x1xf32>) -> tensor<32x64x1x1xf32>
	%58="ufront.relu"(%57):(tensor<32x64x1x1xf32>) -> tensor<32x64x1x1xf32>
	%59="ufront.conv2d"(%58){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x64x1x1xf32>) -> tensor<32x240x1x1xf32>
	%60="ufront.smultiply"(%59){scalar=0.1666666716337204}:(tensor<32x240x1x1xf32>) -> tensor<32x240x1x1xf32>
	%61="ufront.multiply"(%53, %60):(tensor<32x240x13x13xf32>, tensor<32x240x1x1xf32>) -> tensor<32x240x13x13xf32>
	%62="ufront.conv2d"(%61){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x240x13x13xf32>) -> tensor<32x40x13x13xf32>
	%63="ufront.add"(%45, %62):(tensor<32x40x13x13xf32>, tensor<32x40x13x13xf32>) -> tensor<32x40x13x13xf32>
	%64="ufront.conv2d"(%63){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x40x13x13xf32>) -> tensor<32x240x13x13xf32>
	%65="ufront.sadd"(%64){scalar=3.0}:(tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%66="ufront.smultiply"(%65){scalar=0.1666666716337204}:(tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%67="ufront.multiply"(%66, %64):(tensor<32x240x13x13xf32>, tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%68="ufront.conv2d"(%67){groups=240, kernel=[5, 5], pad=[2, 2], stride=[1, 1]}:(tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%69="ufront.sadd"(%68){scalar=3.0}:(tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%70="ufront.smultiply"(%69){scalar=0.1666666716337204}:(tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%71="ufront.multiply"(%70, %68):(tensor<32x240x13x13xf32>, tensor<32x240x13x13xf32>) -> tensor<32x240x13x13xf32>
	%72="ufront.pool2d"(%71){output_size=[1, 1], pad=[0, 0], pool_type="POOL_ADAPTIVE", stride=[1, 1]}:(tensor<32x240x13x13xf32>) -> tensor<32x240x1x1xf32>
	%73="ufront.flat"(%72){end_dim=-1, start_dim=1}:(tensor<32x240x1x1xf32>) -> tensor<32x240xf32>
	%74="ufront.reshape"(%73){shape=[32, 240, 1, 1]}:(tensor<32x240xf32>) -> tensor<32x240x1x1xf32>
	%75="ufront.conv2d"(%74){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x240x1x1xf32>) -> tensor<32x64x1x1xf32>
	%76="ufront.relu"(%75):(tensor<32x64x1x1xf32>) -> tensor<32x64x1x1xf32>
	%77="ufront.conv2d"(%76){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x64x1x1xf32>) -> tensor<32x240x1x1xf32>
	%78="ufront.smultiply"(%77){scalar=0.1666666716337204}:(tensor<32x240x1x1xf32>) -> tensor<32x240x1x1xf32>
	%79="ufront.multiply"(%71, %78):(tensor<32x240x13x13xf32>, tensor<32x240x1x1xf32>) -> tensor<32x240x13x13xf32>
	%80="ufront.conv2d"(%79){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x240x13x13xf32>) -> tensor<32x40x13x13xf32>
	%81="ufront.add"(%63, %80):(tensor<32x40x13x13xf32>, tensor<32x40x13x13xf32>) -> tensor<32x40x13x13xf32>
	%82="ufront.conv2d"(%81){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x40x13x13xf32>) -> tensor<32x120x13x13xf32>
	%83="ufront.sadd"(%82){scalar=3.0}:(tensor<32x120x13x13xf32>) -> tensor<32x120x13x13xf32>
	%84="ufront.smultiply"(%83){scalar=0.1666666716337204}:(tensor<32x120x13x13xf32>) -> tensor<32x120x13x13xf32>
	%85="ufront.multiply"(%84, %82):(tensor<32x120x13x13xf32>, tensor<32x120x13x13xf32>) -> tensor<32x120x13x13xf32>
	%86="ufront.conv2d"(%85){groups=120, kernel=[5, 5], pad=[2, 2], stride=[1, 1]}:(tensor<32x120x13x13xf32>) -> tensor<32x120x13x13xf32>
	%87="ufront.sadd"(%86){scalar=3.0}:(tensor<32x120x13x13xf32>) -> tensor<32x120x13x13xf32>
	%88="ufront.smultiply"(%87){scalar=0.1666666716337204}:(tensor<32x120x13x13xf32>) -> tensor<32x120x13x13xf32>
	%89="ufront.multiply"(%88, %86):(tensor<32x120x13x13xf32>, tensor<32x120x13x13xf32>) -> tensor<32x120x13x13xf32>
	%90="ufront.pool2d"(%89){output_size=[1, 1], pad=[0, 0], pool_type="POOL_ADAPTIVE", stride=[1, 1]}:(tensor<32x120x13x13xf32>) -> tensor<32x120x1x1xf32>
	%91="ufront.flat"(%90){end_dim=-1, start_dim=1}:(tensor<32x120x1x1xf32>) -> tensor<32x120xf32>
	%92="ufront.reshape"(%91){shape=[32, 120, 1, 1]}:(tensor<32x120xf32>) -> tensor<32x120x1x1xf32>
	%93="ufront.conv2d"(%92){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x120x1x1xf32>) -> tensor<32x32x1x1xf32>
	%94="ufront.relu"(%93):(tensor<32x32x1x1xf32>) -> tensor<32x32x1x1xf32>
	%95="ufront.conv2d"(%94){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x32x1x1xf32>) -> tensor<32x120x1x1xf32>
	%96="ufront.smultiply"(%95){scalar=0.1666666716337204}:(tensor<32x120x1x1xf32>) -> tensor<32x120x1x1xf32>
	%97="ufront.multiply"(%89, %96):(tensor<32x120x13x13xf32>, tensor<32x120x1x1xf32>) -> tensor<32x120x13x13xf32>
	%98="ufront.conv2d"(%97){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x120x13x13xf32>) -> tensor<32x48x13x13xf32>
	%99="ufront.conv2d"(%98){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x48x13x13xf32>) -> tensor<32x144x13x13xf32>
	%100="ufront.sadd"(%99){scalar=3.0}:(tensor<32x144x13x13xf32>) -> tensor<32x144x13x13xf32>
	%101="ufront.smultiply"(%100){scalar=0.1666666716337204}:(tensor<32x144x13x13xf32>) -> tensor<32x144x13x13xf32>
	%102="ufront.multiply"(%101, %99):(tensor<32x144x13x13xf32>, tensor<32x144x13x13xf32>) -> tensor<32x144x13x13xf32>
	%103="ufront.conv2d"(%102){groups=144, kernel=[5, 5], pad=[2, 2], stride=[1, 1]}:(tensor<32x144x13x13xf32>) -> tensor<32x144x13x13xf32>
	%104="ufront.sadd"(%103){scalar=3.0}:(tensor<32x144x13x13xf32>) -> tensor<32x144x13x13xf32>
	%105="ufront.smultiply"(%104){scalar=0.1666666716337204}:(tensor<32x144x13x13xf32>) -> tensor<32x144x13x13xf32>
	%106="ufront.multiply"(%105, %103):(tensor<32x144x13x13xf32>, tensor<32x144x13x13xf32>) -> tensor<32x144x13x13xf32>
	%107="ufront.pool2d"(%106){output_size=[1, 1], pad=[0, 0], pool_type="POOL_ADAPTIVE", stride=[1, 1]}:(tensor<32x144x13x13xf32>) -> tensor<32x144x1x1xf32>
	%108="ufront.flat"(%107){end_dim=-1, start_dim=1}:(tensor<32x144x1x1xf32>) -> tensor<32x144xf32>
	%109="ufront.reshape"(%108){shape=[32, 144, 1, 1]}:(tensor<32x144xf32>) -> tensor<32x144x1x1xf32>
	%110="ufront.conv2d"(%109){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x144x1x1xf32>) -> tensor<32x40x1x1xf32>
	%111="ufront.relu"(%110):(tensor<32x40x1x1xf32>) -> tensor<32x40x1x1xf32>
	%112="ufront.conv2d"(%111){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x40x1x1xf32>) -> tensor<32x144x1x1xf32>
	%113="ufront.smultiply"(%112){scalar=0.1666666716337204}:(tensor<32x144x1x1xf32>) -> tensor<32x144x1x1xf32>
	%114="ufront.multiply"(%106, %113):(tensor<32x144x13x13xf32>, tensor<32x144x1x1xf32>) -> tensor<32x144x13x13xf32>
	%115="ufront.conv2d"(%114){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x144x13x13xf32>) -> tensor<32x48x13x13xf32>
	%116="ufront.add"(%98, %115):(tensor<32x48x13x13xf32>, tensor<32x48x13x13xf32>) -> tensor<32x48x13x13xf32>
	%117="ufront.conv2d"(%116){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x48x13x13xf32>) -> tensor<32x288x13x13xf32>
	%118="ufront.sadd"(%117){scalar=3.0}:(tensor<32x288x13x13xf32>) -> tensor<32x288x13x13xf32>
	%119="ufront.smultiply"(%118){scalar=0.1666666716337204}:(tensor<32x288x13x13xf32>) -> tensor<32x288x13x13xf32>
	%120="ufront.multiply"(%119, %117):(tensor<32x288x13x13xf32>, tensor<32x288x13x13xf32>) -> tensor<32x288x13x13xf32>
	%121="ufront.conv2d"(%120){groups=288, kernel=[5, 5], pad=[1, 1], stride=[2, 2]}:(tensor<32x288x13x13xf32>) -> tensor<32x288x6x6xf32>
	%122="ufront.sadd"(%121){scalar=3.0}:(tensor<32x288x6x6xf32>) -> tensor<32x288x6x6xf32>
	%123="ufront.smultiply"(%122){scalar=0.1666666716337204}:(tensor<32x288x6x6xf32>) -> tensor<32x288x6x6xf32>
	%124="ufront.multiply"(%123, %121):(tensor<32x288x6x6xf32>, tensor<32x288x6x6xf32>) -> tensor<32x288x6x6xf32>
	%125="ufront.pool2d"(%124){output_size=[1, 1], pad=[0, 0], pool_type="POOL_ADAPTIVE", stride=[1, 1]}:(tensor<32x288x6x6xf32>) -> tensor<32x288x1x1xf32>
	%126="ufront.flat"(%125){end_dim=-1, start_dim=1}:(tensor<32x288x1x1xf32>) -> tensor<32x288xf32>
	%127="ufront.reshape"(%126){shape=[32, 288, 1, 1]}:(tensor<32x288xf32>) -> tensor<32x288x1x1xf32>
	%128="ufront.conv2d"(%127){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x288x1x1xf32>) -> tensor<32x72x1x1xf32>
	%129="ufront.relu"(%128):(tensor<32x72x1x1xf32>) -> tensor<32x72x1x1xf32>
	%130="ufront.conv2d"(%129){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x72x1x1xf32>) -> tensor<32x288x1x1xf32>
	%131="ufront.smultiply"(%130){scalar=0.1666666716337204}:(tensor<32x288x1x1xf32>) -> tensor<32x288x1x1xf32>
	%132="ufront.multiply"(%124, %131):(tensor<32x288x6x6xf32>, tensor<32x288x1x1xf32>) -> tensor<32x288x6x6xf32>
	%133="ufront.conv2d"(%132){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x288x6x6xf32>) -> tensor<32x96x6x6xf32>
	%134="ufront.conv2d"(%133){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x96x6x6xf32>) -> tensor<32x576x6x6xf32>
	%135="ufront.sadd"(%134){scalar=3.0}:(tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%136="ufront.smultiply"(%135){scalar=0.1666666716337204}:(tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%137="ufront.multiply"(%136, %134):(tensor<32x576x6x6xf32>, tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%138="ufront.conv2d"(%137){groups=576, kernel=[5, 5], pad=[2, 2], stride=[1, 1]}:(tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%139="ufront.sadd"(%138){scalar=3.0}:(tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%140="ufront.smultiply"(%139){scalar=0.1666666716337204}:(tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%141="ufront.multiply"(%140, %138):(tensor<32x576x6x6xf32>, tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%142="ufront.pool2d"(%141){output_size=[1, 1], pad=[0, 0], pool_type="POOL_ADAPTIVE", stride=[1, 1]}:(tensor<32x576x6x6xf32>) -> tensor<32x576x1x1xf32>
	%143="ufront.flat"(%142){end_dim=-1, start_dim=1}:(tensor<32x576x1x1xf32>) -> tensor<32x576xf32>
	%144="ufront.reshape"(%143){shape=[32, 576, 1, 1]}:(tensor<32x576xf32>) -> tensor<32x576x1x1xf32>
	%145="ufront.conv2d"(%144){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x576x1x1xf32>) -> tensor<32x144x1x1xf32>
	%146="ufront.relu"(%145):(tensor<32x144x1x1xf32>) -> tensor<32x144x1x1xf32>
	%147="ufront.conv2d"(%146){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x144x1x1xf32>) -> tensor<32x576x1x1xf32>
	%148="ufront.smultiply"(%147){scalar=0.1666666716337204}:(tensor<32x576x1x1xf32>) -> tensor<32x576x1x1xf32>
	%149="ufront.multiply"(%141, %148):(tensor<32x576x6x6xf32>, tensor<32x576x1x1xf32>) -> tensor<32x576x6x6xf32>
	%150="ufront.conv2d"(%149){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x576x6x6xf32>) -> tensor<32x96x6x6xf32>
	%151="ufront.add"(%133, %150):(tensor<32x96x6x6xf32>, tensor<32x96x6x6xf32>) -> tensor<32x96x6x6xf32>
	%152="ufront.conv2d"(%151){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x96x6x6xf32>) -> tensor<32x576x6x6xf32>
	%153="ufront.sadd"(%152){scalar=3.0}:(tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%154="ufront.smultiply"(%153){scalar=0.1666666716337204}:(tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%155="ufront.multiply"(%154, %152):(tensor<32x576x6x6xf32>, tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%156="ufront.conv2d"(%155){groups=576, kernel=[5, 5], pad=[2, 2], stride=[1, 1]}:(tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%157="ufront.sadd"(%156){scalar=3.0}:(tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%158="ufront.smultiply"(%157){scalar=0.1666666716337204}:(tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%159="ufront.multiply"(%158, %156):(tensor<32x576x6x6xf32>, tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%160="ufront.pool2d"(%159){output_size=[1, 1], pad=[0, 0], pool_type="POOL_ADAPTIVE", stride=[1, 1]}:(tensor<32x576x6x6xf32>) -> tensor<32x576x1x1xf32>
	%161="ufront.flat"(%160){end_dim=-1, start_dim=1}:(tensor<32x576x1x1xf32>) -> tensor<32x576xf32>
	%162="ufront.reshape"(%161){shape=[32, 576, 1, 1]}:(tensor<32x576xf32>) -> tensor<32x576x1x1xf32>
	%163="ufront.conv2d"(%162){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x576x1x1xf32>) -> tensor<32x144x1x1xf32>
	%164="ufront.relu"(%163):(tensor<32x144x1x1xf32>) -> tensor<32x144x1x1xf32>
	%165="ufront.conv2d"(%164){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x144x1x1xf32>) -> tensor<32x576x1x1xf32>
	%166="ufront.smultiply"(%165){scalar=0.1666666716337204}:(tensor<32x576x1x1xf32>) -> tensor<32x576x1x1xf32>
	%167="ufront.multiply"(%159, %166):(tensor<32x576x6x6xf32>, tensor<32x576x1x1xf32>) -> tensor<32x576x6x6xf32>
	%168="ufront.conv2d"(%167){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x576x6x6xf32>) -> tensor<32x96x6x6xf32>
	%169="ufront.add"(%151, %168):(tensor<32x96x6x6xf32>, tensor<32x96x6x6xf32>) -> tensor<32x96x6x6xf32>
	%170="ufront.conv2d"(%169){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x96x6x6xf32>) -> tensor<32x576x6x6xf32>
	%171="ufront.sadd"(%170){scalar=3.0}:(tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%172="ufront.smultiply"(%171){scalar=0.1666666716337204}:(tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%173="ufront.multiply"(%172, %170):(tensor<32x576x6x6xf32>, tensor<32x576x6x6xf32>) -> tensor<32x576x6x6xf32>
	%174="ufront.conv2d"(%173){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x576x6x6xf32>) -> tensor<32x1024x6x6xf32>
	%175="ufront.sadd"(%174){scalar=3.0}:(tensor<32x1024x6x6xf32>) -> tensor<32x1024x6x6xf32>
	%176="ufront.smultiply"(%175){scalar=0.1666666716337204}:(tensor<32x1024x6x6xf32>) -> tensor<32x1024x6x6xf32>
	%177="ufront.multiply"(%176, %174):(tensor<32x1024x6x6xf32>, tensor<32x1024x6x6xf32>) -> tensor<32x1024x6x6xf32>
	%178="ufront.pool2d"(%177){output_size=[1, 1], pad=[0, 0], pool_type="POOL_ADAPTIVE", stride=[1, 1]}:(tensor<32x1024x6x6xf32>) -> tensor<32x1024x1x1xf32>
	%179="ufront.flat"(%178){end_dim=-1, start_dim=1}:(tensor<32x1024x1x1xf32>) -> tensor<32x1024xf32>
	%180="ufront.reshape"(%179){shape=[32, 1024, 1, 1]}:(tensor<32x1024xf32>) -> tensor<32x1024x1x1xf32>
	%181="ufront.conv2d"(%180){groups=1, kernel=[1, 1], pad=[0, 0], stride=[1, 1]}:(tensor<32x1024x1x1xf32>) -> tensor<32x1000x1x1xf32>
	%182="ufront.reshape"(%181){shape=[32, 1000]}:(tensor<32x1000x1x1xf32>) -> tensor<32x1000xf32>
	%183="ufront.softmax"(%182):(tensor<32x1000xf32>) -> tensor<32x1000xf32>
	return %183: tensor<32x1000xf32>
}
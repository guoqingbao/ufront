func.func @forward(%input.1: tensor<2x3xi64>, %input.5: tensor<2x3xi64>, %onnxUnsqueeze_2: tensor<2x3xi64>) -> tensor<2x768xf32>  { 
	%1="ufront.reshape"(%onnxUnsqueeze_2){shape=[2, 1, 3]}:(tensor<2x3xi64>) -> tensor<2x1x3xi64>
	%2="ufront.reshape"(%1){shape=[2, 1, 1, 3]}:(tensor<2x1x3xi64>) -> tensor<2x1x1x3xi64>
	%3="ufront.cast"(%2){dtype="Float"}:(tensor<2x1x1x3xi64>) -> tensor<2x1x1x3xf32>
	%4="ufront.ssub"(%3){scalar=1.0, scalar_position="LEFT"}:(tensor<2x1x1x3xf32>) -> tensor<2x1x1x3xf32>
	%5="ufront.smultiply"(%4){scalar=-10000.0}:(tensor<2x1x1x3xf32>) -> tensor<2x1x1x3xf32>
	%6="ufront.parameter"(){dtype="Float", initializer="0x55b0e3517140", requires_grad=true}:() -> tensor<16000x768xf32>
	%7="ufront.embedding"(%input.1, %6){embedding_dim=768, num_embeddings=16000}:(tensor<2x3xi64>, tensor<16000x768xf32>) -> tensor<2x3x768xf32>
	%8="ufront.parameter"(){dtype="Float", initializer="0x55b0dd2170a0", requires_grad=true}:() -> tensor<768x768xf32>
	%9="ufront.parameter"(){dtype="Float", initializer="0x55b0dd4570b0", requires_grad=true}:() -> tensor<768x768xf32>
	%10="ufront.parameter"(){dtype="Float", initializer="0x55b0dd6970c0", requires_grad=true}:() -> tensor<768x768xf32>
	%11="ufront.parameter"(){dtype="Float", initializer="0x55b0dff170d0", requires_grad=true}:() -> tensor<768x768xf32>
	%12="ufront.multihead_attention"(%7, %7, %7, %8, %9, %10, %11){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<2x3x768xf32>
	%13="ufront.add"(%12, %7):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%14="ufront.layer_norm"(%13){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%15="ufront.parameter"(){dtype="Float", initializer="0x55b0e01570e0", requires_grad=true}:() -> tensor<768x3072xf32>
	%16="ufront.linear"(%14, %15){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<768x3072xf32>) -> tensor<2x3x3072xf32>
	%17="ufront.smultiply"(%16){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%18="ufront.struediv"(%16){scalar=1.4142135}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%19="ufront.erf"(%18){approximate=true}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%20="ufront.sadd"(%19){scalar=0.0001}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%21="ufront.multiply"(%17, %20):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%22="ufront.parameter"(){dtype="Float", initializer="0x55b0e6877170", requires_grad=true}:() -> tensor<3072x768xf32>
	%23="ufront.linear"(%21, %22){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x3072xf32>, tensor<3072x768xf32>) -> tensor<2x3x768xf32>
	%24="ufront.add"(%23, %14):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%25="ufront.layer_norm"(%24){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%26="ufront.parameter"(){dtype="Float", initializer="0x55b0e8c771b0", requires_grad=true}:() -> tensor<768x768xf32>
	%27="ufront.parameter"(){dtype="Float", initializer="0x55b0e8eb71c0", requires_grad=true}:() -> tensor<768x768xf32>
	%28="ufront.parameter"(){dtype="Float", initializer="0x55b0e7a77190", requires_grad=true}:() -> tensor<768x768xf32>
	%29="ufront.parameter"(){dtype="Float", initializer="0x55b0e7cb71a0", requires_grad=true}:() -> tensor<768x768xf32>
	%30="ufront.multihead_attention"(%25, %25, %25, %26, %27, %28, %29){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<2x3x768xf32>
	%31="ufront.add"(%30, %25):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%32="ufront.layer_norm"(%31){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%33="ufront.parameter"(){dtype="Float", initializer="0x55b0ed1771e0", requires_grad=true}:() -> tensor<768x3072xf32>
	%34="ufront.linear"(%32, %33){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<768x3072xf32>) -> tensor<2x3x3072xf32>
	%35="ufront.smultiply"(%34){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%36="ufront.struediv"(%34){scalar=1.4142135}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%37="ufront.erf"(%36){approximate=true}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%38="ufront.sadd"(%37){scalar=0.0001}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%39="ufront.multiply"(%35, %38):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%40="ufront.parameter"(){dtype="Float", initializer="0x55b0eda771f0", requires_grad=true}:() -> tensor<3072x768xf32>
	%41="ufront.linear"(%39, %40){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x3072xf32>, tensor<3072x768xf32>) -> tensor<2x3x768xf32>
	%42="ufront.add"(%41, %32):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%43="ufront.layer_norm"(%42){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%44="ufront.parameter"(){dtype="Float", initializer="0x55b10a500fc0", requires_grad=true}:() -> tensor<768x768xf32>
	%45="ufront.parameter"(){dtype="Float", initializer="0x55b0ec1b7170", requires_grad=true}:() -> tensor<768x768xf32>
	%46="ufront.parameter"(){dtype="Float", initializer="0x55b0ec3f7180", requires_grad=true}:() -> tensor<768x768xf32>
	%47="ufront.parameter"(){dtype="Float", initializer="0x55b0ec637190", requires_grad=true}:() -> tensor<768x768xf32>
	%48="ufront.multihead_attention"(%43, %43, %43, %44, %45, %46, %47){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<2x3x768xf32>
	%49="ufront.add"(%48, %43):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%50="ufront.layer_norm"(%49){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%51="ufront.parameter"(){dtype="Float", initializer="0x55b0eec77210", requires_grad=true}:() -> tensor<768x3072xf32>
	%52="ufront.linear"(%50, %51){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<768x3072xf32>) -> tensor<2x3x3072xf32>
	%53="ufront.smultiply"(%52){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%54="ufront.struediv"(%52){scalar=1.4142135}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%55="ufront.erf"(%54){approximate=true}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%56="ufront.sadd"(%55){scalar=0.0001}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%57="ufront.multiply"(%53, %56):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%58="ufront.parameter"(){dtype="Float", initializer="0x55b0f09b7280", requires_grad=true}:() -> tensor<3072x768xf32>
	%59="ufront.linear"(%57, %58){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x3072xf32>, tensor<3072x768xf32>) -> tensor<2x3x768xf32>
	%60="ufront.add"(%59, %50):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%61="ufront.layer_norm"(%60){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%62="ufront.parameter"(){dtype="Float", initializer="0x55b0e7ef71b0", requires_grad=true}:() -> tensor<768x768xf32>
	%63="ufront.parameter"(){dtype="Float", initializer="0x55b0f1bb72a0", requires_grad=true}:() -> tensor<768x768xf32>
	%64="ufront.parameter"(){dtype="Float", initializer="0x55b0f1df72b0", requires_grad=true}:() -> tensor<768x768xf32>
	%65="ufront.parameter"(){dtype="Float", initializer="0x55b0f20372c0", requires_grad=true}:() -> tensor<768x768xf32>
	%66="ufront.multihead_attention"(%61, %61, %61, %62, %63, %64, %65){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<2x3x768xf32>
	%67="ufront.add"(%66, %61):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%68="ufront.layer_norm"(%67){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%69="ufront.parameter"(){dtype="Float", initializer="0x55b0f22772d0", requires_grad=true}:() -> tensor<768x3072xf32>
	%70="ufront.linear"(%68, %69){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<768x3072xf32>) -> tensor<2x3x3072xf32>
	%71="ufront.smultiply"(%70){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%72="ufront.struediv"(%70){scalar=1.4142135}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%73="ufront.erf"(%72){approximate=true}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%74="ufront.sadd"(%73){scalar=0.0001}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%75="ufront.multiply"(%71, %74):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%76="ufront.parameter"(){dtype="Float", initializer="0x55b10c5300d0", requires_grad=true}:() -> tensor<3072x768xf32>
	%77="ufront.linear"(%75, %76){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x3072xf32>, tensor<3072x768xf32>) -> tensor<2x3x768xf32>
	%78="ufront.add"(%77, %68):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%79="ufront.layer_norm"(%78){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%80="ufront.parameter"(){dtype="Float", initializer="0x55b10d7300f0", requires_grad=true}:() -> tensor<768x768xf32>
	%81="ufront.parameter"(){dtype="Float", initializer="0x55b10d970100", requires_grad=true}:() -> tensor<768x768xf32>
	%82="ufront.parameter"(){dtype="Float", initializer="0x55b10dbb0110", requires_grad=true}:() -> tensor<768x768xf32>
	%83="ufront.parameter"(){dtype="Float", initializer="0x55b10e930110", requires_grad=true}:() -> tensor<768x768xf32>
	%84="ufront.multihead_attention"(%79, %79, %79, %80, %81, %82, %83){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<2x3x768xf32>
	%85="ufront.add"(%84, %79):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%86="ufront.layer_norm"(%85){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%87="ufront.parameter"(){dtype="Float", initializer="0x55b10eb70120", requires_grad=true}:() -> tensor<768x3072xf32>
	%88="ufront.linear"(%86, %87){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<768x3072xf32>) -> tensor<2x3x3072xf32>
	%89="ufront.smultiply"(%88){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%90="ufront.struediv"(%88){scalar=1.4142135}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%91="ufront.erf"(%90){approximate=true}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%92="ufront.sadd"(%91){scalar=0.0001}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%93="ufront.multiply"(%89, %92):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%94="ufront.parameter"(){dtype="Float", initializer="0x55b10fd701a0", requires_grad=true}:() -> tensor<3072x768xf32>
	%95="ufront.linear"(%93, %94){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x3072xf32>, tensor<3072x768xf32>) -> tensor<2x3x768xf32>
	%96="ufront.add"(%95, %86):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%97="ufront.layer_norm"(%96){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%98="ufront.parameter"(){dtype="Float", initializer="0x55b110f701c0", requires_grad=true}:() -> tensor<768x768xf32>
	%99="ufront.parameter"(){dtype="Float", initializer="0x55b1111b01d0", requires_grad=true}:() -> tensor<768x768xf32>
	%100="ufront.parameter"(){dtype="Float", initializer="0x55b1113f01e0", requires_grad=true}:() -> tensor<768x768xf32>
	%101="ufront.parameter"(){dtype="Float", initializer="0x55b1121701e0", requires_grad=true}:() -> tensor<768x768xf32>
	%102="ufront.multihead_attention"(%97, %97, %97, %98, %99, %100, %101){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<2x3x768xf32>
	%103="ufront.add"(%102, %97):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%104="ufront.layer_norm"(%103){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%105="ufront.parameter"(){dtype="Float", initializer="0x55b1123b01f0", requires_grad=true}:() -> tensor<768x3072xf32>
	%106="ufront.linear"(%104, %105){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<768x3072xf32>) -> tensor<2x3x3072xf32>
	%107="ufront.smultiply"(%106){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%108="ufront.struediv"(%106){scalar=1.4142135}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%109="ufront.erf"(%108){approximate=true}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%110="ufront.sadd"(%109){scalar=0.0001}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%111="ufront.multiply"(%107, %110):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%112="ufront.parameter"(){dtype="Float", initializer="0x55b1135b0270", requires_grad=true}:() -> tensor<3072x768xf32>
	%113="ufront.linear"(%111, %112){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x3072xf32>, tensor<3072x768xf32>) -> tensor<2x3x768xf32>
	%114="ufront.add"(%113, %104):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%115="ufront.layer_norm"(%114){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%116="ufront.parameter"(){dtype="Float", initializer="0x55b1147b0290", requires_grad=true}:() -> tensor<768x768xf32>
	%117="ufront.parameter"(){dtype="Float", initializer="0x55b1149f02a0", requires_grad=true}:() -> tensor<768x768xf32>
	%118="ufront.parameter"(){dtype="Float", initializer="0x55b114c302b0", requires_grad=true}:() -> tensor<768x768xf32>
	%119="ufront.parameter"(){dtype="Float", initializer="0x55b1159b02b0", requires_grad=true}:() -> tensor<768x768xf32>
	%120="ufront.multihead_attention"(%115, %115, %115, %116, %117, %118, %119){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<2x3x768xf32>
	%121="ufront.add"(%120, %115):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%122="ufront.layer_norm"(%121){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%123="ufront.parameter"(){dtype="Float", initializer="0x55b115bf02c0", requires_grad=true}:() -> tensor<768x3072xf32>
	%124="ufront.linear"(%122, %123){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<768x3072xf32>) -> tensor<2x3x3072xf32>
	%125="ufront.smultiply"(%124){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%126="ufront.struediv"(%124){scalar=1.4142135}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%127="ufront.erf"(%126){approximate=true}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%128="ufront.sadd"(%127){scalar=0.0001}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%129="ufront.multiply"(%125, %128):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%130="ufront.parameter"(){dtype="Float", initializer="0x55b116df0340", requires_grad=true}:() -> tensor<3072x768xf32>
	%131="ufront.linear"(%129, %130){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x3072xf32>, tensor<3072x768xf32>) -> tensor<2x3x768xf32>
	%132="ufront.add"(%131, %122):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%133="ufront.layer_norm"(%132){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%134="ufront.parameter"(){dtype="Float", initializer="0x55b117ff0360", requires_grad=true}:() -> tensor<768x768xf32>
	%135="ufront.parameter"(){dtype="Float", initializer="0x55b118230370", requires_grad=true}:() -> tensor<768x768xf32>
	%136="ufront.parameter"(){dtype="Float", initializer="0x55b118470380", requires_grad=true}:() -> tensor<768x768xf32>
	%137="ufront.parameter"(){dtype="Float", initializer="0x55b1191f0380", requires_grad=true}:() -> tensor<768x768xf32>
	%138="ufront.multihead_attention"(%133, %133, %133, %134, %135, %136, %137){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<2x3x768xf32>
	%139="ufront.add"(%138, %133):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%140="ufront.layer_norm"(%139){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%141="ufront.parameter"(){dtype="Float", initializer="0x55b119430390", requires_grad=true}:() -> tensor<768x3072xf32>
	%142="ufront.linear"(%140, %141){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<768x3072xf32>) -> tensor<2x3x3072xf32>
	%143="ufront.smultiply"(%142){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%144="ufront.struediv"(%142){scalar=1.4142135}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%145="ufront.erf"(%144){approximate=true}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%146="ufront.sadd"(%145){scalar=0.0001}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%147="ufront.multiply"(%143, %146):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%148="ufront.parameter"(){dtype="Float", initializer="0x55b11a630410", requires_grad=true}:() -> tensor<3072x768xf32>
	%149="ufront.linear"(%147, %148){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x3072xf32>, tensor<3072x768xf32>) -> tensor<2x3x768xf32>
	%150="ufront.add"(%149, %140):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%151="ufront.layer_norm"(%150){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%152="ufront.parameter"(){dtype="Float", initializer="0x55b11b830430", requires_grad=true}:() -> tensor<768x768xf32>
	%153="ufront.parameter"(){dtype="Float", initializer="0x55b11ba70440", requires_grad=true}:() -> tensor<768x768xf32>
	%154="ufront.parameter"(){dtype="Float", initializer="0x55b11bcb0450", requires_grad=true}:() -> tensor<768x768xf32>
	%155="ufront.parameter"(){dtype="Float", initializer="0x55b11ca30450", requires_grad=true}:() -> tensor<768x768xf32>
	%156="ufront.multihead_attention"(%151, %151, %151, %152, %153, %154, %155){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<2x3x768xf32>
	%157="ufront.add"(%156, %151):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%158="ufront.layer_norm"(%157){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%159="ufront.parameter"(){dtype="Float", initializer="0x55b11cc70460", requires_grad=true}:() -> tensor<768x3072xf32>
	%160="ufront.linear"(%158, %159){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<768x3072xf32>) -> tensor<2x3x3072xf32>
	%161="ufront.smultiply"(%160){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%162="ufront.struediv"(%160){scalar=1.4142135}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%163="ufront.erf"(%162){approximate=true}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%164="ufront.sadd"(%163){scalar=0.0001}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%165="ufront.multiply"(%161, %164):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%166="ufront.parameter"(){dtype="Float", initializer="0x55b11de704e0", requires_grad=true}:() -> tensor<3072x768xf32>
	%167="ufront.linear"(%165, %166){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x3072xf32>, tensor<3072x768xf32>) -> tensor<2x3x768xf32>
	%168="ufront.add"(%167, %158):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%169="ufront.layer_norm"(%168){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%170="ufront.parameter"(){dtype="Float", initializer="0x55b11f070500", requires_grad=true}:() -> tensor<768x768xf32>
	%171="ufront.parameter"(){dtype="Float", initializer="0x55b11f2b0510", requires_grad=true}:() -> tensor<768x768xf32>
	%172="ufront.parameter"(){dtype="Float", initializer="0x55b11f4f0520", requires_grad=true}:() -> tensor<768x768xf32>
	%173="ufront.parameter"(){dtype="Float", initializer="0x55b120270520", requires_grad=true}:() -> tensor<768x768xf32>
	%174="ufront.multihead_attention"(%169, %169, %169, %170, %171, %172, %173){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<2x3x768xf32>
	%175="ufront.add"(%174, %169):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%176="ufront.layer_norm"(%175){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%177="ufront.parameter"(){dtype="Float", initializer="0x55b1204b0530", requires_grad=true}:() -> tensor<768x3072xf32>
	%178="ufront.linear"(%176, %177){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<768x3072xf32>) -> tensor<2x3x3072xf32>
	%179="ufront.smultiply"(%178){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%180="ufront.struediv"(%178){scalar=1.4142135}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%181="ufront.erf"(%180){approximate=true}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%182="ufront.sadd"(%181){scalar=0.0001}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%183="ufront.multiply"(%179, %182):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%184="ufront.parameter"(){dtype="Float", initializer="0x55b1216b05b0", requires_grad=true}:() -> tensor<3072x768xf32>
	%185="ufront.linear"(%183, %184){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x3072xf32>, tensor<3072x768xf32>) -> tensor<2x3x768xf32>
	%186="ufront.add"(%185, %176):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%187="ufront.layer_norm"(%186){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%188="ufront.parameter"(){dtype="Float", initializer="0x55b1228b05d0", requires_grad=true}:() -> tensor<768x768xf32>
	%189="ufront.parameter"(){dtype="Float", initializer="0x55b122af05e0", requires_grad=true}:() -> tensor<768x768xf32>
	%190="ufront.parameter"(){dtype="Float", initializer="0x55b122d305f0", requires_grad=true}:() -> tensor<768x768xf32>
	%191="ufront.parameter"(){dtype="Float", initializer="0x55b123ab05f0", requires_grad=true}:() -> tensor<768x768xf32>
	%192="ufront.multihead_attention"(%187, %187, %187, %188, %189, %190, %191){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<2x3x768xf32>
	%193="ufront.add"(%192, %187):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%194="ufront.layer_norm"(%193){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%195="ufront.parameter"(){dtype="Float", initializer="0x55b123cf0600", requires_grad=true}:() -> tensor<768x3072xf32>
	%196="ufront.linear"(%194, %195){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<768x3072xf32>) -> tensor<2x3x3072xf32>
	%197="ufront.smultiply"(%196){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%198="ufront.struediv"(%196){scalar=1.4142135}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%199="ufront.erf"(%198){approximate=true}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%200="ufront.sadd"(%199){scalar=0.0001}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%201="ufront.multiply"(%197, %200):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%202="ufront.parameter"(){dtype="Float", initializer="0x55b124ef0680", requires_grad=true}:() -> tensor<3072x768xf32>
	%203="ufront.linear"(%201, %202){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x3072xf32>, tensor<3072x768xf32>) -> tensor<2x3x768xf32>
	%204="ufront.add"(%203, %194):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%205="ufront.layer_norm"(%204){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%206="ufront.parameter"(){dtype="Float", initializer="0x55b1260f06a0", requires_grad=true}:() -> tensor<768x768xf32>
	%207="ufront.parameter"(){dtype="Float", initializer="0x55b1263306b0", requires_grad=true}:() -> tensor<768x768xf32>
	%208="ufront.parameter"(){dtype="Float", initializer="0x55b1265706c0", requires_grad=true}:() -> tensor<768x768xf32>
	%209="ufront.parameter"(){dtype="Float", initializer="0x55b1272f06c0", requires_grad=true}:() -> tensor<768x768xf32>
	%210="ufront.multihead_attention"(%205, %205, %205, %206, %207, %208, %209){batch_first=true, dropout=0.0, embed_dim=768, num_heads=12, operand_segment_sizes=array<i32:1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<2x3x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>, tensor<768x768xf32>) -> tensor<2x3x768xf32>
	%211="ufront.add"(%210, %205):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%212="ufront.layer_norm"(%211){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%213="ufront.parameter"(){dtype="Float", initializer="0x55b1275306d0", requires_grad=true}:() -> tensor<768x3072xf32>
	%214="ufront.linear"(%212, %213){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x768xf32>, tensor<768x3072xf32>) -> tensor<2x3x3072xf32>
	%215="ufront.smultiply"(%214){scalar=0.5}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%216="ufront.struediv"(%214){scalar=1.4142135}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%217="ufront.erf"(%216){approximate=true}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%218="ufront.sadd"(%217){scalar=0.0001}:(tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%219="ufront.multiply"(%215, %218):(tensor<2x3x3072xf32>, tensor<2x3x3072xf32>) -> tensor<2x3x3072xf32>
	%220="ufront.parameter"(){dtype="Float", initializer="0x55b128730750", requires_grad=true}:() -> tensor<3072x768xf32>
	%221="ufront.linear"(%219, %220){operand_segment_sizes=array<i32:1, 1, 0>, weight_transposed=false}:(tensor<2x3x3072xf32>, tensor<3072x768xf32>) -> tensor<2x3x768xf32>
	%222="ufront.add"(%221, %212):(tensor<2x3x768xf32>, tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%223="ufront.layer_norm"(%222){elementwise_affine=true, eps=0.000001, normalized_shape=[768], operand_segment_sizes=array<i32:1, 0, 0>}:(tensor<2x3x768xf32>) -> tensor<2x3x768xf32>
	%224="ufront.slice"(%223){axis=[1], end=[1], output_shape=[2, 768], start=[0]}:(tensor<2x3x768xf32>) -> tensor<2x768xf32>
	%225="ufront.parameter"(){dtype="Float", initializer="0x55b0efe77230", requires_grad=true}:() -> tensor<768x768xf32>
	%226="ufront.parameter"(){dtype="Float", initializer="0x55b0c8bd6b50", requires_grad=true}:() -> tensor<768xf32>
	%227="ufront.linear"(%224, %225, %226){operand_segment_sizes=array<i32:1, 1, 1>, weight_transposed=false}:(tensor<2x768xf32>, tensor<768x768xf32>, tensor<768xf32>) -> tensor<2x768xf32>
	%228="ufront.tanh"(%227):(tensor<2x768xf32>) -> tensor<2x768xf32>
	return %228: tensor<2x768xf32>
}
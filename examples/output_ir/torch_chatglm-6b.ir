func.func @forward(%input1: tensor<1x22xf16>, %input2: tensor<1x22xf16>) -> tensor<1x22x130528xf32>  { 
	%1="ufront.parameter"(){dtype="Half", initializer="0x7f344843f010", requires_grad=true}:() -> tensor<130528x4096xf16>
	%2="ufront.embedding"(%input1, %1){embedding_dim=4096, num_embeddings=130528}:(tensor<1x22xf16>, tensor<130528x4096xf16>) -> tensor<1x22x4096xf32>
	%3="ufront.cumsum"(%input2){axis=1}:(tensor<1x22xf16>) -> tensor<1x22xf16>
	%4="ufront.ssub"(%3){scalar=1}:(tensor<1x22xf16>) -> tensor<1x22xf16>
	%5="ufront.smultiply"(%input2){scalar=-1.0}:(tensor<1x22xf16>) -> tensor<1x22xf16>
	%6="ufront.sadd"(%5){scalar=1}:(tensor<1x22xf16>) -> tensor<1x22xf16>
	%7="ufront.cumsum"(%6){axis=1}:(tensor<1x22xf16>) -> tensor<1x22xf16>
	%8="ufront.parameter"(){dtype="Half", initializer="0x55f0702b97f0", requires_grad=false}:() -> tensor<2048x32xf16>
	%9="ufront.embedding"(%4, %8){embedding_dim=32, num_embeddings=2048}:(tensor<1x22xf16>, tensor<2048x32xf16>) -> tensor<1x22x32xf32>
	%10="ufront.parameter"(){dtype="Half", initializer="0x55f07044e7f0", requires_grad=false}:() -> tensor<2048x32xf16>
	%11="ufront.embedding"(%4, %10){embedding_dim=32, num_embeddings=2048}:(tensor<1x22xf16>, tensor<2048x32xf16>) -> tensor<1x22x32xf32>
	%12="ufront.parameter"(){dtype="Half", initializer="0x55f0703870c0", requires_grad=false}:() -> tensor<2048x32xf16>
	%13="ufront.embedding"(%7, %12){embedding_dim=32, num_embeddings=2048}:(tensor<1x22xf16>, tensor<2048x32xf16>) -> tensor<1x22x32xf32>
	%14="ufront.parameter"(){dtype="Half", initializer="0x55f0702dd460", requires_grad=false}:() -> tensor<2048x32xf16>
	%15="ufront.embedding"(%7, %14){embedding_dim=32, num_embeddings=2048}:(tensor<1x22xf16>, tensor<2048x32xf16>) -> tensor<1x22x32xf32>
	%16="ufront.parameter"(){dtype="Int64", initializer="0x55f0702dc5b0", requires_grad=false}:() -> tensor<22xi64>
	%17="ufront.slice"(%16){output_shape=[22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<22xi64>) -> tensor<22x1xi64>
	%18="ufront.slice"(%16){output_shape=[1, 22], slices=["None", ["None", "None", "None"]]}:(tensor<22xi64>) -> tensor<1x22xi64>
	%19="ufront.less"(%17, %18):(tensor<22x1xi64>, tensor<1x22xi64>) -> tensor<22x1xbool>
	%20="ufront.slice"(%19){output_shape=[1, 22, 1], slices=(None, Ellipsis)}:(tensor<22x1xbool>) -> tensor<1x22x1xbool>
	%21="ufront.slice"(%input2){output_shape=[1, 1, 22], slices=[["None", "None", "None"], "None"]}:(tensor<1x22xf16>) -> tensor<1x1x22xf16>
	%22="ufront.bool"(%21):(tensor<1x1x22xf16>) -> tensor<1x1x22xf16>
	%23="ufront.invert"(%22):(tensor<1x1x22xf16>) -> tensor<1x1x22xf16>
	%24="ufront.And"(%20, %23):(tensor<1x22x1xbool>, tensor<1x1x22xf16>) -> tensor<1x22x1xbool>
	%25="ufront.float"(%24):(tensor<1x22x1xbool>) -> tensor<1x22x1xbool>
	%26="ufront.smultiply"(%25){scalar=-10000000000.0}:(tensor<1x22x1xbool>) -> tensor<1x22x1xbool>
	%27="ufront.dropout"(%2){rate=0.0, seed=0, training=true}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%28="ufront.parameter"(){dtype="Half", initializer="0x55f070502c90", requires_grad=true}:() -> tensor<4096xf16>
	%29="ufront.parameter"(){dtype="Half", initializer="0x55f070516f10", requires_grad=true}:() -> tensor<4096xf16>
	%30="ufront.layer_norm"(%27, %28, %29){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%31="ufront.parameter"(){dtype="Half", initializer="0x7f344243e010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%32="ufront.parameter"(){dtype="Half", initializer="0x55f07050ae00", requires_grad=true}:() -> tensor<12288xf16>
	%33="ufront.linear"(%30, %31, %32){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%34="ufront.reshape"(%33){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%35, %36, %37="ufront.split"(%34){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%38, %39, %40, %41="ufront.split"(%35){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%42, %43, %44, %45="ufront.split"(%36){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%46="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%47="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%48="ufront.multiply"(%38, %46):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%49="ufront.multiply"(%39, %47):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%50="ufront.subtract"(%48, %49):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%51="ufront.multiply"(%38, %47):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%52="ufront.multiply"(%39, %46):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%53="ufront.add"(%51, %52):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%54="ufront.concat"(%50, %53){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%55="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%56="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%57="ufront.multiply"(%40, %55):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%58="ufront.multiply"(%41, %56):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%59="ufront.subtract"(%57, %58):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%60="ufront.multiply"(%40, %56):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%61="ufront.multiply"(%41, %55):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%62="ufront.add"(%60, %61):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%63="ufront.concat"(%59, %62){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%64="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%65="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%66="ufront.multiply"(%42, %64):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%67="ufront.multiply"(%43, %65):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%68="ufront.subtract"(%66, %67):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%69="ufront.multiply"(%42, %65):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%70="ufront.multiply"(%43, %64):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%71="ufront.add"(%69, %70):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%72="ufront.concat"(%68, %71){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%73="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%74="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%75="ufront.multiply"(%44, %73):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%76="ufront.multiply"(%45, %74):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%77="ufront.subtract"(%75, %76):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%78="ufront.multiply"(%44, %74):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%79="ufront.multiply"(%45, %73):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%80="ufront.add"(%78, %79):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%81="ufront.concat"(%77, %80){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%82="ufront.concat"(%54, %63){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%83="ufront.concat"(%72, %81){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%84="ufront.detach"(%83):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%85="ufront.detach"(%37):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%86="ufront.transpose"(%82){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%87="ufront.transpose"(%83){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%88="ufront.transpose"(%37){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%89="ufront.struediv"(%86){scalar=11.313708498984761}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%90="ufront.batch_matmul"(%89, %87):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%91="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%92="ufront.add"(%90, %91):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%93="ufront.float"(%92):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%94="ufront.smultiply"(%93){scalar=1.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%95="ufront.softmax"(%94):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%96="ufront.dropout"(%95){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%97="ufront.batch_matmul"(%96, %88):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%98="ufront.transpose"(%97){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%99="ufront.reshape"(%98){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%100="ufront.parameter"(){dtype="Half", initializer="0x7f34fd7ea010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%101="ufront.parameter"(){dtype="Half", initializer="0x55f070382650", requires_grad=true}:() -> tensor<4096xf16>
	%102="ufront.linear"(%99, %100, %101){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%103="ufront.smultiply"(%30){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%104="ufront.add"(%103, %102):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%105="ufront.parameter"(){dtype="Half", initializer="0x55f07049d130", requires_grad=true}:() -> tensor<4096xf16>
	%106="ufront.parameter"(){dtype="Half", initializer="0x55f0704f8c00", requires_grad=true}:() -> tensor<4096xf16>
	%107="ufront.layer_norm"(%104, %105, %106){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%108="ufront.parameter"(){dtype="Half", initializer="0x7f342e43b010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%109="ufront.parameter"(){dtype="Half", initializer="0x55f07015d030", requires_grad=true}:() -> tensor<16384xf16>
	%110="ufront.linear"(%107, %108, %109){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%111="ufront.gelu"(%110):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%112="ufront.dropout"(%111){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%113="ufront.parameter"(){dtype="Half", initializer="0x7f342643a010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%114="ufront.parameter"(){dtype="Half", initializer="0x55f0703eb110", requires_grad=true}:() -> tensor<4096xf16>
	%115="ufront.linear"(%112, %113, %114){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%116="ufront.smultiply"(%107){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%117="ufront.add"(%116, %115):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%118="ufront.parameter"(){dtype="Half", initializer="0x55f0704fac10", requires_grad=true}:() -> tensor<4096xf16>
	%119="ufront.parameter"(){dtype="Half", initializer="0x55f0701546d0", requires_grad=true}:() -> tensor<4096xf16>
	%120="ufront.layer_norm"(%117, %118, %119){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%121="ufront.parameter"(){dtype="Half", initializer="0x7f343c43d010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%122="ufront.parameter"(){dtype="Half", initializer="0x55f071dda6a0", requires_grad=true}:() -> tensor<12288xf16>
	%123="ufront.linear"(%120, %121, %122){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%124="ufront.reshape"(%123){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%125, %126, %127="ufront.split"(%124){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%128, %129, %130, %131="ufront.split"(%125){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%132, %133, %134, %135="ufront.split"(%126){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%136="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%137="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%138="ufront.multiply"(%128, %136):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%139="ufront.multiply"(%129, %137):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%140="ufront.subtract"(%138, %139):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%141="ufront.multiply"(%128, %137):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%142="ufront.multiply"(%129, %136):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%143="ufront.add"(%141, %142):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%144="ufront.concat"(%140, %143){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%145="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%146="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%147="ufront.multiply"(%130, %145):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%148="ufront.multiply"(%131, %146):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%149="ufront.subtract"(%147, %148):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%150="ufront.multiply"(%130, %146):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%151="ufront.multiply"(%131, %145):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%152="ufront.add"(%150, %151):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%153="ufront.concat"(%149, %152){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%154="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%155="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%156="ufront.multiply"(%132, %154):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%157="ufront.multiply"(%133, %155):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%158="ufront.subtract"(%156, %157):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%159="ufront.multiply"(%132, %155):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%160="ufront.multiply"(%133, %154):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%161="ufront.add"(%159, %160):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%162="ufront.concat"(%158, %161){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%163="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%164="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%165="ufront.multiply"(%134, %163):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%166="ufront.multiply"(%135, %164):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%167="ufront.subtract"(%165, %166):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%168="ufront.multiply"(%134, %164):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%169="ufront.multiply"(%135, %163):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%170="ufront.add"(%168, %169):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%171="ufront.concat"(%167, %170){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%172="ufront.concat"(%144, %153){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%173="ufront.concat"(%162, %171){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%174="ufront.detach"(%173):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%175="ufront.detach"(%127):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%176="ufront.transpose"(%172){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%177="ufront.transpose"(%173){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%178="ufront.transpose"(%127){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%179="ufront.struediv"(%176){scalar=22.627416997969522}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%180="ufront.batch_matmul"(%179, %177):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%181="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%182="ufront.add"(%180, %181):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%183="ufront.float"(%182):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%184="ufront.smultiply"(%183){scalar=2.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%185="ufront.softmax"(%184):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%186="ufront.dropout"(%185){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%187="ufront.batch_matmul"(%186, %178):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%188="ufront.transpose"(%187){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%189="ufront.reshape"(%188){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%190="ufront.parameter"(){dtype="Half", initializer="0x7f34d5fff010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%191="ufront.parameter"(){dtype="Half", initializer="0x55f07046f010", requires_grad=true}:() -> tensor<4096xf16>
	%192="ufront.linear"(%189, %190, %191){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%193="ufront.smultiply"(%120){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%194="ufront.add"(%193, %192):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%195="ufront.parameter"(){dtype="Half", initializer="0x55f070475850", requires_grad=true}:() -> tensor<4096xf16>
	%196="ufront.parameter"(){dtype="Half", initializer="0x55f070477860", requires_grad=true}:() -> tensor<4096xf16>
	%197="ufront.layer_norm"(%194, %195, %196){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%198="ufront.parameter"(){dtype="Half", initializer="0x7f3416438010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%199="ufront.parameter"(){dtype="Half", initializer="0x55f0701426f0", requires_grad=true}:() -> tensor<16384xf16>
	%200="ufront.linear"(%197, %198, %199){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%201="ufront.gelu"(%200):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%202="ufront.dropout"(%201){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%203="ufront.parameter"(){dtype="Half", initializer="0x7f33bacbb010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%204="ufront.parameter"(){dtype="Half", initializer="0x55f07013a6b0", requires_grad=true}:() -> tensor<4096xf16>
	%205="ufront.linear"(%202, %203, %204){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%206="ufront.smultiply"(%197){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%207="ufront.add"(%206, %205):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%208="ufront.parameter"(){dtype="Half", initializer="0x55f0702258a0", requires_grad=true}:() -> tensor<4096xf16>
	%209="ufront.parameter"(){dtype="Half", initializer="0x55f0702278b0", requires_grad=true}:() -> tensor<4096xf16>
	%210="ufront.layer_norm"(%207, %208, %209){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%211="ufront.parameter"(){dtype="Half", initializer="0x7f33accb9010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%212="ufront.parameter"(){dtype="Half", initializer="0x55f0701ea180", requires_grad=true}:() -> tensor<12288xf16>
	%213="ufront.linear"(%210, %211, %212){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%214="ufront.reshape"(%213){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%215, %216, %217="ufront.split"(%214){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%218, %219, %220, %221="ufront.split"(%215){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%222, %223, %224, %225="ufront.split"(%216){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%226="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%227="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%228="ufront.multiply"(%218, %226):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%229="ufront.multiply"(%219, %227):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%230="ufront.subtract"(%228, %229):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%231="ufront.multiply"(%218, %227):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%232="ufront.multiply"(%219, %226):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%233="ufront.add"(%231, %232):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%234="ufront.concat"(%230, %233){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%235="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%236="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%237="ufront.multiply"(%220, %235):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%238="ufront.multiply"(%221, %236):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%239="ufront.subtract"(%237, %238):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%240="ufront.multiply"(%220, %236):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%241="ufront.multiply"(%221, %235):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%242="ufront.add"(%240, %241):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%243="ufront.concat"(%239, %242){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%244="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%245="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%246="ufront.multiply"(%222, %244):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%247="ufront.multiply"(%223, %245):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%248="ufront.subtract"(%246, %247):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%249="ufront.multiply"(%222, %245):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%250="ufront.multiply"(%223, %244):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%251="ufront.add"(%249, %250):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%252="ufront.concat"(%248, %251){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%253="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%254="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%255="ufront.multiply"(%224, %253):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%256="ufront.multiply"(%225, %254):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%257="ufront.subtract"(%255, %256):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%258="ufront.multiply"(%224, %254):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%259="ufront.multiply"(%225, %253):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%260="ufront.add"(%258, %259):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%261="ufront.concat"(%257, %260){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%262="ufront.concat"(%234, %243){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%263="ufront.concat"(%252, %261){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%264="ufront.detach"(%263):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%265="ufront.detach"(%217):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%266="ufront.transpose"(%262){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%267="ufront.transpose"(%263){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%268="ufront.transpose"(%217){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%269="ufront.struediv"(%266){scalar=33.941125496954285}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%270="ufront.batch_matmul"(%269, %267):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%271="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%272="ufront.add"(%270, %271):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%273="ufront.float"(%272):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%274="ufront.smultiply"(%273){scalar=3.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%275="ufront.softmax"(%274):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%276="ufront.dropout"(%275){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%277="ufront.batch_matmul"(%276, %268):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%278="ufront.transpose"(%277){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%279="ufront.reshape"(%278){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%280="ufront.parameter"(){dtype="Half", initializer="0x7f34c5fff010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%281="ufront.parameter"(){dtype="Half", initializer="0x55f07034b280", requires_grad=true}:() -> tensor<4096xf16>
	%282="ufront.linear"(%279, %280, %281){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%283="ufront.smultiply"(%210){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%284="ufront.add"(%283, %282):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%285="ufront.parameter"(){dtype="Half", initializer="0x55f0703512b0", requires_grad=true}:() -> tensor<4096xf16>
	%286="ufront.parameter"(){dtype="Half", initializer="0x55f0703532c0", requires_grad=true}:() -> tensor<4096xf16>
	%287="ufront.layer_norm"(%284, %285, %286){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%288="ufront.parameter"(){dtype="Half", initializer="0x7f338ecb5010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%289="ufront.parameter"(){dtype="Half", initializer="0x55f070209e80", requires_grad=true}:() -> tensor<16384xf16>
	%290="ufront.linear"(%287, %288, %289){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%291="ufront.gelu"(%290):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%292="ufront.dropout"(%291){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%293="ufront.parameter"(){dtype="Half", initializer="0x7f3386cb4010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%294="ufront.parameter"(){dtype="Half", initializer="0x55f070360210", requires_grad=true}:() -> tensor<4096xf16>
	%295="ufront.linear"(%292, %293, %294){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%296="ufront.smultiply"(%287){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%297="ufront.add"(%296, %295):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%298="ufront.parameter"(){dtype="Half", initializer="0x55f070211e90", requires_grad=true}:() -> tensor<4096xf16>
	%299="ufront.parameter"(){dtype="Half", initializer="0x55f070213ea0", requires_grad=true}:() -> tensor<4096xf16>
	%300="ufront.layer_norm"(%297, %298, %299){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%301="ufront.parameter"(){dtype="Half", initializer="0x7f339ccb7010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%302="ufront.parameter"(){dtype="Half", initializer="0x55f0704b21d0", requires_grad=true}:() -> tensor<12288xf16>
	%303="ufront.linear"(%300, %301, %302){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%304="ufront.reshape"(%303){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%305, %306, %307="ufront.split"(%304){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%308, %309, %310, %311="ufront.split"(%305){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%312, %313, %314, %315="ufront.split"(%306){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%316="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%317="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%318="ufront.multiply"(%308, %316):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%319="ufront.multiply"(%309, %317):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%320="ufront.subtract"(%318, %319):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%321="ufront.multiply"(%308, %317):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%322="ufront.multiply"(%309, %316):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%323="ufront.add"(%321, %322):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%324="ufront.concat"(%320, %323){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%325="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%326="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%327="ufront.multiply"(%310, %325):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%328="ufront.multiply"(%311, %326):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%329="ufront.subtract"(%327, %328):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%330="ufront.multiply"(%310, %326):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%331="ufront.multiply"(%311, %325):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%332="ufront.add"(%330, %331):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%333="ufront.concat"(%329, %332){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%334="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%335="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%336="ufront.multiply"(%312, %334):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%337="ufront.multiply"(%313, %335):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%338="ufront.subtract"(%336, %337):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%339="ufront.multiply"(%312, %335):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%340="ufront.multiply"(%313, %334):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%341="ufront.add"(%339, %340):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%342="ufront.concat"(%338, %341){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%343="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%344="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%345="ufront.multiply"(%314, %343):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%346="ufront.multiply"(%315, %344):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%347="ufront.subtract"(%345, %346):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%348="ufront.multiply"(%314, %344):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%349="ufront.multiply"(%315, %343):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%350="ufront.add"(%348, %349):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%351="ufront.concat"(%347, %350){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%352="ufront.concat"(%324, %333){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%353="ufront.concat"(%342, %351){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%354="ufront.detach"(%353):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%355="ufront.detach"(%307):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%356="ufront.transpose"(%352){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%357="ufront.transpose"(%353){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%358="ufront.transpose"(%307){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%359="ufront.struediv"(%356){scalar=45.254833995939045}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%360="ufront.batch_matmul"(%359, %357):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%361="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%362="ufront.add"(%360, %361):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%363="ufront.float"(%362):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%364="ufront.smultiply"(%363){scalar=4.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%365="ufront.softmax"(%364):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%366="ufront.dropout"(%365){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%367="ufront.batch_matmul"(%366, %358):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%368="ufront.transpose"(%367){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%369="ufront.reshape"(%368){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%370="ufront.parameter"(){dtype="Half", initializer="0x7f349dfff010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%371="ufront.parameter"(){dtype="Half", initializer="0x55f070422ef0", requires_grad=true}:() -> tensor<4096xf16>
	%372="ufront.linear"(%369, %370, %371){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%373="ufront.smultiply"(%300){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%374="ufront.add"(%373, %372):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%375="ufront.parameter"(){dtype="Half", initializer="0x55f070425f20", requires_grad=true}:() -> tensor<4096xf16>
	%376="ufront.parameter"(){dtype="Half", initializer="0x55f0703f1ef0", requires_grad=true}:() -> tensor<4096xf16>
	%377="ufront.layer_norm"(%374, %375, %376){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%378="ufront.parameter"(){dtype="Half", initializer="0x7f3376cb2010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%379="ufront.parameter"(){dtype="Half", initializer="0x55f0703fcad0", requires_grad=true}:() -> tensor<16384xf16>
	%380="ufront.linear"(%377, %378, %379){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%381="ufront.gelu"(%380):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%382="ufront.dropout"(%381){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%383="ufront.parameter"(){dtype="Half", initializer="0x7f3360caf010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%384="ufront.parameter"(){dtype="Half", initializer="0x55f070404ae0", requires_grad=true}:() -> tensor<4096xf16>
	%385="ufront.linear"(%382, %383, %384){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%386="ufront.smultiply"(%377){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%387="ufront.add"(%386, %385):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%388="ufront.parameter"(){dtype="Half", initializer="0x55f070406af0", requires_grad=true}:() -> tensor<4096xf16>
	%389="ufront.parameter"(){dtype="Half", initializer="0x55f07023d7f0", requires_grad=true}:() -> tensor<4096xf16>
	%390="ufront.layer_norm"(%387, %388, %389){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%391="ufront.parameter"(){dtype="Half", initializer="0x7f3352cad010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%392="ufront.parameter"(){dtype="Half", initializer="0x55f070248050", requires_grad=true}:() -> tensor<12288xf16>
	%393="ufront.linear"(%390, %391, %392){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%394="ufront.reshape"(%393){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%395, %396, %397="ufront.split"(%394){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%398, %399, %400, %401="ufront.split"(%395){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%402, %403, %404, %405="ufront.split"(%396){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%406="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%407="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%408="ufront.multiply"(%398, %406):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%409="ufront.multiply"(%399, %407):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%410="ufront.subtract"(%408, %409):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%411="ufront.multiply"(%398, %407):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%412="ufront.multiply"(%399, %406):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%413="ufront.add"(%411, %412):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%414="ufront.concat"(%410, %413){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%415="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%416="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%417="ufront.multiply"(%400, %415):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%418="ufront.multiply"(%401, %416):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%419="ufront.subtract"(%417, %418):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%420="ufront.multiply"(%400, %416):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%421="ufront.multiply"(%401, %415):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%422="ufront.add"(%420, %421):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%423="ufront.concat"(%419, %422){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%424="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%425="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%426="ufront.multiply"(%402, %424):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%427="ufront.multiply"(%403, %425):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%428="ufront.subtract"(%426, %427):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%429="ufront.multiply"(%402, %425):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%430="ufront.multiply"(%403, %424):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%431="ufront.add"(%429, %430):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%432="ufront.concat"(%428, %431){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%433="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%434="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%435="ufront.multiply"(%404, %433):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%436="ufront.multiply"(%405, %434):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%437="ufront.subtract"(%435, %436):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%438="ufront.multiply"(%404, %434):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%439="ufront.multiply"(%405, %433):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%440="ufront.add"(%438, %439):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%441="ufront.concat"(%437, %440){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%442="ufront.concat"(%414, %423){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%443="ufront.concat"(%432, %441){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%444="ufront.detach"(%443):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%445="ufront.detach"(%397):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%446="ufront.transpose"(%442){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%447="ufront.transpose"(%443){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%448="ufront.transpose"(%397){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%449="ufront.struediv"(%446){scalar=56.568542494923804}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%450="ufront.batch_matmul"(%449, %447):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%451="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%452="ufront.add"(%450, %451):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%453="ufront.float"(%452):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%454="ufront.smultiply"(%453){scalar=5.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%455="ufront.softmax"(%454):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%456="ufront.dropout"(%455){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%457="ufront.batch_matmul"(%456, %448):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%458="ufront.transpose"(%457){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%459="ufront.reshape"(%458){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%460="ufront.parameter"(){dtype="Half", initializer="0x7f348dfff010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%461="ufront.parameter"(){dtype="Half", initializer="0x55f07026ee70", requires_grad=true}:() -> tensor<4096xf16>
	%462="ufront.linear"(%459, %460, %461){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%463="ufront.smultiply"(%390){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%464="ufront.add"(%463, %462):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%465="ufront.parameter"(){dtype="Half", initializer="0x55f070275860", requires_grad=true}:() -> tensor<4096xf16>
	%466="ufront.parameter"(){dtype="Half", initializer="0x55f070277870", requires_grad=true}:() -> tensor<4096xf16>
	%467="ufront.layer_norm"(%464, %465, %466){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%468="ufront.parameter"(){dtype="Half", initializer="0x7f3334ca9010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%469="ufront.parameter"(){dtype="Half", initializer="0x55f0702820d0", requires_grad=true}:() -> tensor<16384xf16>
	%470="ufront.linear"(%467, %468, %469){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%471="ufront.gelu"(%470):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%472="ufront.dropout"(%471){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%473="ufront.parameter"(){dtype="Half", initializer="0x7f332cca8010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%474="ufront.parameter"(){dtype="Half", initializer="0x55f07028a0e0", requires_grad=true}:() -> tensor<4096xf16>
	%475="ufront.linear"(%472, %473, %474){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%476="ufront.smultiply"(%467){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%477="ufront.add"(%476, %475):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%478="ufront.parameter"(){dtype="Half", initializer="0x55f07028c0f0", requires_grad=true}:() -> tensor<4096xf16>
	%479="ufront.parameter"(){dtype="Half", initializer="0x55f07029a100", requires_grad=true}:() -> tensor<4096xf16>
	%480="ufront.layer_norm"(%477, %478, %479){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%481="ufront.parameter"(){dtype="Half", initializer="0x7f331eca6010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%482="ufront.parameter"(){dtype="Half", initializer="0x55f0702a4670", requires_grad=true}:() -> tensor<12288xf16>
	%483="ufront.linear"(%480, %481, %482){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%484="ufront.reshape"(%483){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%485, %486, %487="ufront.split"(%484){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%488, %489, %490, %491="ufront.split"(%485){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%492, %493, %494, %495="ufront.split"(%486){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%496="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%497="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%498="ufront.multiply"(%488, %496):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%499="ufront.multiply"(%489, %497):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%500="ufront.subtract"(%498, %499):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%501="ufront.multiply"(%488, %497):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%502="ufront.multiply"(%489, %496):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%503="ufront.add"(%501, %502):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%504="ufront.concat"(%500, %503){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%505="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%506="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%507="ufront.multiply"(%490, %505):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%508="ufront.multiply"(%491, %506):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%509="ufront.subtract"(%507, %508):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%510="ufront.multiply"(%490, %506):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%511="ufront.multiply"(%491, %505):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%512="ufront.add"(%510, %511):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%513="ufront.concat"(%509, %512){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%514="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%515="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%516="ufront.multiply"(%492, %514):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%517="ufront.multiply"(%493, %515):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%518="ufront.subtract"(%516, %517):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%519="ufront.multiply"(%492, %515):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%520="ufront.multiply"(%493, %514):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%521="ufront.add"(%519, %520):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%522="ufront.concat"(%518, %521){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%523="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%524="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%525="ufront.multiply"(%494, %523):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%526="ufront.multiply"(%495, %524):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%527="ufront.subtract"(%525, %526):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%528="ufront.multiply"(%494, %524):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%529="ufront.multiply"(%495, %523):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%530="ufront.add"(%528, %529):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%531="ufront.concat"(%527, %530){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%532="ufront.concat"(%504, %513){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%533="ufront.concat"(%522, %531){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%534="ufront.detach"(%533):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%535="ufront.detach"(%487):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%536="ufront.transpose"(%532){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%537="ufront.transpose"(%533){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%538="ufront.transpose"(%487){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%539="ufront.struediv"(%536){scalar=67.88225099390857}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%540="ufront.batch_matmul"(%539, %537):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%541="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%542="ufront.add"(%540, %541):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%543="ufront.float"(%542):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%544="ufront.smultiply"(%543){scalar=6.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%545="ufront.softmax"(%544):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%546="ufront.dropout"(%545){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%547="ufront.batch_matmul"(%546, %538):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%548="ufront.transpose"(%547){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%549="ufront.reshape"(%548){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%550="ufront.parameter"(){dtype="Half", initializer="0x7f340a435010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%551="ufront.parameter"(){dtype="Half", initializer="0x55f071cf6940", requires_grad=true}:() -> tensor<4096xf16>
	%552="ufront.linear"(%549, %550, %551){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%553="ufront.smultiply"(%480){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%554="ufront.add"(%553, %552):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%555="ufront.parameter"(){dtype="Half", initializer="0x55f071cfd330", requires_grad=true}:() -> tensor<4096xf16>
	%556="ufront.parameter"(){dtype="Half", initializer="0x55f071cff340", requires_grad=true}:() -> tensor<4096xf16>
	%557="ufront.layer_norm"(%554, %555, %556){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%558="ufront.parameter"(){dtype="Half", initializer="0x7f3300ca2010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%559="ufront.parameter"(){dtype="Half", initializer="0x55f071d09d50", requires_grad=true}:() -> tensor<16384xf16>
	%560="ufront.linear"(%557, %558, %559){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%561="ufront.gelu"(%560):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%562="ufront.dropout"(%561){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%563="ufront.parameter"(){dtype="Half", initializer="0x7f32f8ca1010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%564="ufront.parameter"(){dtype="Half", initializer="0x55f071d12570", requires_grad=true}:() -> tensor<4096xf16>
	%565="ufront.linear"(%562, %563, %564){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%566="ufront.smultiply"(%557){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%567="ufront.add"(%566, %565):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%568="ufront.parameter"(){dtype="Half", initializer="0x55f071d14ad0", requires_grad=true}:() -> tensor<4096xf16>
	%569="ufront.parameter"(){dtype="Half", initializer="0x55f071d23fc0", requires_grad=true}:() -> tensor<4096xf16>
	%570="ufront.layer_norm"(%567, %568, %569){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%571="ufront.parameter"(){dtype="Half", initializer="0x7f32eac9f010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%572="ufront.parameter"(){dtype="Half", initializer="0x55f071d2e010", requires_grad=true}:() -> tensor<12288xf16>
	%573="ufront.linear"(%570, %571, %572){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%574="ufront.reshape"(%573){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%575, %576, %577="ufront.split"(%574){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%578, %579, %580, %581="ufront.split"(%575){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%582, %583, %584, %585="ufront.split"(%576){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%586="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%587="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%588="ufront.multiply"(%578, %586):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%589="ufront.multiply"(%579, %587):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%590="ufront.subtract"(%588, %589):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%591="ufront.multiply"(%578, %587):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%592="ufront.multiply"(%579, %586):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%593="ufront.add"(%591, %592):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%594="ufront.concat"(%590, %593){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%595="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%596="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%597="ufront.multiply"(%580, %595):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%598="ufront.multiply"(%581, %596):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%599="ufront.subtract"(%597, %598):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%600="ufront.multiply"(%580, %596):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%601="ufront.multiply"(%581, %595):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%602="ufront.add"(%600, %601):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%603="ufront.concat"(%599, %602){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%604="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%605="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%606="ufront.multiply"(%582, %604):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%607="ufront.multiply"(%583, %605):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%608="ufront.subtract"(%606, %607):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%609="ufront.multiply"(%582, %605):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%610="ufront.multiply"(%583, %604):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%611="ufront.add"(%609, %610):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%612="ufront.concat"(%608, %611){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%613="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%614="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%615="ufront.multiply"(%584, %613):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%616="ufront.multiply"(%585, %614):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%617="ufront.subtract"(%615, %616):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%618="ufront.multiply"(%584, %614):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%619="ufront.multiply"(%585, %613):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%620="ufront.add"(%618, %619):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%621="ufront.concat"(%617, %620){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%622="ufront.concat"(%594, %603){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%623="ufront.concat"(%612, %621){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%624="ufront.detach"(%623):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%625="ufront.detach"(%577):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%626="ufront.transpose"(%622){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%627="ufront.transpose"(%623){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%628="ufront.transpose"(%577){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%629="ufront.struediv"(%626){scalar=79.19595949289332}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%630="ufront.batch_matmul"(%629, %627):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%631="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%632="ufront.add"(%630, %631):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%633="ufront.float"(%632):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%634="ufront.smultiply"(%633){scalar=7.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%635="ufront.softmax"(%634):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%636="ufront.dropout"(%635){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%637="ufront.batch_matmul"(%636, %628):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%638="ufront.transpose"(%637){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%639="ufront.reshape"(%638){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%640="ufront.parameter"(){dtype="Half", initializer="0x7f3344caa010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%641="ufront.parameter"(){dtype="Half", initializer="0x55f071d54550", requires_grad=true}:() -> tensor<4096xf16>
	%642="ufront.linear"(%639, %640, %641){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%643="ufront.smultiply"(%570){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%644="ufront.add"(%643, %642):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%645="ufront.parameter"(){dtype="Half", initializer="0x55f071d5af40", requires_grad=true}:() -> tensor<4096xf16>
	%646="ufront.parameter"(){dtype="Half", initializer="0x55f071d5cf50", requires_grad=true}:() -> tensor<4096xf16>
	%647="ufront.layer_norm"(%644, %645, %646){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%648="ufront.parameter"(){dtype="Half", initializer="0x7f32ccc9b010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%649="ufront.parameter"(){dtype="Half", initializer="0x55f071d677b0", requires_grad=true}:() -> tensor<16384xf16>
	%650="ufront.linear"(%647, %648, %649){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%651="ufront.gelu"(%650):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%652="ufront.dropout"(%651){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%653="ufront.parameter"(){dtype="Half", initializer="0x7f32c4c9a010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%654="ufront.parameter"(){dtype="Half", initializer="0x55f071d6f7c0", requires_grad=true}:() -> tensor<4096xf16>
	%655="ufront.linear"(%652, %653, %654){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%656="ufront.smultiply"(%647){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%657="ufront.add"(%656, %655):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%658="ufront.parameter"(){dtype="Half", initializer="0x55f071d717d0", requires_grad=true}:() -> tensor<4096xf16>
	%659="ufront.parameter"(){dtype="Half", initializer="0x55f071d7f7e0", requires_grad=true}:() -> tensor<4096xf16>
	%660="ufront.layer_norm"(%657, %658, %659){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%661="ufront.parameter"(){dtype="Half", initializer="0x7f32b6c98010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%662="ufront.parameter"(){dtype="Half", initializer="0x55f071d8a040", requires_grad=true}:() -> tensor<12288xf16>
	%663="ufront.linear"(%660, %661, %662){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%664="ufront.reshape"(%663){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%665, %666, %667="ufront.split"(%664){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%668, %669, %670, %671="ufront.split"(%665){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%672, %673, %674, %675="ufront.split"(%666){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%676="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%677="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%678="ufront.multiply"(%668, %676):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%679="ufront.multiply"(%669, %677):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%680="ufront.subtract"(%678, %679):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%681="ufront.multiply"(%668, %677):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%682="ufront.multiply"(%669, %676):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%683="ufront.add"(%681, %682):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%684="ufront.concat"(%680, %683){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%685="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%686="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%687="ufront.multiply"(%670, %685):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%688="ufront.multiply"(%671, %686):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%689="ufront.subtract"(%687, %688):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%690="ufront.multiply"(%670, %686):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%691="ufront.multiply"(%671, %685):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%692="ufront.add"(%690, %691):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%693="ufront.concat"(%689, %692){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%694="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%695="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%696="ufront.multiply"(%672, %694):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%697="ufront.multiply"(%673, %695):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%698="ufront.subtract"(%696, %697):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%699="ufront.multiply"(%672, %695):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%700="ufront.multiply"(%673, %694):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%701="ufront.add"(%699, %700):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%702="ufront.concat"(%698, %701){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%703="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%704="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%705="ufront.multiply"(%674, %703):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%706="ufront.multiply"(%675, %704):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%707="ufront.subtract"(%705, %706):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%708="ufront.multiply"(%674, %704):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%709="ufront.multiply"(%675, %703):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%710="ufront.add"(%708, %709):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%711="ufront.concat"(%707, %710){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%712="ufront.concat"(%684, %693){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%713="ufront.concat"(%702, %711){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%714="ufront.detach"(%713):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%715="ufront.detach"(%667):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%716="ufront.transpose"(%712){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%717="ufront.transpose"(%713){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%718="ufront.transpose"(%667){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%719="ufront.struediv"(%716){scalar=90.50966799187809}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%720="ufront.batch_matmul"(%719, %717):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%721="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%722="ufront.add"(%720, %721):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%723="ufront.float"(%722):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%724="ufront.smultiply"(%723){scalar=8.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%725="ufront.softmax"(%724):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%726="ufront.dropout"(%725){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%727="ufront.batch_matmul"(%726, %718):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%728="ufront.transpose"(%727){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%729="ufront.reshape"(%728){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%730="ufront.parameter"(){dtype="Half", initializer="0x7f3310ca3010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%731="ufront.parameter"(){dtype="Half", initializer="0x55f071db8520", requires_grad=true}:() -> tensor<4096xf16>
	%732="ufront.linear"(%729, %730, %731){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%733="ufront.smultiply"(%660){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%734="ufront.add"(%733, %732):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%735="ufront.parameter"(){dtype="Half", initializer="0x55f071dbef10", requires_grad=true}:() -> tensor<4096xf16>
	%736="ufront.parameter"(){dtype="Half", initializer="0x55f071dc0f20", requires_grad=true}:() -> tensor<4096xf16>
	%737="ufront.layer_norm"(%734, %735, %736){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%738="ufront.parameter"(){dtype="Half", initializer="0x7f3298c94010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%739="ufront.parameter"(){dtype="Half", initializer="0x55f07052d010", requires_grad=true}:() -> tensor<16384xf16>
	%740="ufront.linear"(%737, %738, %739){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%741="ufront.gelu"(%740):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%742="ufront.dropout"(%741){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%743="ufront.parameter"(){dtype="Half", initializer="0x7f3290c93010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%744="ufront.parameter"(){dtype="Half", initializer="0x55f070535020", requires_grad=true}:() -> tensor<4096xf16>
	%745="ufront.linear"(%742, %743, %744){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%746="ufront.smultiply"(%737){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%747="ufront.add"(%746, %745):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%748="ufront.parameter"(){dtype="Half", initializer="0x55f070537030", requires_grad=true}:() -> tensor<4096xf16>
	%749="ufront.parameter"(){dtype="Half", initializer="0x55f070545040", requires_grad=true}:() -> tensor<4096xf16>
	%750="ufront.layer_norm"(%747, %748, %749){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%751="ufront.parameter"(){dtype="Half", initializer="0x7f3282c91010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%752="ufront.parameter"(){dtype="Half", initializer="0x55f07054f090", requires_grad=true}:() -> tensor<12288xf16>
	%753="ufront.linear"(%750, %751, %752){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%754="ufront.reshape"(%753){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%755, %756, %757="ufront.split"(%754){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%758, %759, %760, %761="ufront.split"(%755){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%762, %763, %764, %765="ufront.split"(%756){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%766="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%767="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%768="ufront.multiply"(%758, %766):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%769="ufront.multiply"(%759, %767):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%770="ufront.subtract"(%768, %769):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%771="ufront.multiply"(%758, %767):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%772="ufront.multiply"(%759, %766):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%773="ufront.add"(%771, %772):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%774="ufront.concat"(%770, %773){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%775="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%776="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%777="ufront.multiply"(%760, %775):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%778="ufront.multiply"(%761, %776):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%779="ufront.subtract"(%777, %778):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%780="ufront.multiply"(%760, %776):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%781="ufront.multiply"(%761, %775):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%782="ufront.add"(%780, %781):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%783="ufront.concat"(%779, %782){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%784="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%785="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%786="ufront.multiply"(%762, %784):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%787="ufront.multiply"(%763, %785):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%788="ufront.subtract"(%786, %787):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%789="ufront.multiply"(%762, %785):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%790="ufront.multiply"(%763, %784):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%791="ufront.add"(%789, %790):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%792="ufront.concat"(%788, %791){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%793="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%794="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%795="ufront.multiply"(%764, %793):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%796="ufront.multiply"(%765, %794):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%797="ufront.subtract"(%795, %796):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%798="ufront.multiply"(%764, %794):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%799="ufront.multiply"(%765, %793):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%800="ufront.add"(%798, %799):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%801="ufront.concat"(%797, %800){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%802="ufront.concat"(%774, %783){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%803="ufront.concat"(%792, %801){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%804="ufront.detach"(%803):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%805="ufront.detach"(%757):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%806="ufront.transpose"(%802){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%807="ufront.transpose"(%803){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%808="ufront.transpose"(%757){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%809="ufront.struediv"(%806){scalar=101.82337649086286}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%810="ufront.batch_matmul"(%809, %807):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%811="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%812="ufront.add"(%810, %811):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%813="ufront.float"(%812):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%814="ufront.smultiply"(%813){scalar=9.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%815="ufront.softmax"(%814):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%816="ufront.dropout"(%815){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%817="ufront.batch_matmul"(%816, %808):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%818="ufront.transpose"(%817){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%819="ufront.reshape"(%818){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%820="ufront.parameter"(){dtype="Half", initializer="0x7f32dcc9c010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%821="ufront.parameter"(){dtype="Half", initializer="0x55f070575cf0", requires_grad=true}:() -> tensor<4096xf16>
	%822="ufront.linear"(%819, %820, %821){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%823="ufront.smultiply"(%750){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%824="ufront.add"(%823, %822):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%825="ufront.parameter"(){dtype="Half", initializer="0x55f07057c6e0", requires_grad=true}:() -> tensor<4096xf16>
	%826="ufront.parameter"(){dtype="Half", initializer="0x55f07057e6f0", requires_grad=true}:() -> tensor<4096xf16>
	%827="ufront.layer_norm"(%824, %825, %826){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%828="ufront.parameter"(){dtype="Half", initializer="0x7f3264c8d010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%829="ufront.parameter"(){dtype="Half", initializer="0x55f070589100", requires_grad=true}:() -> tensor<16384xf16>
	%830="ufront.linear"(%827, %828, %829){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%831="ufront.gelu"(%830):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%832="ufront.dropout"(%831){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%833="ufront.parameter"(){dtype="Half", initializer="0x7f325cc8c010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%834="ufront.parameter"(){dtype="Half", initializer="0x55f070591110", requires_grad=true}:() -> tensor<4096xf16>
	%835="ufront.linear"(%832, %833, %834){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%836="ufront.smultiply"(%827){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%837="ufront.add"(%836, %835):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%838="ufront.parameter"(){dtype="Half", initializer="0x55f070593120", requires_grad=true}:() -> tensor<4096xf16>
	%839="ufront.parameter"(){dtype="Half", initializer="0x55f0705a1130", requires_grad=true}:() -> tensor<4096xf16>
	%840="ufront.layer_norm"(%837, %838, %839){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%841="ufront.parameter"(){dtype="Half", initializer="0x7f324ec8a010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%842="ufront.parameter"(){dtype="Half", initializer="0x55f0705ab530", requires_grad=true}:() -> tensor<12288xf16>
	%843="ufront.linear"(%840, %841, %842){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%844="ufront.reshape"(%843){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%845, %846, %847="ufront.split"(%844){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%848, %849, %850, %851="ufront.split"(%845){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%852, %853, %854, %855="ufront.split"(%846){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%856="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%857="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%858="ufront.multiply"(%848, %856):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%859="ufront.multiply"(%849, %857):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%860="ufront.subtract"(%858, %859):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%861="ufront.multiply"(%848, %857):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%862="ufront.multiply"(%849, %856):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%863="ufront.add"(%861, %862):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%864="ufront.concat"(%860, %863){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%865="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%866="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%867="ufront.multiply"(%850, %865):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%868="ufront.multiply"(%851, %866):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%869="ufront.subtract"(%867, %868):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%870="ufront.multiply"(%850, %866):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%871="ufront.multiply"(%851, %865):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%872="ufront.add"(%870, %871):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%873="ufront.concat"(%869, %872){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%874="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%875="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%876="ufront.multiply"(%852, %874):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%877="ufront.multiply"(%853, %875):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%878="ufront.subtract"(%876, %877):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%879="ufront.multiply"(%852, %875):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%880="ufront.multiply"(%853, %874):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%881="ufront.add"(%879, %880):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%882="ufront.concat"(%878, %881){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%883="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%884="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%885="ufront.multiply"(%854, %883):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%886="ufront.multiply"(%855, %884):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%887="ufront.subtract"(%885, %886):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%888="ufront.multiply"(%854, %884):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%889="ufront.multiply"(%855, %883):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%890="ufront.add"(%888, %889):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%891="ufront.concat"(%887, %890){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%892="ufront.concat"(%864, %873){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%893="ufront.concat"(%882, %891){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%894="ufront.detach"(%893):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%895="ufront.detach"(%847):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%896="ufront.transpose"(%892){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%897="ufront.transpose"(%893){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%898="ufront.transpose"(%847){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%899="ufront.struediv"(%896){scalar=113.13708498984761}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%900="ufront.batch_matmul"(%899, %897):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%901="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%902="ufront.add"(%900, %901):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%903="ufront.float"(%902):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%904="ufront.smultiply"(%903){scalar=10.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%905="ufront.softmax"(%904):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%906="ufront.dropout"(%905){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%907="ufront.batch_matmul"(%906, %898):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%908="ufront.transpose"(%907){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%909="ufront.reshape"(%908){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%910="ufront.parameter"(){dtype="Half", initializer="0x7f32a8c95010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%911="ufront.parameter"(){dtype="Half", initializer="0x55f0705d28a0", requires_grad=true}:() -> tensor<4096xf16>
	%912="ufront.linear"(%909, %910, %911){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%913="ufront.smultiply"(%840){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%914="ufront.add"(%913, %912):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%915="ufront.parameter"(){dtype="Half", initializer="0x55f0705d90e0", requires_grad=true}:() -> tensor<4096xf16>
	%916="ufront.parameter"(){dtype="Half", initializer="0x55f0705db0f0", requires_grad=true}:() -> tensor<4096xf16>
	%917="ufront.layer_norm"(%914, %915, %916){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%918="ufront.parameter"(){dtype="Half", initializer="0x7f3230c86010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%919="ufront.parameter"(){dtype="Half", initializer="0x55f0705e5b00", requires_grad=true}:() -> tensor<16384xf16>
	%920="ufront.linear"(%917, %918, %919){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%921="ufront.gelu"(%920):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%922="ufront.dropout"(%921){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%923="ufront.parameter"(){dtype="Half", initializer="0x7f3228c85010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%924="ufront.parameter"(){dtype="Half", initializer="0x55f0705edb10", requires_grad=true}:() -> tensor<4096xf16>
	%925="ufront.linear"(%922, %923, %924){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%926="ufront.smultiply"(%917){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%927="ufront.add"(%926, %925):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%928="ufront.parameter"(){dtype="Half", initializer="0x55f0705efb20", requires_grad=true}:() -> tensor<4096xf16>
	%929="ufront.parameter"(){dtype="Half", initializer="0x55f0705fdb30", requires_grad=true}:() -> tensor<4096xf16>
	%930="ufront.layer_norm"(%927, %928, %929){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%931="ufront.parameter"(){dtype="Half", initializer="0x7f321ac83010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%932="ufront.parameter"(){dtype="Half", initializer="0x55f070608390", requires_grad=true}:() -> tensor<12288xf16>
	%933="ufront.linear"(%930, %931, %932){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%934="ufront.reshape"(%933){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%935, %936, %937="ufront.split"(%934){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%938, %939, %940, %941="ufront.split"(%935){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%942, %943, %944, %945="ufront.split"(%936){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%946="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%947="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%948="ufront.multiply"(%938, %946):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%949="ufront.multiply"(%939, %947):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%950="ufront.subtract"(%948, %949):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%951="ufront.multiply"(%938, %947):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%952="ufront.multiply"(%939, %946):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%953="ufront.add"(%951, %952):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%954="ufront.concat"(%950, %953){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%955="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%956="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%957="ufront.multiply"(%940, %955):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%958="ufront.multiply"(%941, %956):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%959="ufront.subtract"(%957, %958):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%960="ufront.multiply"(%940, %956):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%961="ufront.multiply"(%941, %955):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%962="ufront.add"(%960, %961):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%963="ufront.concat"(%959, %962){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%964="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%965="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%966="ufront.multiply"(%942, %964):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%967="ufront.multiply"(%943, %965):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%968="ufront.subtract"(%966, %967):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%969="ufront.multiply"(%942, %965):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%970="ufront.multiply"(%943, %964):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%971="ufront.add"(%969, %970):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%972="ufront.concat"(%968, %971){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%973="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%974="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%975="ufront.multiply"(%944, %973):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%976="ufront.multiply"(%945, %974):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%977="ufront.subtract"(%975, %976):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%978="ufront.multiply"(%944, %974):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%979="ufront.multiply"(%945, %973):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%980="ufront.add"(%978, %979):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%981="ufront.concat"(%977, %980){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%982="ufront.concat"(%954, %963){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%983="ufront.concat"(%972, %981){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%984="ufront.detach"(%983):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%985="ufront.detach"(%937):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%986="ufront.transpose"(%982){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%987="ufront.transpose"(%983){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%988="ufront.transpose"(%937){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%989="ufront.struediv"(%986){scalar=124.45079348883237}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%990="ufront.batch_matmul"(%989, %987):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%991="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%992="ufront.add"(%990, %991):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%993="ufront.float"(%992):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%994="ufront.smultiply"(%993){scalar=11.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%995="ufront.softmax"(%994):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%996="ufront.dropout"(%995){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%997="ufront.batch_matmul"(%996, %988):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%998="ufront.transpose"(%997){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%999="ufront.reshape"(%998){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%1000="ufront.parameter"(){dtype="Half", initializer="0x7f3274c8e010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%1001="ufront.parameter"(){dtype="Half", initializer="0x55f07062f730", requires_grad=true}:() -> tensor<4096xf16>
	%1002="ufront.linear"(%999, %1000, %1001){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1003="ufront.smultiply"(%930){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1004="ufront.add"(%1003, %1002):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1005="ufront.parameter"(){dtype="Half", initializer="0x55f070636120", requires_grad=true}:() -> tensor<4096xf16>
	%1006="ufront.parameter"(){dtype="Half", initializer="0x55f070638130", requires_grad=true}:() -> tensor<4096xf16>
	%1007="ufront.layer_norm"(%1004, %1005, %1006){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1008="ufront.parameter"(){dtype="Half", initializer="0x7f31fcc7f010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%1009="ufront.parameter"(){dtype="Half", initializer="0x55f070642b40", requires_grad=true}:() -> tensor<16384xf16>
	%1010="ufront.linear"(%1007, %1008, %1009){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%1011="ufront.gelu"(%1010):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1012="ufront.dropout"(%1011){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1013="ufront.parameter"(){dtype="Half", initializer="0x7f31f4c7e010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%1014="ufront.parameter"(){dtype="Half", initializer="0x55f07064ab50", requires_grad=true}:() -> tensor<4096xf16>
	%1015="ufront.linear"(%1012, %1013, %1014){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1016="ufront.smultiply"(%1007){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1017="ufront.add"(%1016, %1015):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1018="ufront.parameter"(){dtype="Half", initializer="0x55f07064cb60", requires_grad=true}:() -> tensor<4096xf16>
	%1019="ufront.parameter"(){dtype="Half", initializer="0x55f07065ab70", requires_grad=true}:() -> tensor<4096xf16>
	%1020="ufront.layer_norm"(%1017, %1018, %1019){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1021="ufront.parameter"(){dtype="Half", initializer="0x7f31e6c7c010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%1022="ufront.parameter"(){dtype="Half", initializer="0x55f070664bc0", requires_grad=true}:() -> tensor<12288xf16>
	%1023="ufront.linear"(%1020, %1021, %1022){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%1024="ufront.reshape"(%1023){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%1025, %1026, %1027="ufront.split"(%1024){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%1028, %1029, %1030, %1031="ufront.split"(%1025){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1032, %1033, %1034, %1035="ufront.split"(%1026){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1036="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1037="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1038="ufront.multiply"(%1028, %1036):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1039="ufront.multiply"(%1029, %1037):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1040="ufront.subtract"(%1038, %1039):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1041="ufront.multiply"(%1028, %1037):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1042="ufront.multiply"(%1029, %1036):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1043="ufront.add"(%1041, %1042):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1044="ufront.concat"(%1040, %1043){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1045="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1046="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1047="ufront.multiply"(%1030, %1045):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1048="ufront.multiply"(%1031, %1046):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1049="ufront.subtract"(%1047, %1048):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1050="ufront.multiply"(%1030, %1046):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1051="ufront.multiply"(%1031, %1045):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1052="ufront.add"(%1050, %1051):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1053="ufront.concat"(%1049, %1052){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1054="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1055="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1056="ufront.multiply"(%1032, %1054):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1057="ufront.multiply"(%1033, %1055):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1058="ufront.subtract"(%1056, %1057):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1059="ufront.multiply"(%1032, %1055):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1060="ufront.multiply"(%1033, %1054):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1061="ufront.add"(%1059, %1060):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1062="ufront.concat"(%1058, %1061){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1063="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1064="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1065="ufront.multiply"(%1034, %1063):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1066="ufront.multiply"(%1035, %1064):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1067="ufront.subtract"(%1065, %1066):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1068="ufront.multiply"(%1034, %1064):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1069="ufront.multiply"(%1035, %1063):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1070="ufront.add"(%1068, %1069):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1071="ufront.concat"(%1067, %1070){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1072="ufront.concat"(%1044, %1053){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1073="ufront.concat"(%1062, %1071){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1074="ufront.detach"(%1073):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1075="ufront.detach"(%1027):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1076="ufront.transpose"(%1072){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1077="ufront.transpose"(%1073){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%1078="ufront.transpose"(%1027){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1079="ufront.struediv"(%1076){scalar=135.76450198781714}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1080="ufront.batch_matmul"(%1079, %1077):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%1081="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%1082="ufront.add"(%1080, %1081):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%1083="ufront.float"(%1082):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1084="ufront.smultiply"(%1083){scalar=12.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1085="ufront.softmax"(%1084):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1086="ufront.dropout"(%1085){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1087="ufront.batch_matmul"(%1086, %1078):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1088="ufront.transpose"(%1087){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%1089="ufront.reshape"(%1088){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%1090="ufront.parameter"(){dtype="Half", initializer="0x7f3240c87010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%1091="ufront.parameter"(){dtype="Half", initializer="0x55f07068bcf0", requires_grad=true}:() -> tensor<4096xf16>
	%1092="ufront.linear"(%1089, %1090, %1091){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1093="ufront.smultiply"(%1020){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1094="ufront.add"(%1093, %1092):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1095="ufront.parameter"(){dtype="Half", initializer="0x55f070692530", requires_grad=true}:() -> tensor<4096xf16>
	%1096="ufront.parameter"(){dtype="Half", initializer="0x55f070694540", requires_grad=true}:() -> tensor<4096xf16>
	%1097="ufront.layer_norm"(%1094, %1095, %1096){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1098="ufront.parameter"(){dtype="Half", initializer="0x7f31c8c78010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%1099="ufront.parameter"(){dtype="Half", initializer="0x55f07069ef50", requires_grad=true}:() -> tensor<16384xf16>
	%1100="ufront.linear"(%1097, %1098, %1099){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%1101="ufront.gelu"(%1100):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1102="ufront.dropout"(%1101){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1103="ufront.parameter"(){dtype="Half", initializer="0x7f31c0c77010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%1104="ufront.parameter"(){dtype="Half", initializer="0x55f0706a6f60", requires_grad=true}:() -> tensor<4096xf16>
	%1105="ufront.linear"(%1102, %1103, %1104){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1106="ufront.smultiply"(%1097){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1107="ufront.add"(%1106, %1105):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1108="ufront.parameter"(){dtype="Half", initializer="0x55f0706a8f70", requires_grad=true}:() -> tensor<4096xf16>
	%1109="ufront.parameter"(){dtype="Half", initializer="0x55f0706b6f80", requires_grad=true}:() -> tensor<4096xf16>
	%1110="ufront.layer_norm"(%1107, %1108, %1109){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1111="ufront.parameter"(){dtype="Half", initializer="0x7f31b2c75010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%1112="ufront.parameter"(){dtype="Half", initializer="0x55f0706c17e0", requires_grad=true}:() -> tensor<12288xf16>
	%1113="ufront.linear"(%1110, %1111, %1112){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%1114="ufront.reshape"(%1113){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%1115, %1116, %1117="ufront.split"(%1114){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%1118, %1119, %1120, %1121="ufront.split"(%1115){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1122, %1123, %1124, %1125="ufront.split"(%1116){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1126="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1127="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1128="ufront.multiply"(%1118, %1126):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1129="ufront.multiply"(%1119, %1127):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1130="ufront.subtract"(%1128, %1129):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1131="ufront.multiply"(%1118, %1127):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1132="ufront.multiply"(%1119, %1126):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1133="ufront.add"(%1131, %1132):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1134="ufront.concat"(%1130, %1133){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1135="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1136="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1137="ufront.multiply"(%1120, %1135):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1138="ufront.multiply"(%1121, %1136):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1139="ufront.subtract"(%1137, %1138):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1140="ufront.multiply"(%1120, %1136):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1141="ufront.multiply"(%1121, %1135):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1142="ufront.add"(%1140, %1141):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1143="ufront.concat"(%1139, %1142){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1144="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1145="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1146="ufront.multiply"(%1122, %1144):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1147="ufront.multiply"(%1123, %1145):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1148="ufront.subtract"(%1146, %1147):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1149="ufront.multiply"(%1122, %1145):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1150="ufront.multiply"(%1123, %1144):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1151="ufront.add"(%1149, %1150):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1152="ufront.concat"(%1148, %1151){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1153="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1154="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1155="ufront.multiply"(%1124, %1153):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1156="ufront.multiply"(%1125, %1154):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1157="ufront.subtract"(%1155, %1156):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1158="ufront.multiply"(%1124, %1154):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1159="ufront.multiply"(%1125, %1153):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1160="ufront.add"(%1158, %1159):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1161="ufront.concat"(%1157, %1160){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1162="ufront.concat"(%1134, %1143){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1163="ufront.concat"(%1152, %1161){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1164="ufront.detach"(%1163):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1165="ufront.detach"(%1117):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1166="ufront.transpose"(%1162){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1167="ufront.transpose"(%1163){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%1168="ufront.transpose"(%1117){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1169="ufront.struediv"(%1166){scalar=147.0782104868019}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1170="ufront.batch_matmul"(%1169, %1167):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%1171="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%1172="ufront.add"(%1170, %1171):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%1173="ufront.float"(%1172):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1174="ufront.smultiply"(%1173){scalar=13.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1175="ufront.softmax"(%1174):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1176="ufront.dropout"(%1175){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1177="ufront.batch_matmul"(%1176, %1168):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1178="ufront.transpose"(%1177){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%1179="ufront.reshape"(%1178){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%1180="ufront.parameter"(){dtype="Half", initializer="0x7f320cc80010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%1181="ufront.parameter"(){dtype="Half", initializer="0x55f0706ea590", requires_grad=true}:() -> tensor<4096xf16>
	%1182="ufront.linear"(%1179, %1180, %1181){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1183="ufront.smultiply"(%1110){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1184="ufront.add"(%1183, %1182):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1185="ufront.parameter"(){dtype="Half", initializer="0x55f0706f0dd0", requires_grad=true}:() -> tensor<4096xf16>
	%1186="ufront.parameter"(){dtype="Half", initializer="0x55f0706f2de0", requires_grad=true}:() -> tensor<4096xf16>
	%1187="ufront.layer_norm"(%1184, %1185, %1186){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1188="ufront.parameter"(){dtype="Half", initializer="0x7f3194c71010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%1189="ufront.parameter"(){dtype="Half", initializer="0x55f0706fd7f0", requires_grad=true}:() -> tensor<16384xf16>
	%1190="ufront.linear"(%1187, %1188, %1189){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%1191="ufront.gelu"(%1190):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1192="ufront.dropout"(%1191){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1193="ufront.parameter"(){dtype="Half", initializer="0x7f318cc70010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%1194="ufront.parameter"(){dtype="Half", initializer="0x55f070705800", requires_grad=true}:() -> tensor<4096xf16>
	%1195="ufront.linear"(%1192, %1193, %1194){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1196="ufront.smultiply"(%1187){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1197="ufront.add"(%1196, %1195):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1198="ufront.parameter"(){dtype="Half", initializer="0x55f070707810", requires_grad=true}:() -> tensor<4096xf16>
	%1199="ufront.parameter"(){dtype="Half", initializer="0x55f070715820", requires_grad=true}:() -> tensor<4096xf16>
	%1200="ufront.layer_norm"(%1197, %1198, %1199){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1201="ufront.parameter"(){dtype="Half", initializer="0x7f317ec6e010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%1202="ufront.parameter"(){dtype="Half", initializer="0x55f07071fa70", requires_grad=true}:() -> tensor<12288xf16>
	%1203="ufront.linear"(%1200, %1201, %1202){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%1204="ufront.reshape"(%1203){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%1205, %1206, %1207="ufront.split"(%1204){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%1208, %1209, %1210, %1211="ufront.split"(%1205){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1212, %1213, %1214, %1215="ufront.split"(%1206){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1216="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1217="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1218="ufront.multiply"(%1208, %1216):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1219="ufront.multiply"(%1209, %1217):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1220="ufront.subtract"(%1218, %1219):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1221="ufront.multiply"(%1208, %1217):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1222="ufront.multiply"(%1209, %1216):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1223="ufront.add"(%1221, %1222):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1224="ufront.concat"(%1220, %1223){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1225="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1226="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1227="ufront.multiply"(%1210, %1225):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1228="ufront.multiply"(%1211, %1226):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1229="ufront.subtract"(%1227, %1228):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1230="ufront.multiply"(%1210, %1226):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1231="ufront.multiply"(%1211, %1225):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1232="ufront.add"(%1230, %1231):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1233="ufront.concat"(%1229, %1232){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1234="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1235="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1236="ufront.multiply"(%1212, %1234):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1237="ufront.multiply"(%1213, %1235):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1238="ufront.subtract"(%1236, %1237):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1239="ufront.multiply"(%1212, %1235):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1240="ufront.multiply"(%1213, %1234):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1241="ufront.add"(%1239, %1240):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1242="ufront.concat"(%1238, %1241){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1243="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1244="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1245="ufront.multiply"(%1214, %1243):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1246="ufront.multiply"(%1215, %1244):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1247="ufront.subtract"(%1245, %1246):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1248="ufront.multiply"(%1214, %1244):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1249="ufront.multiply"(%1215, %1243):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1250="ufront.add"(%1248, %1249):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1251="ufront.concat"(%1247, %1250){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1252="ufront.concat"(%1224, %1233){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1253="ufront.concat"(%1242, %1251){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1254="ufront.detach"(%1253):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1255="ufront.detach"(%1207):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1256="ufront.transpose"(%1252){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1257="ufront.transpose"(%1253){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%1258="ufront.transpose"(%1207){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1259="ufront.struediv"(%1256){scalar=158.39191898578665}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1260="ufront.batch_matmul"(%1259, %1257):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%1261="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%1262="ufront.add"(%1260, %1261):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%1263="ufront.float"(%1262):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1264="ufront.smultiply"(%1263){scalar=14.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1265="ufront.softmax"(%1264):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1266="ufront.dropout"(%1265){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1267="ufront.batch_matmul"(%1266, %1258):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1268="ufront.transpose"(%1267){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%1269="ufront.reshape"(%1268){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%1270="ufront.parameter"(){dtype="Half", initializer="0x7f31d8c79010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%1271="ufront.parameter"(){dtype="Half", initializer="0x55f070746c70", requires_grad=true}:() -> tensor<4096xf16>
	%1272="ufront.linear"(%1269, %1270, %1271){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1273="ufront.smultiply"(%1200){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1274="ufront.add"(%1273, %1272):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1275="ufront.parameter"(){dtype="Half", initializer="0x55f07074d660", requires_grad=true}:() -> tensor<4096xf16>
	%1276="ufront.parameter"(){dtype="Half", initializer="0x55f07074f670", requires_grad=true}:() -> tensor<4096xf16>
	%1277="ufront.layer_norm"(%1274, %1275, %1276){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1278="ufront.parameter"(){dtype="Half", initializer="0x7f3160c6a010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%1279="ufront.parameter"(){dtype="Half", initializer="0x55f070759ed0", requires_grad=true}:() -> tensor<16384xf16>
	%1280="ufront.linear"(%1277, %1278, %1279){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%1281="ufront.gelu"(%1280):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1282="ufront.dropout"(%1281){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1283="ufront.parameter"(){dtype="Half", initializer="0x7f3158c69010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%1284="ufront.parameter"(){dtype="Half", initializer="0x55f070761ee0", requires_grad=true}:() -> tensor<4096xf16>
	%1285="ufront.linear"(%1282, %1283, %1284){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1286="ufront.smultiply"(%1277){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1287="ufront.add"(%1286, %1285):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1288="ufront.parameter"(){dtype="Half", initializer="0x55f070763ef0", requires_grad=true}:() -> tensor<4096xf16>
	%1289="ufront.parameter"(){dtype="Half", initializer="0x55f070771f00", requires_grad=true}:() -> tensor<4096xf16>
	%1290="ufront.layer_norm"(%1287, %1288, %1289){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1291="ufront.parameter"(){dtype="Half", initializer="0x7f314ac67010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%1292="ufront.parameter"(){dtype="Half", initializer="0x55f07077cae0", requires_grad=true}:() -> tensor<12288xf16>
	%1293="ufront.linear"(%1290, %1291, %1292){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%1294="ufront.reshape"(%1293){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%1295, %1296, %1297="ufront.split"(%1294){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%1298, %1299, %1300, %1301="ufront.split"(%1295){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1302, %1303, %1304, %1305="ufront.split"(%1296){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1306="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1307="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1308="ufront.multiply"(%1298, %1306):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1309="ufront.multiply"(%1299, %1307):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1310="ufront.subtract"(%1308, %1309):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1311="ufront.multiply"(%1298, %1307):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1312="ufront.multiply"(%1299, %1306):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1313="ufront.add"(%1311, %1312):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1314="ufront.concat"(%1310, %1313){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1315="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1316="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1317="ufront.multiply"(%1300, %1315):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1318="ufront.multiply"(%1301, %1316):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1319="ufront.subtract"(%1317, %1318):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1320="ufront.multiply"(%1300, %1316):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1321="ufront.multiply"(%1301, %1315):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1322="ufront.add"(%1320, %1321):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1323="ufront.concat"(%1319, %1322){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1324="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1325="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1326="ufront.multiply"(%1302, %1324):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1327="ufront.multiply"(%1303, %1325):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1328="ufront.subtract"(%1326, %1327):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1329="ufront.multiply"(%1302, %1325):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1330="ufront.multiply"(%1303, %1324):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1331="ufront.add"(%1329, %1330):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1332="ufront.concat"(%1328, %1331){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1333="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1334="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1335="ufront.multiply"(%1304, %1333):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1336="ufront.multiply"(%1305, %1334):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1337="ufront.subtract"(%1335, %1336):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1338="ufront.multiply"(%1304, %1334):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1339="ufront.multiply"(%1305, %1333):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1340="ufront.add"(%1338, %1339):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1341="ufront.concat"(%1337, %1340){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1342="ufront.concat"(%1314, %1323){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1343="ufront.concat"(%1332, %1341){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1344="ufront.detach"(%1343):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1345="ufront.detach"(%1297):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1346="ufront.transpose"(%1342){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1347="ufront.transpose"(%1343){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%1348="ufront.transpose"(%1297){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1349="ufront.struediv"(%1346){scalar=169.7056274847714}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1350="ufront.batch_matmul"(%1349, %1347):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%1351="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%1352="ufront.add"(%1350, %1351):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%1353="ufront.float"(%1352):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1354="ufront.smultiply"(%1353){scalar=15.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1355="ufront.softmax"(%1354):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1356="ufront.dropout"(%1355){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1357="ufront.batch_matmul"(%1356, %1348):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1358="ufront.transpose"(%1357){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%1359="ufront.reshape"(%1358){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%1360="ufront.parameter"(){dtype="Half", initializer="0x7f31a4c72010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%1361="ufront.parameter"(){dtype="Half", initializer="0x55f0707b0a90", requires_grad=true}:() -> tensor<4096xf16>
	%1362="ufront.linear"(%1359, %1360, %1361){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1363="ufront.smultiply"(%1290){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1364="ufront.add"(%1363, %1362):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1365="ufront.parameter"(){dtype="Half", initializer="0x55f0707b7480", requires_grad=true}:() -> tensor<4096xf16>
	%1366="ufront.parameter"(){dtype="Half", initializer="0x55f0707b9490", requires_grad=true}:() -> tensor<4096xf16>
	%1367="ufront.layer_norm"(%1364, %1365, %1366){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1368="ufront.parameter"(){dtype="Half", initializer="0x7f312cc63010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%1369="ufront.parameter"(){dtype="Half", initializer="0x55f071de6d90", requires_grad=true}:() -> tensor<16384xf16>
	%1370="ufront.linear"(%1367, %1368, %1369){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%1371="ufront.gelu"(%1370):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1372="ufront.dropout"(%1371){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1373="ufront.parameter"(){dtype="Half", initializer="0x7f3124c62010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%1374="ufront.parameter"(){dtype="Half", initializer="0x55f071deeda0", requires_grad=true}:() -> tensor<4096xf16>
	%1375="ufront.linear"(%1372, %1373, %1374){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1376="ufront.smultiply"(%1367){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1377="ufront.add"(%1376, %1375):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1378="ufront.parameter"(){dtype="Half", initializer="0x55f071df0db0", requires_grad=true}:() -> tensor<4096xf16>
	%1379="ufront.parameter"(){dtype="Half", initializer="0x55f071dfedc0", requires_grad=true}:() -> tensor<4096xf16>
	%1380="ufront.layer_norm"(%1377, %1378, %1379){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1381="ufront.parameter"(){dtype="Half", initializer="0x7f3116c60010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%1382="ufront.parameter"(){dtype="Half", initializer="0x55f071e08e10", requires_grad=true}:() -> tensor<12288xf16>
	%1383="ufront.linear"(%1380, %1381, %1382){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%1384="ufront.reshape"(%1383){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%1385, %1386, %1387="ufront.split"(%1384){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%1388, %1389, %1390, %1391="ufront.split"(%1385){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1392, %1393, %1394, %1395="ufront.split"(%1386){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1396="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1397="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1398="ufront.multiply"(%1388, %1396):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1399="ufront.multiply"(%1389, %1397):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1400="ufront.subtract"(%1398, %1399):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1401="ufront.multiply"(%1388, %1397):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1402="ufront.multiply"(%1389, %1396):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1403="ufront.add"(%1401, %1402):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1404="ufront.concat"(%1400, %1403){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1405="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1406="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1407="ufront.multiply"(%1390, %1405):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1408="ufront.multiply"(%1391, %1406):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1409="ufront.subtract"(%1407, %1408):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1410="ufront.multiply"(%1390, %1406):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1411="ufront.multiply"(%1391, %1405):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1412="ufront.add"(%1410, %1411):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1413="ufront.concat"(%1409, %1412){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1414="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1415="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1416="ufront.multiply"(%1392, %1414):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1417="ufront.multiply"(%1393, %1415):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1418="ufront.subtract"(%1416, %1417):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1419="ufront.multiply"(%1392, %1415):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1420="ufront.multiply"(%1393, %1414):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1421="ufront.add"(%1419, %1420):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1422="ufront.concat"(%1418, %1421){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1423="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1424="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1425="ufront.multiply"(%1394, %1423):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1426="ufront.multiply"(%1395, %1424):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1427="ufront.subtract"(%1425, %1426):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1428="ufront.multiply"(%1394, %1424):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1429="ufront.multiply"(%1395, %1423):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1430="ufront.add"(%1428, %1429):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1431="ufront.concat"(%1427, %1430){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1432="ufront.concat"(%1404, %1413){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1433="ufront.concat"(%1422, %1431){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1434="ufront.detach"(%1433):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1435="ufront.detach"(%1387):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1436="ufront.transpose"(%1432){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1437="ufront.transpose"(%1433){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%1438="ufront.transpose"(%1387){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1439="ufront.struediv"(%1436){scalar=181.01933598375618}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1440="ufront.batch_matmul"(%1439, %1437):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%1441="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%1442="ufront.add"(%1440, %1441):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%1443="ufront.float"(%1442):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1444="ufront.smultiply"(%1443){scalar=16.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1445="ufront.softmax"(%1444):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1446="ufront.dropout"(%1445){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1447="ufront.batch_matmul"(%1446, %1438):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1448="ufront.transpose"(%1447){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%1449="ufront.reshape"(%1448){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%1450="ufront.parameter"(){dtype="Half", initializer="0x7f3170c6b010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%1451="ufront.parameter"(){dtype="Half", initializer="0x55f071e2e960", requires_grad=true}:() -> tensor<4096xf16>
	%1452="ufront.linear"(%1449, %1450, %1451){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1453="ufront.smultiply"(%1380){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1454="ufront.add"(%1453, %1452):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1455="ufront.parameter"(){dtype="Half", initializer="0x55f071e35350", requires_grad=true}:() -> tensor<4096xf16>
	%1456="ufront.parameter"(){dtype="Half", initializer="0x55f071e37360", requires_grad=true}:() -> tensor<4096xf16>
	%1457="ufront.layer_norm"(%1454, %1455, %1456){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1458="ufront.parameter"(){dtype="Half", initializer="0x7f30f8c5c010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%1459="ufront.parameter"(){dtype="Half", initializer="0x55f071e41d70", requires_grad=true}:() -> tensor<16384xf16>
	%1460="ufront.linear"(%1457, %1458, %1459){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%1461="ufront.gelu"(%1460):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1462="ufront.dropout"(%1461){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1463="ufront.parameter"(){dtype="Half", initializer="0x7f30f0c5b010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%1464="ufront.parameter"(){dtype="Half", initializer="0x55f071e49d80", requires_grad=true}:() -> tensor<4096xf16>
	%1465="ufront.linear"(%1462, %1463, %1464){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1466="ufront.smultiply"(%1457){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1467="ufront.add"(%1466, %1465):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1468="ufront.parameter"(){dtype="Half", initializer="0x55f071e4bd90", requires_grad=true}:() -> tensor<4096xf16>
	%1469="ufront.parameter"(){dtype="Half", initializer="0x55f071e59da0", requires_grad=true}:() -> tensor<4096xf16>
	%1470="ufront.layer_norm"(%1467, %1468, %1469){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1471="ufront.parameter"(){dtype="Half", initializer="0x7f30e2c59010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%1472="ufront.parameter"(){dtype="Half", initializer="0x55f071e64600", requires_grad=true}:() -> tensor<12288xf16>
	%1473="ufront.linear"(%1470, %1471, %1472){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%1474="ufront.reshape"(%1473){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%1475, %1476, %1477="ufront.split"(%1474){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%1478, %1479, %1480, %1481="ufront.split"(%1475){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1482, %1483, %1484, %1485="ufront.split"(%1476){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1486="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1487="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1488="ufront.multiply"(%1478, %1486):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1489="ufront.multiply"(%1479, %1487):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1490="ufront.subtract"(%1488, %1489):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1491="ufront.multiply"(%1478, %1487):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1492="ufront.multiply"(%1479, %1486):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1493="ufront.add"(%1491, %1492):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1494="ufront.concat"(%1490, %1493){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1495="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1496="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1497="ufront.multiply"(%1480, %1495):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1498="ufront.multiply"(%1481, %1496):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1499="ufront.subtract"(%1497, %1498):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1500="ufront.multiply"(%1480, %1496):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1501="ufront.multiply"(%1481, %1495):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1502="ufront.add"(%1500, %1501):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1503="ufront.concat"(%1499, %1502){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1504="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1505="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1506="ufront.multiply"(%1482, %1504):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1507="ufront.multiply"(%1483, %1505):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1508="ufront.subtract"(%1506, %1507):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1509="ufront.multiply"(%1482, %1505):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1510="ufront.multiply"(%1483, %1504):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1511="ufront.add"(%1509, %1510):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1512="ufront.concat"(%1508, %1511){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1513="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1514="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1515="ufront.multiply"(%1484, %1513):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1516="ufront.multiply"(%1485, %1514):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1517="ufront.subtract"(%1515, %1516):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1518="ufront.multiply"(%1484, %1514):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1519="ufront.multiply"(%1485, %1513):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1520="ufront.add"(%1518, %1519):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1521="ufront.concat"(%1517, %1520){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1522="ufront.concat"(%1494, %1503){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1523="ufront.concat"(%1512, %1521){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1524="ufront.detach"(%1523):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1525="ufront.detach"(%1477):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1526="ufront.transpose"(%1522){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1527="ufront.transpose"(%1523){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%1528="ufront.transpose"(%1477){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1529="ufront.struediv"(%1526){scalar=192.33304448274095}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1530="ufront.batch_matmul"(%1529, %1527):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%1531="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%1532="ufront.add"(%1530, %1531):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%1533="ufront.float"(%1532):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1534="ufront.smultiply"(%1533){scalar=17.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1535="ufront.softmax"(%1534):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1536="ufront.dropout"(%1535){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1537="ufront.batch_matmul"(%1536, %1528):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1538="ufront.transpose"(%1537){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%1539="ufront.reshape"(%1538){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%1540="ufront.parameter"(){dtype="Half", initializer="0x7f313cc64010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%1541="ufront.parameter"(){dtype="Half", initializer="0x55f071e8b580", requires_grad=true}:() -> tensor<4096xf16>
	%1542="ufront.linear"(%1539, %1540, %1541){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1543="ufront.smultiply"(%1470){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1544="ufront.add"(%1543, %1542):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1545="ufront.parameter"(){dtype="Half", initializer="0x55f071e91dc0", requires_grad=true}:() -> tensor<4096xf16>
	%1546="ufront.parameter"(){dtype="Half", initializer="0x55f071e945e0", requires_grad=true}:() -> tensor<4096xf16>
	%1547="ufront.layer_norm"(%1544, %1545, %1546){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1548="ufront.parameter"(){dtype="Half", initializer="0x7f30c4c55010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%1549="ufront.parameter"(){dtype="Half", initializer="0x55f071e9e9b0", requires_grad=true}:() -> tensor<16384xf16>
	%1550="ufront.linear"(%1547, %1548, %1549){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%1551="ufront.gelu"(%1550):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1552="ufront.dropout"(%1551){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1553="ufront.parameter"(){dtype="Half", initializer="0x7f30bcc54010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%1554="ufront.parameter"(){dtype="Half", initializer="0x55f071ea69c0", requires_grad=true}:() -> tensor<4096xf16>
	%1555="ufront.linear"(%1552, %1553, %1554){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1556="ufront.smultiply"(%1547){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1557="ufront.add"(%1556, %1555):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1558="ufront.parameter"(){dtype="Half", initializer="0x55f071ea89d0", requires_grad=true}:() -> tensor<4096xf16>
	%1559="ufront.parameter"(){dtype="Half", initializer="0x55f071eb69e0", requires_grad=true}:() -> tensor<4096xf16>
	%1560="ufront.layer_norm"(%1557, %1558, %1559){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1561="ufront.parameter"(){dtype="Half", initializer="0x7f30aec52010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%1562="ufront.parameter"(){dtype="Half", initializer="0x55f071ec1240", requires_grad=true}:() -> tensor<12288xf16>
	%1563="ufront.linear"(%1560, %1561, %1562){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%1564="ufront.reshape"(%1563){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%1565, %1566, %1567="ufront.split"(%1564){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%1568, %1569, %1570, %1571="ufront.split"(%1565){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1572, %1573, %1574, %1575="ufront.split"(%1566){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1576="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1577="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1578="ufront.multiply"(%1568, %1576):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1579="ufront.multiply"(%1569, %1577):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1580="ufront.subtract"(%1578, %1579):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1581="ufront.multiply"(%1568, %1577):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1582="ufront.multiply"(%1569, %1576):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1583="ufront.add"(%1581, %1582):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1584="ufront.concat"(%1580, %1583){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1585="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1586="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1587="ufront.multiply"(%1570, %1585):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1588="ufront.multiply"(%1571, %1586):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1589="ufront.subtract"(%1587, %1588):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1590="ufront.multiply"(%1570, %1586):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1591="ufront.multiply"(%1571, %1585):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1592="ufront.add"(%1590, %1591):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1593="ufront.concat"(%1589, %1592){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1594="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1595="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1596="ufront.multiply"(%1572, %1594):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1597="ufront.multiply"(%1573, %1595):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1598="ufront.subtract"(%1596, %1597):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1599="ufront.multiply"(%1572, %1595):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1600="ufront.multiply"(%1573, %1594):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1601="ufront.add"(%1599, %1600):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1602="ufront.concat"(%1598, %1601){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1603="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1604="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1605="ufront.multiply"(%1574, %1603):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1606="ufront.multiply"(%1575, %1604):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1607="ufront.subtract"(%1605, %1606):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1608="ufront.multiply"(%1574, %1604):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1609="ufront.multiply"(%1575, %1603):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1610="ufront.add"(%1608, %1609):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1611="ufront.concat"(%1607, %1610){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1612="ufront.concat"(%1584, %1593){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1613="ufront.concat"(%1602, %1611){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1614="ufront.detach"(%1613):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1615="ufront.detach"(%1567):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1616="ufront.transpose"(%1612){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1617="ufront.transpose"(%1613){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%1618="ufront.transpose"(%1567){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1619="ufront.struediv"(%1616){scalar=203.6467529817257}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1620="ufront.batch_matmul"(%1619, %1617):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%1621="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%1622="ufront.add"(%1620, %1621):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%1623="ufront.float"(%1622):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1624="ufront.smultiply"(%1623){scalar=18.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1625="ufront.softmax"(%1624):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1626="ufront.dropout"(%1625){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1627="ufront.batch_matmul"(%1626, %1618):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1628="ufront.transpose"(%1627){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%1629="ufront.reshape"(%1628){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%1630="ufront.parameter"(){dtype="Half", initializer="0x7f3108c5d010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%1631="ufront.parameter"(){dtype="Half", initializer="0x55f071ee8330", requires_grad=true}:() -> tensor<4096xf16>
	%1632="ufront.linear"(%1629, %1630, %1631){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1633="ufront.smultiply"(%1560){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1634="ufront.add"(%1633, %1632):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1635="ufront.parameter"(){dtype="Half", initializer="0x55f071eeed20", requires_grad=true}:() -> tensor<4096xf16>
	%1636="ufront.parameter"(){dtype="Half", initializer="0x55f071ef0d30", requires_grad=true}:() -> tensor<4096xf16>
	%1637="ufront.layer_norm"(%1634, %1635, %1636){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1638="ufront.parameter"(){dtype="Half", initializer="0x7f3090c4e010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%1639="ufront.parameter"(){dtype="Half", initializer="0x55f071efb740", requires_grad=true}:() -> tensor<16384xf16>
	%1640="ufront.linear"(%1637, %1638, %1639){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%1641="ufront.gelu"(%1640):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1642="ufront.dropout"(%1641){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1643="ufront.parameter"(){dtype="Half", initializer="0x7f3088c4d010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%1644="ufront.parameter"(){dtype="Half", initializer="0x55f071f03750", requires_grad=true}:() -> tensor<4096xf16>
	%1645="ufront.linear"(%1642, %1643, %1644){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1646="ufront.smultiply"(%1637){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1647="ufront.add"(%1646, %1645):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1648="ufront.parameter"(){dtype="Half", initializer="0x55f071f05760", requires_grad=true}:() -> tensor<4096xf16>
	%1649="ufront.parameter"(){dtype="Half", initializer="0x55f071f13770", requires_grad=true}:() -> tensor<4096xf16>
	%1650="ufront.layer_norm"(%1647, %1648, %1649){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1651="ufront.parameter"(){dtype="Half", initializer="0x7f307ac4b010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%1652="ufront.parameter"(){dtype="Half", initializer="0x55f071f1e320", requires_grad=true}:() -> tensor<12288xf16>
	%1653="ufront.linear"(%1650, %1651, %1652){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%1654="ufront.reshape"(%1653){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%1655, %1656, %1657="ufront.split"(%1654){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%1658, %1659, %1660, %1661="ufront.split"(%1655){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1662, %1663, %1664, %1665="ufront.split"(%1656){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1666="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1667="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1668="ufront.multiply"(%1658, %1666):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1669="ufront.multiply"(%1659, %1667):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1670="ufront.subtract"(%1668, %1669):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1671="ufront.multiply"(%1658, %1667):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1672="ufront.multiply"(%1659, %1666):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1673="ufront.add"(%1671, %1672):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1674="ufront.concat"(%1670, %1673){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1675="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1676="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1677="ufront.multiply"(%1660, %1675):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1678="ufront.multiply"(%1661, %1676):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1679="ufront.subtract"(%1677, %1678):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1680="ufront.multiply"(%1660, %1676):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1681="ufront.multiply"(%1661, %1675):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1682="ufront.add"(%1680, %1681):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1683="ufront.concat"(%1679, %1682){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1684="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1685="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1686="ufront.multiply"(%1662, %1684):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1687="ufront.multiply"(%1663, %1685):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1688="ufront.subtract"(%1686, %1687):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1689="ufront.multiply"(%1662, %1685):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1690="ufront.multiply"(%1663, %1684):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1691="ufront.add"(%1689, %1690):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1692="ufront.concat"(%1688, %1691){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1693="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1694="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1695="ufront.multiply"(%1664, %1693):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1696="ufront.multiply"(%1665, %1694):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1697="ufront.subtract"(%1695, %1696):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1698="ufront.multiply"(%1664, %1694):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1699="ufront.multiply"(%1665, %1693):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1700="ufront.add"(%1698, %1699):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1701="ufront.concat"(%1697, %1700){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1702="ufront.concat"(%1674, %1683){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1703="ufront.concat"(%1692, %1701){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1704="ufront.detach"(%1703):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1705="ufront.detach"(%1657):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1706="ufront.transpose"(%1702){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1707="ufront.transpose"(%1703){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%1708="ufront.transpose"(%1657){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1709="ufront.struediv"(%1706){scalar=214.96046148071045}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1710="ufront.batch_matmul"(%1709, %1707):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%1711="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%1712="ufront.add"(%1710, %1711):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%1713="ufront.float"(%1712):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1714="ufront.smultiply"(%1713){scalar=19.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1715="ufront.softmax"(%1714):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1716="ufront.dropout"(%1715){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1717="ufront.batch_matmul"(%1716, %1708):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1718="ufront.transpose"(%1717){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%1719="ufront.reshape"(%1718){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%1720="ufront.parameter"(){dtype="Half", initializer="0x7f30d4c56010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%1721="ufront.parameter"(){dtype="Half", initializer="0x55f071f44d90", requires_grad=true}:() -> tensor<4096xf16>
	%1722="ufront.linear"(%1719, %1720, %1721){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1723="ufront.smultiply"(%1650){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1724="ufront.add"(%1723, %1722):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1725="ufront.parameter"(){dtype="Half", initializer="0x55f071f4b780", requires_grad=true}:() -> tensor<4096xf16>
	%1726="ufront.parameter"(){dtype="Half", initializer="0x55f071f4d790", requires_grad=true}:() -> tensor<4096xf16>
	%1727="ufront.layer_norm"(%1724, %1725, %1726){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1728="ufront.parameter"(){dtype="Half", initializer="0x7f305cc47010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%1729="ufront.parameter"(){dtype="Half", initializer="0x55f071f581a0", requires_grad=true}:() -> tensor<16384xf16>
	%1730="ufront.linear"(%1727, %1728, %1729){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%1731="ufront.gelu"(%1730):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1732="ufront.dropout"(%1731){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1733="ufront.parameter"(){dtype="Half", initializer="0x7f3054c46010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%1734="ufront.parameter"(){dtype="Half", initializer="0x55f071f601b0", requires_grad=true}:() -> tensor<4096xf16>
	%1735="ufront.linear"(%1732, %1733, %1734){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1736="ufront.smultiply"(%1727){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1737="ufront.add"(%1736, %1735):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1738="ufront.parameter"(){dtype="Half", initializer="0x55f071f621c0", requires_grad=true}:() -> tensor<4096xf16>
	%1739="ufront.parameter"(){dtype="Half", initializer="0x55f071f701d0", requires_grad=true}:() -> tensor<4096xf16>
	%1740="ufront.layer_norm"(%1737, %1738, %1739){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1741="ufront.parameter"(){dtype="Half", initializer="0x7f3046c44010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%1742="ufront.parameter"(){dtype="Half", initializer="0x55f071f7a7c0", requires_grad=true}:() -> tensor<12288xf16>
	%1743="ufront.linear"(%1740, %1741, %1742){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%1744="ufront.reshape"(%1743){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%1745, %1746, %1747="ufront.split"(%1744){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%1748, %1749, %1750, %1751="ufront.split"(%1745){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1752, %1753, %1754, %1755="ufront.split"(%1746){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1756="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1757="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1758="ufront.multiply"(%1748, %1756):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1759="ufront.multiply"(%1749, %1757):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1760="ufront.subtract"(%1758, %1759):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1761="ufront.multiply"(%1748, %1757):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1762="ufront.multiply"(%1749, %1756):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1763="ufront.add"(%1761, %1762):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1764="ufront.concat"(%1760, %1763){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1765="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1766="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1767="ufront.multiply"(%1750, %1765):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1768="ufront.multiply"(%1751, %1766):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1769="ufront.subtract"(%1767, %1768):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1770="ufront.multiply"(%1750, %1766):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1771="ufront.multiply"(%1751, %1765):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1772="ufront.add"(%1770, %1771):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1773="ufront.concat"(%1769, %1772){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1774="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1775="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1776="ufront.multiply"(%1752, %1774):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1777="ufront.multiply"(%1753, %1775):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1778="ufront.subtract"(%1776, %1777):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1779="ufront.multiply"(%1752, %1775):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1780="ufront.multiply"(%1753, %1774):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1781="ufront.add"(%1779, %1780):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1782="ufront.concat"(%1778, %1781){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1783="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1784="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1785="ufront.multiply"(%1754, %1783):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1786="ufront.multiply"(%1755, %1784):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1787="ufront.subtract"(%1785, %1786):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1788="ufront.multiply"(%1754, %1784):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1789="ufront.multiply"(%1755, %1783):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1790="ufront.add"(%1788, %1789):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1791="ufront.concat"(%1787, %1790){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1792="ufront.concat"(%1764, %1773){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1793="ufront.concat"(%1782, %1791){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1794="ufront.detach"(%1793):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1795="ufront.detach"(%1747):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1796="ufront.transpose"(%1792){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1797="ufront.transpose"(%1793){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%1798="ufront.transpose"(%1747){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1799="ufront.struediv"(%1796){scalar=226.27416997969522}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1800="ufront.batch_matmul"(%1799, %1797):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%1801="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%1802="ufront.add"(%1800, %1801):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%1803="ufront.float"(%1802):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1804="ufront.smultiply"(%1803){scalar=20.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1805="ufront.softmax"(%1804):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1806="ufront.dropout"(%1805){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1807="ufront.batch_matmul"(%1806, %1798):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1808="ufront.transpose"(%1807){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%1809="ufront.reshape"(%1808){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%1810="ufront.parameter"(){dtype="Half", initializer="0x7f30a0c4f010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%1811="ufront.parameter"(){dtype="Half", initializer="0x55f071fa1710", requires_grad=true}:() -> tensor<4096xf16>
	%1812="ufront.linear"(%1809, %1810, %1811){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1813="ufront.smultiply"(%1740){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1814="ufront.add"(%1813, %1812):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1815="ufront.parameter"(){dtype="Half", initializer="0x55f071fa7f50", requires_grad=true}:() -> tensor<4096xf16>
	%1816="ufront.parameter"(){dtype="Half", initializer="0x55f071fa9f60", requires_grad=true}:() -> tensor<4096xf16>
	%1817="ufront.layer_norm"(%1814, %1815, %1816){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1818="ufront.parameter"(){dtype="Half", initializer="0x7f3028c40010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%1819="ufront.parameter"(){dtype="Half", initializer="0x55f071fb47c0", requires_grad=true}:() -> tensor<16384xf16>
	%1820="ufront.linear"(%1817, %1818, %1819){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%1821="ufront.gelu"(%1820):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1822="ufront.dropout"(%1821){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1823="ufront.parameter"(){dtype="Half", initializer="0x7f3020c3f010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%1824="ufront.parameter"(){dtype="Half", initializer="0x55f071fbc7d0", requires_grad=true}:() -> tensor<4096xf16>
	%1825="ufront.linear"(%1822, %1823, %1824){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1826="ufront.smultiply"(%1817){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1827="ufront.add"(%1826, %1825):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1828="ufront.parameter"(){dtype="Half", initializer="0x55f071fbe7e0", requires_grad=true}:() -> tensor<4096xf16>
	%1829="ufront.parameter"(){dtype="Half", initializer="0x55f071fcc7f0", requires_grad=true}:() -> tensor<4096xf16>
	%1830="ufront.layer_norm"(%1827, %1828, %1829){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1831="ufront.parameter"(){dtype="Half", initializer="0x7f3012c3d010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%1832="ufront.parameter"(){dtype="Half", initializer="0x55f071fd6b90", requires_grad=true}:() -> tensor<12288xf16>
	%1833="ufront.linear"(%1830, %1831, %1832){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%1834="ufront.reshape"(%1833){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%1835, %1836, %1837="ufront.split"(%1834){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%1838, %1839, %1840, %1841="ufront.split"(%1835){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1842, %1843, %1844, %1845="ufront.split"(%1836){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1846="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1847="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1848="ufront.multiply"(%1838, %1846):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1849="ufront.multiply"(%1839, %1847):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1850="ufront.subtract"(%1848, %1849):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1851="ufront.multiply"(%1838, %1847):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1852="ufront.multiply"(%1839, %1846):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1853="ufront.add"(%1851, %1852):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1854="ufront.concat"(%1850, %1853){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1855="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1856="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1857="ufront.multiply"(%1840, %1855):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1858="ufront.multiply"(%1841, %1856):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1859="ufront.subtract"(%1857, %1858):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1860="ufront.multiply"(%1840, %1856):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1861="ufront.multiply"(%1841, %1855):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1862="ufront.add"(%1860, %1861):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1863="ufront.concat"(%1859, %1862){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1864="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1865="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1866="ufront.multiply"(%1842, %1864):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1867="ufront.multiply"(%1843, %1865):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1868="ufront.subtract"(%1866, %1867):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1869="ufront.multiply"(%1842, %1865):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1870="ufront.multiply"(%1843, %1864):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1871="ufront.add"(%1869, %1870):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1872="ufront.concat"(%1868, %1871){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1873="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1874="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1875="ufront.multiply"(%1844, %1873):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1876="ufront.multiply"(%1845, %1874):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1877="ufront.subtract"(%1875, %1876):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1878="ufront.multiply"(%1844, %1874):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1879="ufront.multiply"(%1845, %1873):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1880="ufront.add"(%1878, %1879):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1881="ufront.concat"(%1877, %1880){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1882="ufront.concat"(%1854, %1863){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1883="ufront.concat"(%1872, %1881){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1884="ufront.detach"(%1883):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1885="ufront.detach"(%1837):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1886="ufront.transpose"(%1882){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1887="ufront.transpose"(%1883){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%1888="ufront.transpose"(%1837){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1889="ufront.struediv"(%1886){scalar=237.58787847867998}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1890="ufront.batch_matmul"(%1889, %1887):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%1891="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%1892="ufront.add"(%1890, %1891):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%1893="ufront.float"(%1892):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1894="ufront.smultiply"(%1893){scalar=21.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1895="ufront.softmax"(%1894):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1896="ufront.dropout"(%1895){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1897="ufront.batch_matmul"(%1896, %1888):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1898="ufront.transpose"(%1897){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%1899="ufront.reshape"(%1898){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%1900="ufront.parameter"(){dtype="Half", initializer="0x7f306cc48010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%1901="ufront.parameter"(){dtype="Half", initializer="0x55f071ffdbd0", requires_grad=true}:() -> tensor<4096xf16>
	%1902="ufront.linear"(%1899, %1900, %1901){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1903="ufront.smultiply"(%1830){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1904="ufront.add"(%1903, %1902):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1905="ufront.parameter"(){dtype="Half", initializer="0x55f0720045c0", requires_grad=true}:() -> tensor<4096xf16>
	%1906="ufront.parameter"(){dtype="Half", initializer="0x55f0720065d0", requires_grad=true}:() -> tensor<4096xf16>
	%1907="ufront.layer_norm"(%1904, %1905, %1906){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1908="ufront.parameter"(){dtype="Half", initializer="0x7f2ff4c39010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%1909="ufront.parameter"(){dtype="Half", initializer="0x55f072010e30", requires_grad=true}:() -> tensor<16384xf16>
	%1910="ufront.linear"(%1907, %1908, %1909){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%1911="ufront.gelu"(%1910):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1912="ufront.dropout"(%1911){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%1913="ufront.parameter"(){dtype="Half", initializer="0x7f2fecc38010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%1914="ufront.parameter"(){dtype="Half", initializer="0x55f072018e40", requires_grad=true}:() -> tensor<4096xf16>
	%1915="ufront.linear"(%1912, %1913, %1914){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1916="ufront.smultiply"(%1907){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1917="ufront.add"(%1916, %1915):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1918="ufront.parameter"(){dtype="Half", initializer="0x55f07201ae50", requires_grad=true}:() -> tensor<4096xf16>
	%1919="ufront.parameter"(){dtype="Half", initializer="0x55f072028e60", requires_grad=true}:() -> tensor<4096xf16>
	%1920="ufront.layer_norm"(%1917, %1918, %1919){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1921="ufront.parameter"(){dtype="Half", initializer="0x7f2fdec36010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%1922="ufront.parameter"(){dtype="Half", initializer="0x55f072032eb0", requires_grad=true}:() -> tensor<12288xf16>
	%1923="ufront.linear"(%1920, %1921, %1922){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%1924="ufront.reshape"(%1923){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%1925, %1926, %1927="ufront.split"(%1924){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%1928, %1929, %1930, %1931="ufront.split"(%1925){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1932, %1933, %1934, %1935="ufront.split"(%1926){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%1936="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1937="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1938="ufront.multiply"(%1928, %1936):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1939="ufront.multiply"(%1929, %1937):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1940="ufront.subtract"(%1938, %1939):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1941="ufront.multiply"(%1928, %1937):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1942="ufront.multiply"(%1929, %1936):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1943="ufront.add"(%1941, %1942):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1944="ufront.concat"(%1940, %1943){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1945="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1946="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1947="ufront.multiply"(%1930, %1945):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1948="ufront.multiply"(%1931, %1946):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1949="ufront.subtract"(%1947, %1948):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1950="ufront.multiply"(%1930, %1946):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1951="ufront.multiply"(%1931, %1945):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1952="ufront.add"(%1950, %1951):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1953="ufront.concat"(%1949, %1952){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1954="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1955="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1956="ufront.multiply"(%1932, %1954):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1957="ufront.multiply"(%1933, %1955):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1958="ufront.subtract"(%1956, %1957):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1959="ufront.multiply"(%1932, %1955):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1960="ufront.multiply"(%1933, %1954):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1961="ufront.add"(%1959, %1960):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1962="ufront.concat"(%1958, %1961){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1963="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1964="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%1965="ufront.multiply"(%1934, %1963):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1966="ufront.multiply"(%1935, %1964):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1967="ufront.subtract"(%1965, %1966):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1968="ufront.multiply"(%1934, %1964):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1969="ufront.multiply"(%1935, %1963):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%1970="ufront.add"(%1968, %1969):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%1971="ufront.concat"(%1967, %1970){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%1972="ufront.concat"(%1944, %1953){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1973="ufront.concat"(%1962, %1971){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%1974="ufront.detach"(%1973):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1975="ufront.detach"(%1927):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%1976="ufront.transpose"(%1972){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1977="ufront.transpose"(%1973){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%1978="ufront.transpose"(%1927){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%1979="ufront.struediv"(%1976){scalar=248.90158697766475}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1980="ufront.batch_matmul"(%1979, %1977):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%1981="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%1982="ufront.add"(%1980, %1981):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%1983="ufront.float"(%1982):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1984="ufront.smultiply"(%1983){scalar=22.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1985="ufront.softmax"(%1984):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1986="ufront.dropout"(%1985){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%1987="ufront.batch_matmul"(%1986, %1978):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%1988="ufront.transpose"(%1987){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%1989="ufront.reshape"(%1988){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%1990="ufront.parameter"(){dtype="Half", initializer="0x7f3038c41010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%1991="ufront.parameter"(){dtype="Half", initializer="0x55f072059e40", requires_grad=true}:() -> tensor<4096xf16>
	%1992="ufront.linear"(%1989, %1990, %1991){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1993="ufront.smultiply"(%1920){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1994="ufront.add"(%1993, %1992):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%1995="ufront.parameter"(){dtype="Half", initializer="0x55f072060830", requires_grad=true}:() -> tensor<4096xf16>
	%1996="ufront.parameter"(){dtype="Half", initializer="0x55f072062840", requires_grad=true}:() -> tensor<4096xf16>
	%1997="ufront.layer_norm"(%1994, %1995, %1996){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%1998="ufront.parameter"(){dtype="Half", initializer="0x7f2fc0c32010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%1999="ufront.parameter"(){dtype="Half", initializer="0x55f07206d250", requires_grad=true}:() -> tensor<16384xf16>
	%2000="ufront.linear"(%1997, %1998, %1999){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%2001="ufront.gelu"(%2000):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2002="ufront.dropout"(%2001){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2003="ufront.parameter"(){dtype="Half", initializer="0x7f2fb8c31010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%2004="ufront.parameter"(){dtype="Half", initializer="0x55f072075260", requires_grad=true}:() -> tensor<4096xf16>
	%2005="ufront.linear"(%2002, %2003, %2004){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2006="ufront.smultiply"(%1997){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2007="ufront.add"(%2006, %2005):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2008="ufront.parameter"(){dtype="Half", initializer="0x55f072077270", requires_grad=true}:() -> tensor<4096xf16>
	%2009="ufront.parameter"(){dtype="Half", initializer="0x55f072085280", requires_grad=true}:() -> tensor<4096xf16>
	%2010="ufront.layer_norm"(%2007, %2008, %2009){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2011="ufront.parameter"(){dtype="Half", initializer="0x7f2faac2f010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%2012="ufront.parameter"(){dtype="Half", initializer="0x55f07208f2d0", requires_grad=true}:() -> tensor<12288xf16>
	%2013="ufront.linear"(%2010, %2011, %2012){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%2014="ufront.reshape"(%2013){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%2015, %2016, %2017="ufront.split"(%2014){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%2018, %2019, %2020, %2021="ufront.split"(%2015){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%2022, %2023, %2024, %2025="ufront.split"(%2016){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%2026="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2027="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2028="ufront.multiply"(%2018, %2026):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2029="ufront.multiply"(%2019, %2027):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2030="ufront.subtract"(%2028, %2029):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2031="ufront.multiply"(%2018, %2027):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2032="ufront.multiply"(%2019, %2026):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2033="ufront.add"(%2031, %2032):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2034="ufront.concat"(%2030, %2033){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2035="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2036="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2037="ufront.multiply"(%2020, %2035):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2038="ufront.multiply"(%2021, %2036):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2039="ufront.subtract"(%2037, %2038):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2040="ufront.multiply"(%2020, %2036):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2041="ufront.multiply"(%2021, %2035):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2042="ufront.add"(%2040, %2041):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2043="ufront.concat"(%2039, %2042){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2044="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2045="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2046="ufront.multiply"(%2022, %2044):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2047="ufront.multiply"(%2023, %2045):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2048="ufront.subtract"(%2046, %2047):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2049="ufront.multiply"(%2022, %2045):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2050="ufront.multiply"(%2023, %2044):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2051="ufront.add"(%2049, %2050):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2052="ufront.concat"(%2048, %2051){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2053="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2054="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2055="ufront.multiply"(%2024, %2053):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2056="ufront.multiply"(%2025, %2054):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2057="ufront.subtract"(%2055, %2056):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2058="ufront.multiply"(%2024, %2054):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2059="ufront.multiply"(%2025, %2053):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2060="ufront.add"(%2058, %2059):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2061="ufront.concat"(%2057, %2060){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2062="ufront.concat"(%2034, %2043){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%2063="ufront.concat"(%2052, %2061){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%2064="ufront.detach"(%2063):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%2065="ufront.detach"(%2017):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%2066="ufront.transpose"(%2062){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%2067="ufront.transpose"(%2063){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%2068="ufront.transpose"(%2017){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%2069="ufront.struediv"(%2066){scalar=260.2152954766495}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%2070="ufront.batch_matmul"(%2069, %2067):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%2071="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%2072="ufront.add"(%2070, %2071):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%2073="ufront.float"(%2072):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2074="ufront.smultiply"(%2073){scalar=23.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2075="ufront.softmax"(%2074):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2076="ufront.dropout"(%2075){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2077="ufront.batch_matmul"(%2076, %2068):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%2078="ufront.transpose"(%2077){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%2079="ufront.reshape"(%2078){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%2080="ufront.parameter"(){dtype="Half", initializer="0x7f3004c3a010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%2081="ufront.parameter"(){dtype="Half", initializer="0x55f0720b6460", requires_grad=true}:() -> tensor<4096xf16>
	%2082="ufront.linear"(%2079, %2080, %2081){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2083="ufront.smultiply"(%2010){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2084="ufront.add"(%2083, %2082):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2085="ufront.parameter"(){dtype="Half", initializer="0x55f0720bcca0", requires_grad=true}:() -> tensor<4096xf16>
	%2086="ufront.parameter"(){dtype="Half", initializer="0x55f0720becb0", requires_grad=true}:() -> tensor<4096xf16>
	%2087="ufront.layer_norm"(%2084, %2085, %2086){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2088="ufront.parameter"(){dtype="Half", initializer="0x7f2f8cc2b010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%2089="ufront.parameter"(){dtype="Half", initializer="0x55f0720c9510", requires_grad=true}:() -> tensor<16384xf16>
	%2090="ufront.linear"(%2087, %2088, %2089){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%2091="ufront.gelu"(%2090):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2092="ufront.dropout"(%2091){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2093="ufront.parameter"(){dtype="Half", initializer="0x7f2f84c2a010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%2094="ufront.parameter"(){dtype="Half", initializer="0x55f0720d1520", requires_grad=true}:() -> tensor<4096xf16>
	%2095="ufront.linear"(%2092, %2093, %2094){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2096="ufront.smultiply"(%2087){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2097="ufront.add"(%2096, %2095):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2098="ufront.parameter"(){dtype="Half", initializer="0x55f0720d3530", requires_grad=true}:() -> tensor<4096xf16>
	%2099="ufront.parameter"(){dtype="Half", initializer="0x55f0720e1540", requires_grad=true}:() -> tensor<4096xf16>
	%2100="ufront.layer_norm"(%2097, %2098, %2099){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2101="ufront.parameter"(){dtype="Half", initializer="0x7f2f76c28010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%2102="ufront.parameter"(){dtype="Half", initializer="0x55f0720ebf80", requires_grad=true}:() -> tensor<12288xf16>
	%2103="ufront.linear"(%2100, %2101, %2102){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%2104="ufront.reshape"(%2103){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%2105, %2106, %2107="ufront.split"(%2104){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%2108, %2109, %2110, %2111="ufront.split"(%2105){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%2112, %2113, %2114, %2115="ufront.split"(%2106){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%2116="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2117="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2118="ufront.multiply"(%2108, %2116):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2119="ufront.multiply"(%2109, %2117):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2120="ufront.subtract"(%2118, %2119):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2121="ufront.multiply"(%2108, %2117):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2122="ufront.multiply"(%2109, %2116):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2123="ufront.add"(%2121, %2122):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2124="ufront.concat"(%2120, %2123){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2125="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2126="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2127="ufront.multiply"(%2110, %2125):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2128="ufront.multiply"(%2111, %2126):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2129="ufront.subtract"(%2127, %2128):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2130="ufront.multiply"(%2110, %2126):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2131="ufront.multiply"(%2111, %2125):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2132="ufront.add"(%2130, %2131):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2133="ufront.concat"(%2129, %2132){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2134="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2135="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2136="ufront.multiply"(%2112, %2134):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2137="ufront.multiply"(%2113, %2135):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2138="ufront.subtract"(%2136, %2137):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2139="ufront.multiply"(%2112, %2135):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2140="ufront.multiply"(%2113, %2134):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2141="ufront.add"(%2139, %2140):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2142="ufront.concat"(%2138, %2141){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2143="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2144="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2145="ufront.multiply"(%2114, %2143):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2146="ufront.multiply"(%2115, %2144):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2147="ufront.subtract"(%2145, %2146):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2148="ufront.multiply"(%2114, %2144):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2149="ufront.multiply"(%2115, %2143):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2150="ufront.add"(%2148, %2149):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2151="ufront.concat"(%2147, %2150){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2152="ufront.concat"(%2124, %2133){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%2153="ufront.concat"(%2142, %2151){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%2154="ufront.detach"(%2153):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%2155="ufront.detach"(%2107):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%2156="ufront.transpose"(%2152){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%2157="ufront.transpose"(%2153){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%2158="ufront.transpose"(%2107){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%2159="ufront.struediv"(%2156){scalar=271.5290039756343}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%2160="ufront.batch_matmul"(%2159, %2157):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%2161="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%2162="ufront.add"(%2160, %2161):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%2163="ufront.float"(%2162):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2164="ufront.smultiply"(%2163){scalar=24.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2165="ufront.softmax"(%2164):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2166="ufront.dropout"(%2165){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2167="ufront.batch_matmul"(%2166, %2158):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%2168="ufront.transpose"(%2167){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%2169="ufront.reshape"(%2168){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%2170="ufront.parameter"(){dtype="Half", initializer="0x7f2fd0c33010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%2171="ufront.parameter"(){dtype="Half", initializer="0x55f072307660", requires_grad=true}:() -> tensor<4096xf16>
	%2172="ufront.linear"(%2169, %2170, %2171){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2173="ufront.smultiply"(%2100){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2174="ufront.add"(%2173, %2172):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2175="ufront.parameter"(){dtype="Half", initializer="0x55f07230dea0", requires_grad=true}:() -> tensor<4096xf16>
	%2176="ufront.parameter"(){dtype="Half", initializer="0x55f07230feb0", requires_grad=true}:() -> tensor<4096xf16>
	%2177="ufront.layer_norm"(%2174, %2175, %2176){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2178="ufront.parameter"(){dtype="Half", initializer="0x7f2f58c24010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%2179="ufront.parameter"(){dtype="Half", initializer="0x55f07231a710", requires_grad=true}:() -> tensor<16384xf16>
	%2180="ufront.linear"(%2177, %2178, %2179){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%2181="ufront.gelu"(%2180):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2182="ufront.dropout"(%2181){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2183="ufront.parameter"(){dtype="Half", initializer="0x7f2f50c23010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%2184="ufront.parameter"(){dtype="Half", initializer="0x55f072322720", requires_grad=true}:() -> tensor<4096xf16>
	%2185="ufront.linear"(%2182, %2183, %2184){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2186="ufront.smultiply"(%2177){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2187="ufront.add"(%2186, %2185):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2188="ufront.parameter"(){dtype="Half", initializer="0x55f072324730", requires_grad=true}:() -> tensor<4096xf16>
	%2189="ufront.parameter"(){dtype="Half", initializer="0x55f072332740", requires_grad=true}:() -> tensor<4096xf16>
	%2190="ufront.layer_norm"(%2187, %2188, %2189){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2191="ufront.parameter"(){dtype="Half", initializer="0x7f2f42c21010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%2192="ufront.parameter"(){dtype="Half", initializer="0x55f07233cfa0", requires_grad=true}:() -> tensor<12288xf16>
	%2193="ufront.linear"(%2190, %2191, %2192){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%2194="ufront.reshape"(%2193){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%2195, %2196, %2197="ufront.split"(%2194){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%2198, %2199, %2200, %2201="ufront.split"(%2195){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%2202, %2203, %2204, %2205="ufront.split"(%2196){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%2206="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2207="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2208="ufront.multiply"(%2198, %2206):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2209="ufront.multiply"(%2199, %2207):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2210="ufront.subtract"(%2208, %2209):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2211="ufront.multiply"(%2198, %2207):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2212="ufront.multiply"(%2199, %2206):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2213="ufront.add"(%2211, %2212):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2214="ufront.concat"(%2210, %2213){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2215="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2216="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2217="ufront.multiply"(%2200, %2215):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2218="ufront.multiply"(%2201, %2216):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2219="ufront.subtract"(%2217, %2218):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2220="ufront.multiply"(%2200, %2216):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2221="ufront.multiply"(%2201, %2215):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2222="ufront.add"(%2220, %2221):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2223="ufront.concat"(%2219, %2222){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2224="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2225="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2226="ufront.multiply"(%2202, %2224):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2227="ufront.multiply"(%2203, %2225):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2228="ufront.subtract"(%2226, %2227):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2229="ufront.multiply"(%2202, %2225):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2230="ufront.multiply"(%2203, %2224):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2231="ufront.add"(%2229, %2230):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2232="ufront.concat"(%2228, %2231){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2233="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2234="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2235="ufront.multiply"(%2204, %2233):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2236="ufront.multiply"(%2205, %2234):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2237="ufront.subtract"(%2235, %2236):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2238="ufront.multiply"(%2204, %2234):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2239="ufront.multiply"(%2205, %2233):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2240="ufront.add"(%2238, %2239):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2241="ufront.concat"(%2237, %2240){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2242="ufront.concat"(%2214, %2223){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%2243="ufront.concat"(%2232, %2241){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%2244="ufront.detach"(%2243):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%2245="ufront.detach"(%2197):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%2246="ufront.transpose"(%2242){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%2247="ufront.transpose"(%2243){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%2248="ufront.transpose"(%2197){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%2249="ufront.struediv"(%2246){scalar=282.842712474619}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%2250="ufront.batch_matmul"(%2249, %2247):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%2251="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%2252="ufront.add"(%2250, %2251):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%2253="ufront.float"(%2252):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2254="ufront.smultiply"(%2253){scalar=25.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2255="ufront.softmax"(%2254):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2256="ufront.dropout"(%2255){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2257="ufront.batch_matmul"(%2256, %2248):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%2258="ufront.transpose"(%2257){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%2259="ufront.reshape"(%2258){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%2260="ufront.parameter"(){dtype="Half", initializer="0x7f2f9cc2c010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%2261="ufront.parameter"(){dtype="Half", initializer="0x55f072367860", requires_grad=true}:() -> tensor<4096xf16>
	%2262="ufront.linear"(%2259, %2260, %2261){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2263="ufront.smultiply"(%2190){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2264="ufront.add"(%2263, %2262):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2265="ufront.parameter"(){dtype="Half", initializer="0x55f07236e250", requires_grad=true}:() -> tensor<4096xf16>
	%2266="ufront.parameter"(){dtype="Half", initializer="0x55f072370260", requires_grad=true}:() -> tensor<4096xf16>
	%2267="ufront.layer_norm"(%2264, %2265, %2266){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2268="ufront.parameter"(){dtype="Half", initializer="0x7f2f24c1d010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%2269="ufront.parameter"(){dtype="Half", initializer="0x55f07237ac70", requires_grad=true}:() -> tensor<16384xf16>
	%2270="ufront.linear"(%2267, %2268, %2269){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%2271="ufront.gelu"(%2270):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2272="ufront.dropout"(%2271){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2273="ufront.parameter"(){dtype="Half", initializer="0x7f2f1cc1c010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%2274="ufront.parameter"(){dtype="Half", initializer="0x55f072382c80", requires_grad=true}:() -> tensor<4096xf16>
	%2275="ufront.linear"(%2272, %2273, %2274){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2276="ufront.smultiply"(%2267){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2277="ufront.add"(%2276, %2275):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2278="ufront.parameter"(){dtype="Half", initializer="0x55f072384c90", requires_grad=true}:() -> tensor<4096xf16>
	%2279="ufront.parameter"(){dtype="Half", initializer="0x55f072392ca0", requires_grad=true}:() -> tensor<4096xf16>
	%2280="ufront.layer_norm"(%2277, %2278, %2279){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2281="ufront.parameter"(){dtype="Half", initializer="0x7f2f0ec1a010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%2282="ufront.parameter"(){dtype="Half", initializer="0x55f07239d500", requires_grad=true}:() -> tensor<12288xf16>
	%2283="ufront.linear"(%2280, %2281, %2282){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%2284="ufront.reshape"(%2283){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%2285, %2286, %2287="ufront.split"(%2284){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%2288, %2289, %2290, %2291="ufront.split"(%2285){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%2292, %2293, %2294, %2295="ufront.split"(%2286){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%2296="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2297="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2298="ufront.multiply"(%2288, %2296):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2299="ufront.multiply"(%2289, %2297):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2300="ufront.subtract"(%2298, %2299):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2301="ufront.multiply"(%2288, %2297):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2302="ufront.multiply"(%2289, %2296):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2303="ufront.add"(%2301, %2302):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2304="ufront.concat"(%2300, %2303){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2305="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2306="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2307="ufront.multiply"(%2290, %2305):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2308="ufront.multiply"(%2291, %2306):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2309="ufront.subtract"(%2307, %2308):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2310="ufront.multiply"(%2290, %2306):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2311="ufront.multiply"(%2291, %2305):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2312="ufront.add"(%2310, %2311):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2313="ufront.concat"(%2309, %2312){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2314="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2315="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2316="ufront.multiply"(%2292, %2314):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2317="ufront.multiply"(%2293, %2315):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2318="ufront.subtract"(%2316, %2317):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2319="ufront.multiply"(%2292, %2315):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2320="ufront.multiply"(%2293, %2314):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2321="ufront.add"(%2319, %2320):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2322="ufront.concat"(%2318, %2321){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2323="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2324="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2325="ufront.multiply"(%2294, %2323):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2326="ufront.multiply"(%2295, %2324):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2327="ufront.subtract"(%2325, %2326):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2328="ufront.multiply"(%2294, %2324):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2329="ufront.multiply"(%2295, %2323):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2330="ufront.add"(%2328, %2329):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2331="ufront.concat"(%2327, %2330){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2332="ufront.concat"(%2304, %2313){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%2333="ufront.concat"(%2322, %2331){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%2334="ufront.detach"(%2333):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%2335="ufront.detach"(%2287):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%2336="ufront.transpose"(%2332){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%2337="ufront.transpose"(%2333){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%2338="ufront.transpose"(%2287){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%2339="ufront.struediv"(%2336){scalar=294.1564209736038}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%2340="ufront.batch_matmul"(%2339, %2337):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%2341="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%2342="ufront.add"(%2340, %2341):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%2343="ufront.float"(%2342):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2344="ufront.smultiply"(%2343){scalar=26.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2345="ufront.softmax"(%2344):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2346="ufront.dropout"(%2345){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2347="ufront.batch_matmul"(%2346, %2338):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%2348="ufront.transpose"(%2347){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%2349="ufront.reshape"(%2348){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%2350="ufront.parameter"(){dtype="Half", initializer="0x7f2f68c25010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%2351="ufront.parameter"(){dtype="Half", initializer="0x55f0723c4490", requires_grad=true}:() -> tensor<4096xf16>
	%2352="ufront.linear"(%2349, %2350, %2351){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2353="ufront.smultiply"(%2280){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2354="ufront.add"(%2353, %2352):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2355="ufront.parameter"(){dtype="Half", initializer="0x55f0723cacd0", requires_grad=true}:() -> tensor<4096xf16>
	%2356="ufront.parameter"(){dtype="Half", initializer="0x55f0723ccce0", requires_grad=true}:() -> tensor<4096xf16>
	%2357="ufront.layer_norm"(%2354, %2355, %2356){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2358="ufront.parameter"(){dtype="Half", initializer="0x7f2ef0c16010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%2359="ufront.parameter"(){dtype="Half", initializer="0x55f0723d76f0", requires_grad=true}:() -> tensor<16384xf16>
	%2360="ufront.linear"(%2357, %2358, %2359){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%2361="ufront.gelu"(%2360):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2362="ufront.dropout"(%2361){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2363="ufront.parameter"(){dtype="Half", initializer="0x7f2ee8c15010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%2364="ufront.parameter"(){dtype="Half", initializer="0x55f0723df700", requires_grad=true}:() -> tensor<4096xf16>
	%2365="ufront.linear"(%2362, %2363, %2364){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2366="ufront.smultiply"(%2357){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2367="ufront.add"(%2366, %2365):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2368="ufront.parameter"(){dtype="Half", initializer="0x55f0723e1710", requires_grad=true}:() -> tensor<4096xf16>
	%2369="ufront.parameter"(){dtype="Half", initializer="0x55f0723ef720", requires_grad=true}:() -> tensor<4096xf16>
	%2370="ufront.layer_norm"(%2367, %2368, %2369){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2371="ufront.parameter"(){dtype="Half", initializer="0x7f2edac13010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%2372="ufront.parameter"(){dtype="Half", initializer="0x55f0723f9980", requires_grad=true}:() -> tensor<12288xf16>
	%2373="ufront.linear"(%2370, %2371, %2372){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%2374="ufront.reshape"(%2373){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%2375, %2376, %2377="ufront.split"(%2374){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%2378, %2379, %2380, %2381="ufront.split"(%2375){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%2382, %2383, %2384, %2385="ufront.split"(%2376){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%2386="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2387="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2388="ufront.multiply"(%2378, %2386):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2389="ufront.multiply"(%2379, %2387):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2390="ufront.subtract"(%2388, %2389):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2391="ufront.multiply"(%2378, %2387):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2392="ufront.multiply"(%2379, %2386):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2393="ufront.add"(%2391, %2392):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2394="ufront.concat"(%2390, %2393){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2395="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2396="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2397="ufront.multiply"(%2380, %2395):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2398="ufront.multiply"(%2381, %2396):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2399="ufront.subtract"(%2397, %2398):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2400="ufront.multiply"(%2380, %2396):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2401="ufront.multiply"(%2381, %2395):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2402="ufront.add"(%2400, %2401):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2403="ufront.concat"(%2399, %2402){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2404="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2405="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2406="ufront.multiply"(%2382, %2404):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2407="ufront.multiply"(%2383, %2405):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2408="ufront.subtract"(%2406, %2407):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2409="ufront.multiply"(%2382, %2405):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2410="ufront.multiply"(%2383, %2404):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2411="ufront.add"(%2409, %2410):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2412="ufront.concat"(%2408, %2411){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2413="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2414="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2415="ufront.multiply"(%2384, %2413):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2416="ufront.multiply"(%2385, %2414):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2417="ufront.subtract"(%2415, %2416):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2418="ufront.multiply"(%2384, %2414):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2419="ufront.multiply"(%2385, %2413):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2420="ufront.add"(%2418, %2419):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2421="ufront.concat"(%2417, %2420){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2422="ufront.concat"(%2394, %2403){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%2423="ufront.concat"(%2412, %2421){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%2424="ufront.detach"(%2423):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%2425="ufront.detach"(%2377):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%2426="ufront.transpose"(%2422){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%2427="ufront.transpose"(%2423){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%2428="ufront.transpose"(%2377){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%2429="ufront.struediv"(%2426){scalar=305.47012947258855}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%2430="ufront.batch_matmul"(%2429, %2427):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%2431="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%2432="ufront.add"(%2430, %2431):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%2433="ufront.float"(%2432):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2434="ufront.smultiply"(%2433){scalar=27.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2435="ufront.softmax"(%2434):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2436="ufront.dropout"(%2435){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2437="ufront.batch_matmul"(%2436, %2428):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%2438="ufront.transpose"(%2437){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%2439="ufront.reshape"(%2438){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%2440="ufront.parameter"(){dtype="Half", initializer="0x7f2f34c1e010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%2441="ufront.parameter"(){dtype="Half", initializer="0x55f072420630", requires_grad=true}:() -> tensor<4096xf16>
	%2442="ufront.linear"(%2439, %2440, %2441){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2443="ufront.smultiply"(%2370){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2444="ufront.add"(%2443, %2442):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2445="ufront.parameter"(){dtype="Half", initializer="0x55f072427020", requires_grad=true}:() -> tensor<4096xf16>
	%2446="ufront.parameter"(){dtype="Half", initializer="0x55f072429030", requires_grad=true}:() -> tensor<4096xf16>
	%2447="ufront.layer_norm"(%2444, %2445, %2446){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2448="ufront.parameter"(){dtype="Half", initializer="0x7f2ebcc0f010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%2449="ufront.parameter"(){dtype="Half", initializer="0x55f072433890", requires_grad=true}:() -> tensor<16384xf16>
	%2450="ufront.linear"(%2447, %2448, %2449){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%2451="ufront.gelu"(%2450):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2452="ufront.dropout"(%2451){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2453="ufront.parameter"(){dtype="Half", initializer="0x7f2eb4c0e010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%2454="ufront.parameter"(){dtype="Half", initializer="0x55f07243b8a0", requires_grad=true}:() -> tensor<4096xf16>
	%2455="ufront.linear"(%2452, %2453, %2454){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2456="ufront.smultiply"(%2447){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2457="ufront.add"(%2456, %2455):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2458="ufront.parameter"(){dtype="Half", initializer="0x55f07243d8b0", requires_grad=true}:() -> tensor<4096xf16>
	%2459="ufront.parameter"(){dtype="Half", initializer="0x55f07244b8c0", requires_grad=true}:() -> tensor<4096xf16>
	%2460="ufront.layer_norm"(%2457, %2458, %2459){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2461="ufront.parameter"(){dtype="Half", initializer="0x7f2ea6c0c010", requires_grad=true}:() -> tensor<12288x4096xf16>
	%2462="ufront.parameter"(){dtype="Half", initializer="0x55f072455910", requires_grad=true}:() -> tensor<12288xf16>
	%2463="ufront.linear"(%2460, %2461, %2462){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<12288x4096xf16>, tensor<12288xf16>) -> tensor<1x22x12288xf32>
	%2464="ufront.reshape"(%2463){shape=[1, 22, 32, 384]}:(tensor<1x22x12288xf32>) -> tensor<1x22x32x384xf32>
	%2465, %2466, %2467="ufront.split"(%2464){axis=-1, sizes=128}:(tensor<1x22x32x384xf32>) -> (tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>, tensor<1x22x32x128xf32>)
	%2468, %2469, %2470, %2471="ufront.split"(%2465){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%2472, %2473, %2474, %2475="ufront.split"(%2466){axis=-1, sizes=32}:(tensor<1x22x32x128xf32>) -> (tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>)
	%2476="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2477="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2478="ufront.multiply"(%2468, %2476):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2479="ufront.multiply"(%2469, %2477):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2480="ufront.subtract"(%2478, %2479):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2481="ufront.multiply"(%2468, %2477):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2482="ufront.multiply"(%2469, %2476):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2483="ufront.add"(%2481, %2482):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2484="ufront.concat"(%2480, %2483){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2485="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2486="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2487="ufront.multiply"(%2470, %2485):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2488="ufront.multiply"(%2471, %2486):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2489="ufront.subtract"(%2487, %2488):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2490="ufront.multiply"(%2470, %2486):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2491="ufront.multiply"(%2471, %2485):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2492="ufront.add"(%2490, %2491):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2493="ufront.concat"(%2489, %2492){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2494="ufront.slice"(%9){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2495="ufront.slice"(%11){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2496="ufront.multiply"(%2472, %2494):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2497="ufront.multiply"(%2473, %2495):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2498="ufront.subtract"(%2496, %2497):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2499="ufront.multiply"(%2472, %2495):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2500="ufront.multiply"(%2473, %2494):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2501="ufront.add"(%2499, %2500):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2502="ufront.concat"(%2498, %2501){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2503="ufront.slice"(%13){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2504="ufront.slice"(%15){output_shape=[1, 22, 1, 32], slices=[["None", "None", "None"], slice(None, None, None)]}:(tensor<1x22x32xf32>) -> tensor<1x22x1x32xf32>
	%2505="ufront.multiply"(%2474, %2503):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2506="ufront.multiply"(%2475, %2504):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2507="ufront.subtract"(%2505, %2506):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2508="ufront.multiply"(%2474, %2504):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2509="ufront.multiply"(%2475, %2503):(tensor<1x22x32x32xf32>, tensor<1x22x1x32xf32>) -> tensor<1x22x32x32xf32>
	%2510="ufront.add"(%2508, %2509):(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x32xf32>
	%2511="ufront.concat"(%2507, %2510){axis=-1}:(tensor<1x22x32x32xf32>, tensor<1x22x32x32xf32>) -> tensor<1x22x32x64xf32>
	%2512="ufront.concat"(%2484, %2493){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%2513="ufront.concat"(%2502, %2511){axis=-1}:(tensor<1x22x32x64xf32>, tensor<1x22x32x64xf32>) -> tensor<1x22x32x128xf32>
	%2514="ufront.detach"(%2513):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%2515="ufront.detach"(%2467):(tensor<1x22x32x128xf32>) -> tensor<1x22x32x128xf32>
	%2516="ufront.transpose"(%2512){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%2517="ufront.transpose"(%2513){perms=[0, 2, 3, 1]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x128x22xf32>
	%2518="ufront.transpose"(%2467){perms=[0, 2, 1, 3]}:(tensor<1x22x32x128xf32>) -> tensor<1x32x22x128xf32>
	%2519="ufront.struediv"(%2516){scalar=316.7838379715733}:(tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%2520="ufront.batch_matmul"(%2519, %2517):(tensor<1x32x22x128xf32>, tensor<1x32x128x22xf32>) -> tensor<1x32x22x22xf32>
	%2521="ufront.slice"(%26){output_shape=[1, 1, 22, 1], slices=[["None", "None", "None"], "None"]}:(tensor<1x22x1xbool>) -> tensor<1x1x22x1xbool>
	%2522="ufront.add"(%2520, %2521):(tensor<1x32x22x22xf32>, tensor<1x1x22x1xbool>) -> tensor<1x32x22x22xf32>
	%2523="ufront.float"(%2522):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2524="ufront.smultiply"(%2523){scalar=28.0}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2525="ufront.softmax"(%2524):(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2526="ufront.dropout"(%2525){rate=0.0, seed=0, training=true}:(tensor<1x32x22x22xf32>) -> tensor<1x32x22x22xf32>
	%2527="ufront.batch_matmul"(%2526, %2518):(tensor<1x32x22x22xf32>, tensor<1x32x22x128xf32>) -> tensor<1x32x22x128xf32>
	%2528="ufront.transpose"(%2527){perms=[0, 2, 1, 3]}:(tensor<1x32x22x128xf32>) -> tensor<1x22x32x128xf32>
	%2529="ufront.reshape"(%2528){shape=[1, 22, 4096]}:(tensor<1x22x32x128xf32>) -> tensor<1x22x4096xf32>
	%2530="ufront.parameter"(){dtype="Half", initializer="0x7f2f00c17010", requires_grad=true}:() -> tensor<4096x4096xf16>
	%2531="ufront.parameter"(){dtype="Half", initializer="0x55f07247c4b0", requires_grad=true}:() -> tensor<4096xf16>
	%2532="ufront.linear"(%2529, %2530, %2531){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096x4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2533="ufront.smultiply"(%2460){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2534="ufront.add"(%2533, %2532):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2535="ufront.parameter"(){dtype="Half", initializer="0x55f072482cf0", requires_grad=true}:() -> tensor<4096xf16>
	%2536="ufront.parameter"(){dtype="Half", initializer="0x55f072484d00", requires_grad=true}:() -> tensor<4096xf16>
	%2537="ufront.layer_norm"(%2534, %2535, %2536){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2538="ufront.parameter"(){dtype="Half", initializer="0x7f2e88c08010", requires_grad=true}:() -> tensor<16384x4096xf16>
	%2539="ufront.parameter"(){dtype="Half", initializer="0x55f07248f560", requires_grad=true}:() -> tensor<16384xf16>
	%2540="ufront.linear"(%2537, %2538, %2539){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<16384x4096xf16>, tensor<16384xf16>) -> tensor<1x22x16384xf32>
	%2541="ufront.gelu"(%2540):(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2542="ufront.dropout"(%2541){rate=0.0, seed=0, training=true}:(tensor<1x22x16384xf32>) -> tensor<1x22x16384xf32>
	%2543="ufront.parameter"(){dtype="Half", initializer="0x7f2e80c07010", requires_grad=true}:() -> tensor<4096x16384xf16>
	%2544="ufront.parameter"(){dtype="Half", initializer="0x55f072497570", requires_grad=true}:() -> tensor<4096xf16>
	%2545="ufront.linear"(%2542, %2543, %2544){operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x16384xf32>, tensor<4096x16384xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2546="ufront.smultiply"(%2537){scalar=7.483314773547883}:(tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2547="ufront.add"(%2546, %2545):(tensor<1x22x4096xf32>, tensor<1x22x4096xf32>) -> tensor<1x22x4096xf32>
	%2548="ufront.parameter"(){dtype="Half", initializer="0x55f072499580", requires_grad=true}:() -> tensor<4096xf16>
	%2549="ufront.parameter"(){dtype="Half", initializer="0x55f0724a7590", requires_grad=true}:() -> tensor<4096xf16>
	%2550="ufront.layer_norm"(%2547, %2548, %2549){elementwise_affine=true, eps=0.00001, normalized_shape=[4096], operand_segment_sizes=array<i32:1, 1, 1>}:(tensor<1x22x4096xf32>, tensor<4096xf16>, tensor<4096xf16>) -> tensor<1x22x4096xf32>
	%2551="ufront.parameter"(){dtype="Half", initializer="0x7f2e29043010", requires_grad=true}:() -> tensor<130528x4096xf16>
	%2552="ufront.linear"(%2550, %2551){operand_segment_sizes=array<i32:1, 1, 0>}:(tensor<1x22x4096xf32>, tensor<130528x4096xf16>) -> tensor<1x22x130528xf32>
	return %2552: tensor<1x22x130528xf32>
}
func.func @forward(%input_1: tensor<1x3x224x224xf32>) -> tensor<1x1000xf32>  { 
	%1="ufront.parameter"(){dtype="Float", initializer="0x560b49026c50", requires_grad=true}:() -> tensor<24x3x3x3xf32>
	%2="ufront.conv2d"(%input_1, %1){dilation=[1, 1], groups=1, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 0>, pad=[0, 1, 0, 1], stride=[2, 2]}:(tensor<1x3x224x224xf32>, tensor<24x3x3x3xf32>) -> tensor<1x24x112x112xf32>
	%3="ufront.relu"(%2):(tensor<1x24x112x112xf32>) -> tensor<1x24x112x112xf32>
	%4="ufront.pool2d"(%3){kernel=[3, 3], pad=[1, 1], pool_type="POOL_MAX", stride=[2, 2]}:(tensor<1x24x112x112xf32>) -> tensor<1x24x56x56xf32>
	%5="ufront.pool2d"(%4){kernel=[3, 3], pad=[1, 1], pool_type="POOL_AVG", stride=[2, 2]}:(tensor<1x24x56x56xf32>) -> tensor<1x24x28x28xf32>
	%6="ufront.parameter"(){dtype="Float", initializer="0x560b48f32a50", requires_grad=true}:() -> tensor<36x24x1x1xf32>
	%7="ufront.parameter"(){dtype="Float", initializer="0x560b43fb0770", requires_grad=true}:() -> tensor<36xf32>
	%8="ufront.conv2d"(%4, %6, %7){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x24x56x56xf32>, tensor<36x24x1x1xf32>, tensor<36xf32>) -> tensor<1x36x56x56xf32>
	%9="ufront.relu"(%8):(tensor<1x36x56x56xf32>) -> tensor<1x36x56x56xf32>
	%10="ufront.reshape"(%9){shape=[1, 36, 56, 56]}:(tensor<1x36x56x56xf32>) -> tensor<1x36x56x56xf32>
	%11="ufront.parameter"(){dtype="Float", initializer="0x560b4902e940", requires_grad=true}:() -> tensor<36x1x3x3xf32>
	%12="ufront.parameter"(){dtype="Float", initializer="0x560b48eeefe0", requires_grad=true}:() -> tensor<36xf32>
	%13="ufront.conv2d"(%10, %11, %12){dilation=[1, 1], groups=36, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 1, 0, 1], stride=[2, 2]}:(tensor<1x36x56x56xf32>, tensor<36x1x3x3xf32>, tensor<36xf32>) -> tensor<1x36x28x28xf32>
	%14="ufront.parameter"(){dtype="Float", initializer="0x560b42bc2380", requires_grad=true}:() -> tensor<120x36x1x1xf32>
	%15="ufront.parameter"(){dtype="Float", initializer="0x560b487ac050", requires_grad=true}:() -> tensor<120xf32>
	%16="ufront.conv2d"(%13, %14, %15){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x36x28x28xf32>, tensor<120x36x1x1xf32>, tensor<120xf32>) -> tensor<1x120x28x28xf32>
	%17="ufront.concat"(%16, %5){axis=1}:(tensor<1x120x28x28xf32>, tensor<1x24x28x28xf32>) -> tensor<1x144x28x28xf32>
	%18="ufront.relu"(%17):(tensor<1x144x28x28xf32>) -> tensor<1x144x28x28xf32>
	%19="ufront.parameter"(){dtype="Float", initializer="0x560b48f91210", requires_grad=true}:() -> tensor<36x144x1x1xf32>
	%20="ufront.parameter"(){dtype="Float", initializer="0x560b48ef60b0", requires_grad=true}:() -> tensor<36xf32>
	%21="ufront.conv2d"(%18, %19, %20){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x144x28x28xf32>, tensor<36x144x1x1xf32>, tensor<36xf32>) -> tensor<1x36x28x28xf32>
	%22="ufront.relu"(%21):(tensor<1x36x28x28xf32>) -> tensor<1x36x28x28xf32>
	%23="ufront.reshape"(%22){shape=[1, 36, 28, 28]}:(tensor<1x36x28x28xf32>) -> tensor<1x36x28x28xf32>
	%24="ufront.parameter"(){dtype="Float", initializer="0x560b492ff140", requires_grad=true}:() -> tensor<36x1x3x3xf32>
	%25="ufront.parameter"(){dtype="Float", initializer="0x560b42c8b0f0", requires_grad=true}:() -> tensor<36xf32>
	%26="ufront.conv2d"(%23, %24, %25){dilation=[1, 1], groups=36, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x36x28x28xf32>, tensor<36x1x3x3xf32>, tensor<36xf32>) -> tensor<1x36x28x28xf32>
	%27="ufront.parameter"(){dtype="Float", initializer="0x560b4911e590", requires_grad=true}:() -> tensor<144x36x1x1xf32>
	%28="ufront.parameter"(){dtype="Float", initializer="0x560b42ea25a0", requires_grad=true}:() -> tensor<144xf32>
	%29="ufront.conv2d"(%26, %27, %28){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x36x28x28xf32>, tensor<144x36x1x1xf32>, tensor<144xf32>) -> tensor<1x144x28x28xf32>
	%30="ufront.add"(%29, %18):(tensor<1x144x28x28xf32>, tensor<1x144x28x28xf32>) -> tensor<1x144x28x28xf32>
	%31="ufront.relu"(%30):(tensor<1x144x28x28xf32>) -> tensor<1x144x28x28xf32>
	%32="ufront.parameter"(){dtype="Float", initializer="0x560b48e5b2e0", requires_grad=true}:() -> tensor<36x144x1x1xf32>
	%33="ufront.parameter"(){dtype="Float", initializer="0x560b48f5ae00", requires_grad=true}:() -> tensor<36xf32>
	%34="ufront.conv2d"(%31, %32, %33){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x144x28x28xf32>, tensor<36x144x1x1xf32>, tensor<36xf32>) -> tensor<1x36x28x28xf32>
	%35="ufront.relu"(%34):(tensor<1x36x28x28xf32>) -> tensor<1x36x28x28xf32>
	%36="ufront.reshape"(%35){shape=[1, 36, 28, 28]}:(tensor<1x36x28x28xf32>) -> tensor<1x36x28x28xf32>
	%37="ufront.parameter"(){dtype="Float", initializer="0x560b42b28690", requires_grad=true}:() -> tensor<36x1x3x3xf32>
	%38="ufront.parameter"(){dtype="Float", initializer="0x560b48ef7d00", requires_grad=true}:() -> tensor<36xf32>
	%39="ufront.conv2d"(%36, %37, %38){dilation=[1, 1], groups=36, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x36x28x28xf32>, tensor<36x1x3x3xf32>, tensor<36xf32>) -> tensor<1x36x28x28xf32>
	%40="ufront.parameter"(){dtype="Float", initializer="0x560b42d2c100", requires_grad=true}:() -> tensor<144x36x1x1xf32>
	%41="ufront.parameter"(){dtype="Float", initializer="0x560b458dea70", requires_grad=true}:() -> tensor<144xf32>
	%42="ufront.conv2d"(%39, %40, %41){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x36x28x28xf32>, tensor<144x36x1x1xf32>, tensor<144xf32>) -> tensor<1x144x28x28xf32>
	%43="ufront.add"(%42, %31):(tensor<1x144x28x28xf32>, tensor<1x144x28x28xf32>) -> tensor<1x144x28x28xf32>
	%44="ufront.relu"(%43):(tensor<1x144x28x28xf32>) -> tensor<1x144x28x28xf32>
	%45="ufront.parameter"(){dtype="Float", initializer="0x560b4597c0c0", requires_grad=true}:() -> tensor<36x144x1x1xf32>
	%46="ufront.parameter"(){dtype="Float", initializer="0x560b48fdcca0", requires_grad=true}:() -> tensor<36xf32>
	%47="ufront.conv2d"(%44, %45, %46){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x144x28x28xf32>, tensor<36x144x1x1xf32>, tensor<36xf32>) -> tensor<1x36x28x28xf32>
	%48="ufront.relu"(%47):(tensor<1x36x28x28xf32>) -> tensor<1x36x28x28xf32>
	%49="ufront.reshape"(%48){shape=[1, 36, 28, 28]}:(tensor<1x36x28x28xf32>) -> tensor<1x36x28x28xf32>
	%50="ufront.parameter"(){dtype="Float", initializer="0x560b48fd52f0", requires_grad=true}:() -> tensor<36x1x3x3xf32>
	%51="ufront.parameter"(){dtype="Float", initializer="0x560b42c94e80", requires_grad=true}:() -> tensor<36xf32>
	%52="ufront.conv2d"(%49, %50, %51){dilation=[1, 1], groups=36, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x36x28x28xf32>, tensor<36x1x3x3xf32>, tensor<36xf32>) -> tensor<1x36x28x28xf32>
	%53="ufront.parameter"(){dtype="Float", initializer="0x560b42ba5bf0", requires_grad=true}:() -> tensor<144x36x1x1xf32>
	%54="ufront.parameter"(){dtype="Float", initializer="0x560b48ef75f0", requires_grad=true}:() -> tensor<144xf32>
	%55="ufront.conv2d"(%52, %53, %54){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x36x28x28xf32>, tensor<144x36x1x1xf32>, tensor<144xf32>) -> tensor<1x144x28x28xf32>
	%56="ufront.add"(%55, %44):(tensor<1x144x28x28xf32>, tensor<1x144x28x28xf32>) -> tensor<1x144x28x28xf32>
	%57="ufront.relu"(%56):(tensor<1x144x28x28xf32>) -> tensor<1x144x28x28xf32>
	%58="ufront.pool2d"(%57){kernel=[3, 3], pad=[1, 1], pool_type="POOL_AVG", stride=[2, 2]}:(tensor<1x144x28x28xf32>) -> tensor<1x144x14x14xf32>
	%59="ufront.parameter"(){dtype="Float", initializer="0x560b49500ce0", requires_grad=true}:() -> tensor<72x144x1x1xf32>
	%60="ufront.parameter"(){dtype="Float", initializer="0x560b48ec0680", requires_grad=true}:() -> tensor<72xf32>
	%61="ufront.conv2d"(%57, %59, %60){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x144x28x28xf32>, tensor<72x144x1x1xf32>, tensor<72xf32>) -> tensor<1x72x28x28xf32>
	%62="ufront.relu"(%61):(tensor<1x72x28x28xf32>) -> tensor<1x72x28x28xf32>
	%63="ufront.reshape"(%62){shape=[1, 72, 28, 28]}:(tensor<1x72x28x28xf32>) -> tensor<1x72x28x28xf32>
	%64="ufront.parameter"(){dtype="Float", initializer="0x560b48f25670", requires_grad=true}:() -> tensor<72x1x3x3xf32>
	%65="ufront.parameter"(){dtype="Float", initializer="0x560b48f08740", requires_grad=true}:() -> tensor<72xf32>
	%66="ufront.conv2d"(%63, %64, %65){dilation=[1, 1], groups=72, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 1, 0, 1], stride=[2, 2]}:(tensor<1x72x28x28xf32>, tensor<72x1x3x3xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%67="ufront.parameter"(){dtype="Float", initializer="0x560b42b114a0", requires_grad=true}:() -> tensor<144x72x1x1xf32>
	%68="ufront.parameter"(){dtype="Float", initializer="0x560b48fa01e0", requires_grad=true}:() -> tensor<144xf32>
	%69="ufront.conv2d"(%66, %67, %68){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<144x72x1x1xf32>, tensor<144xf32>) -> tensor<1x144x14x14xf32>
	%70="ufront.concat"(%69, %58){axis=1}:(tensor<1x144x14x14xf32>, tensor<1x144x14x14xf32>) -> tensor<1x288x14x14xf32>
	%71="ufront.relu"(%70):(tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%72="ufront.parameter"(){dtype="Float", initializer="0x560b496890b0", requires_grad=true}:() -> tensor<72x288x1x1xf32>
	%73="ufront.parameter"(){dtype="Float", initializer="0x560b48f08cc0", requires_grad=true}:() -> tensor<72xf32>
	%74="ufront.conv2d"(%71, %72, %73){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x288x14x14xf32>, tensor<72x288x1x1xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%75="ufront.relu"(%74):(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%76="ufront.reshape"(%75){shape=[1, 72, 14, 14]}:(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%77="ufront.parameter"(){dtype="Float", initializer="0x560b42af5490", requires_grad=true}:() -> tensor<72x1x3x3xf32>
	%78="ufront.parameter"(){dtype="Float", initializer="0x560b42b1e2a0", requires_grad=true}:() -> tensor<72xf32>
	%79="ufront.conv2d"(%76, %77, %78){dilation=[1, 1], groups=72, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<72x1x3x3xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%80="ufront.parameter"(){dtype="Float", initializer="0x560b491929f0", requires_grad=true}:() -> tensor<288x72x1x1xf32>
	%81="ufront.parameter"(){dtype="Float", initializer="0x560b490607f0", requires_grad=true}:() -> tensor<288xf32>
	%82="ufront.conv2d"(%79, %80, %81){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<288x72x1x1xf32>, tensor<288xf32>) -> tensor<1x288x14x14xf32>
	%83="ufront.add"(%82, %71):(tensor<1x288x14x14xf32>, tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%84="ufront.relu"(%83):(tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%85="ufront.parameter"(){dtype="Float", initializer="0x560b4917e5e0", requires_grad=true}:() -> tensor<72x288x1x1xf32>
	%86="ufront.parameter"(){dtype="Float", initializer="0x560b496d3440", requires_grad=true}:() -> tensor<72xf32>
	%87="ufront.conv2d"(%84, %85, %86){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x288x14x14xf32>, tensor<72x288x1x1xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%88="ufront.relu"(%87):(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%89="ufront.reshape"(%88){shape=[1, 72, 14, 14]}:(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%90="ufront.parameter"(){dtype="Float", initializer="0x560b49049460", requires_grad=true}:() -> tensor<72x1x3x3xf32>
	%91="ufront.parameter"(){dtype="Float", initializer="0x560b42b502a0", requires_grad=true}:() -> tensor<72xf32>
	%92="ufront.conv2d"(%89, %90, %91){dilation=[1, 1], groups=72, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<72x1x3x3xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%93="ufront.parameter"(){dtype="Float", initializer="0x560b4998a390", requires_grad=true}:() -> tensor<288x72x1x1xf32>
	%94="ufront.parameter"(){dtype="Float", initializer="0x560b42bb64c0", requires_grad=true}:() -> tensor<288xf32>
	%95="ufront.conv2d"(%92, %93, %94){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<288x72x1x1xf32>, tensor<288xf32>) -> tensor<1x288x14x14xf32>
	%96="ufront.add"(%95, %84):(tensor<1x288x14x14xf32>, tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%97="ufront.relu"(%96):(tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%98="ufront.parameter"(){dtype="Float", initializer="0x560b499b2bb0", requires_grad=true}:() -> tensor<72x288x1x1xf32>
	%99="ufront.parameter"(){dtype="Float", initializer="0x560b42b4e830", requires_grad=true}:() -> tensor<72xf32>
	%100="ufront.conv2d"(%97, %98, %99){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x288x14x14xf32>, tensor<72x288x1x1xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%101="ufront.relu"(%100):(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%102="ufront.reshape"(%101){shape=[1, 72, 14, 14]}:(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%103="ufront.parameter"(){dtype="Float", initializer="0x560b49738960", requires_grad=true}:() -> tensor<72x1x3x3xf32>
	%104="ufront.parameter"(){dtype="Float", initializer="0x560b493b2150", requires_grad=true}:() -> tensor<72xf32>
	%105="ufront.conv2d"(%102, %103, %104){dilation=[1, 1], groups=72, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<72x1x3x3xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%106="ufront.parameter"(){dtype="Float", initializer="0x560b49a622d0", requires_grad=true}:() -> tensor<288x72x1x1xf32>
	%107="ufront.parameter"(){dtype="Float", initializer="0x560b42bdbdf0", requires_grad=true}:() -> tensor<288xf32>
	%108="ufront.conv2d"(%105, %106, %107){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<288x72x1x1xf32>, tensor<288xf32>) -> tensor<1x288x14x14xf32>
	%109="ufront.add"(%108, %97):(tensor<1x288x14x14xf32>, tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%110="ufront.relu"(%109):(tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%111="ufront.parameter"(){dtype="Float", initializer="0x560b49a8aaf0", requires_grad=true}:() -> tensor<72x288x1x1xf32>
	%112="ufront.parameter"(){dtype="Float", initializer="0x560b42b42990", requires_grad=true}:() -> tensor<72xf32>
	%113="ufront.conv2d"(%110, %111, %112){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x288x14x14xf32>, tensor<72x288x1x1xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%114="ufront.relu"(%113):(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%115="ufront.reshape"(%114){shape=[1, 72, 14, 14]}:(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%116="ufront.parameter"(){dtype="Float", initializer="0x560b48fc8310", requires_grad=true}:() -> tensor<72x1x3x3xf32>
	%117="ufront.parameter"(){dtype="Float", initializer="0x560b42b45e60", requires_grad=true}:() -> tensor<72xf32>
	%118="ufront.conv2d"(%115, %116, %117){dilation=[1, 1], groups=72, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<72x1x3x3xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%119="ufront.parameter"(){dtype="Float", initializer="0x560b49ab3310", requires_grad=true}:() -> tensor<288x72x1x1xf32>
	%120="ufront.parameter"(){dtype="Float", initializer="0x560b42c94710", requires_grad=true}:() -> tensor<288xf32>
	%121="ufront.conv2d"(%118, %119, %120){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<288x72x1x1xf32>, tensor<288xf32>) -> tensor<1x288x14x14xf32>
	%122="ufront.add"(%121, %110):(tensor<1x288x14x14xf32>, tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%123="ufront.relu"(%122):(tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%124="ufront.parameter"(){dtype="Float", initializer="0x560b49c06f00", requires_grad=true}:() -> tensor<72x288x1x1xf32>
	%125="ufront.parameter"(){dtype="Float", initializer="0x560b42bef840", requires_grad=true}:() -> tensor<72xf32>
	%126="ufront.conv2d"(%123, %124, %125){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x288x14x14xf32>, tensor<72x288x1x1xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%127="ufront.relu"(%126):(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%128="ufront.reshape"(%127){shape=[1, 72, 14, 14]}:(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%129="ufront.parameter"(){dtype="Float", initializer="0x560b4967c290", requires_grad=true}:() -> tensor<72x1x3x3xf32>
	%130="ufront.parameter"(){dtype="Float", initializer="0x560b42b3b7f0", requires_grad=true}:() -> tensor<72xf32>
	%131="ufront.conv2d"(%128, %129, %130){dilation=[1, 1], groups=72, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<72x1x3x3xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%132="ufront.parameter"(){dtype="Float", initializer="0x560b49c2f720", requires_grad=true}:() -> tensor<288x72x1x1xf32>
	%133="ufront.parameter"(){dtype="Float", initializer="0x560b49124930", requires_grad=true}:() -> tensor<288xf32>
	%134="ufront.conv2d"(%131, %132, %133){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<288x72x1x1xf32>, tensor<288xf32>) -> tensor<1x288x14x14xf32>
	%135="ufront.add"(%134, %123):(tensor<1x288x14x14xf32>, tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%136="ufront.relu"(%135):(tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%137="ufront.parameter"(){dtype="Float", initializer="0x560b49c57f40", requires_grad=true}:() -> tensor<72x288x1x1xf32>
	%138="ufront.parameter"(){dtype="Float", initializer="0x560b4307d550", requires_grad=true}:() -> tensor<72xf32>
	%139="ufront.conv2d"(%136, %137, %138){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x288x14x14xf32>, tensor<72x288x1x1xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%140="ufront.relu"(%139):(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%141="ufront.reshape"(%140){shape=[1, 72, 14, 14]}:(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%142="ufront.parameter"(){dtype="Float", initializer="0x560b48ef6250", requires_grad=true}:() -> tensor<72x1x3x3xf32>
	%143="ufront.parameter"(){dtype="Float", initializer="0x560b42b29010", requires_grad=true}:() -> tensor<72xf32>
	%144="ufront.conv2d"(%141, %142, %143){dilation=[1, 1], groups=72, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<72x1x3x3xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%145="ufront.parameter"(){dtype="Float", initializer="0x560b46522360", requires_grad=true}:() -> tensor<288x72x1x1xf32>
	%146="ufront.parameter"(){dtype="Float", initializer="0x560b490ae6b0", requires_grad=true}:() -> tensor<288xf32>
	%147="ufront.conv2d"(%144, %145, %146){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<288x72x1x1xf32>, tensor<288xf32>) -> tensor<1x288x14x14xf32>
	%148="ufront.add"(%147, %136):(tensor<1x288x14x14xf32>, tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%149="ufront.relu"(%148):(tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%150="ufront.parameter"(){dtype="Float", initializer="0x560b4654ab80", requires_grad=true}:() -> tensor<72x288x1x1xf32>
	%151="ufront.parameter"(){dtype="Float", initializer="0x560b42b2ca60", requires_grad=true}:() -> tensor<72xf32>
	%152="ufront.conv2d"(%149, %150, %151){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x288x14x14xf32>, tensor<72x288x1x1xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%153="ufront.relu"(%152):(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%154="ufront.reshape"(%153){shape=[1, 72, 14, 14]}:(tensor<1x72x14x14xf32>) -> tensor<1x72x14x14xf32>
	%155="ufront.parameter"(){dtype="Float", initializer="0x560b498523a0", requires_grad=true}:() -> tensor<72x1x3x3xf32>
	%156="ufront.parameter"(){dtype="Float", initializer="0x560b48e6a680", requires_grad=true}:() -> tensor<72xf32>
	%157="ufront.conv2d"(%154, %155, %156){dilation=[1, 1], groups=72, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<72x1x3x3xf32>, tensor<72xf32>) -> tensor<1x72x14x14xf32>
	%158="ufront.parameter"(){dtype="Float", initializer="0x560b465733a0", requires_grad=true}:() -> tensor<288x72x1x1xf32>
	%159="ufront.parameter"(){dtype="Float", initializer="0x560b42ba3c30", requires_grad=true}:() -> tensor<288xf32>
	%160="ufront.conv2d"(%157, %158, %159){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x72x14x14xf32>, tensor<288x72x1x1xf32>, tensor<288xf32>) -> tensor<1x288x14x14xf32>
	%161="ufront.add"(%160, %149):(tensor<1x288x14x14xf32>, tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%162="ufront.relu"(%161):(tensor<1x288x14x14xf32>) -> tensor<1x288x14x14xf32>
	%163="ufront.pool2d"(%162){kernel=[3, 3], pad=[1, 1], pool_type="POOL_AVG", stride=[2, 2]}:(tensor<1x288x14x14xf32>) -> tensor<1x288x7x7xf32>
	%164="ufront.parameter"(){dtype="Float", initializer="0x560b465c43e0", requires_grad=true}:() -> tensor<144x288x1x1xf32>
	%165="ufront.parameter"(){dtype="Float", initializer="0x560b48f5c270", requires_grad=true}:() -> tensor<144xf32>
	%166="ufront.conv2d"(%162, %164, %165){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x288x14x14xf32>, tensor<144x288x1x1xf32>, tensor<144xf32>) -> tensor<1x144x14x14xf32>
	%167="ufront.relu"(%166):(tensor<1x144x14x14xf32>) -> tensor<1x144x14x14xf32>
	%168="ufront.reshape"(%167){shape=[1, 144, 14, 14]}:(tensor<1x144x14x14xf32>) -> tensor<1x144x14x14xf32>
	%169="ufront.parameter"(){dtype="Float", initializer="0x560b48f57a00", requires_grad=true}:() -> tensor<144x1x3x3xf32>
	%170="ufront.parameter"(){dtype="Float", initializer="0x560b42c87e60", requires_grad=true}:() -> tensor<144xf32>
	%171="ufront.conv2d"(%168, %169, %170){dilation=[1, 1], groups=144, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 1, 0, 1], stride=[2, 2]}:(tensor<1x144x14x14xf32>, tensor<144x1x3x3xf32>, tensor<144xf32>) -> tensor<1x144x7x7xf32>
	%172="ufront.parameter"(){dtype="Float", initializer="0x560b465ecbf0", requires_grad=true}:() -> tensor<288x144x1x1xf32>
	%173="ufront.parameter"(){dtype="Float", initializer="0x560b4320d9d0", requires_grad=true}:() -> tensor<288xf32>
	%174="ufront.conv2d"(%171, %172, %173){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x144x7x7xf32>, tensor<288x144x1x1xf32>, tensor<288xf32>) -> tensor<1x288x7x7xf32>
	%175="ufront.concat"(%174, %163){axis=1}:(tensor<1x288x7x7xf32>, tensor<1x288x7x7xf32>) -> tensor<1x576x7x7xf32>
	%176="ufront.relu"(%175):(tensor<1x576x7x7xf32>) -> tensor<1x576x7x7xf32>
	%177="ufront.parameter"(){dtype="Float", initializer="0x560b46f6d020", requires_grad=true}:() -> tensor<144x576x1x1xf32>
	%178="ufront.parameter"(){dtype="Float", initializer="0x560b42b25780", requires_grad=true}:() -> tensor<144xf32>
	%179="ufront.conv2d"(%176, %177, %178){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x576x7x7xf32>, tensor<144x576x1x1xf32>, tensor<144xf32>) -> tensor<1x144x7x7xf32>
	%180="ufront.relu"(%179):(tensor<1x144x7x7xf32>) -> tensor<1x144x7x7xf32>
	%181="ufront.reshape"(%180){shape=[1, 144, 7, 7]}:(tensor<1x144x7x7xf32>) -> tensor<1x144x7x7xf32>
	%182="ufront.parameter"(){dtype="Float", initializer="0x560b42b8ca50", requires_grad=true}:() -> tensor<144x1x3x3xf32>
	%183="ufront.parameter"(){dtype="Float", initializer="0x560b49014b40", requires_grad=true}:() -> tensor<144xf32>
	%184="ufront.conv2d"(%181, %182, %183){dilation=[1, 1], groups=144, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x144x7x7xf32>, tensor<144x1x3x3xf32>, tensor<144xf32>) -> tensor<1x144x7x7xf32>
	%185="ufront.parameter"(){dtype="Float", initializer="0x560b46fbe030", requires_grad=true}:() -> tensor<576x144x1x1xf32>
	%186="ufront.parameter"(){dtype="Float", initializer="0x560b42eb88f0", requires_grad=true}:() -> tensor<576xf32>
	%187="ufront.conv2d"(%184, %185, %186){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x144x7x7xf32>, tensor<576x144x1x1xf32>, tensor<576xf32>) -> tensor<1x576x7x7xf32>
	%188="ufront.add"(%187, %176):(tensor<1x576x7x7xf32>, tensor<1x576x7x7xf32>) -> tensor<1x576x7x7xf32>
	%189="ufront.relu"(%188):(tensor<1x576x7x7xf32>) -> tensor<1x576x7x7xf32>
	%190="ufront.parameter"(){dtype="Float", initializer="0x560b47060050", requires_grad=true}:() -> tensor<144x576x1x1xf32>
	%191="ufront.parameter"(){dtype="Float", initializer="0x560b493ac500", requires_grad=true}:() -> tensor<144xf32>
	%192="ufront.conv2d"(%189, %190, %191){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x576x7x7xf32>, tensor<144x576x1x1xf32>, tensor<144xf32>) -> tensor<1x144x7x7xf32>
	%193="ufront.relu"(%192):(tensor<1x144x7x7xf32>) -> tensor<1x144x7x7xf32>
	%194="ufront.reshape"(%193){shape=[1, 144, 7, 7]}:(tensor<1x144x7x7xf32>) -> tensor<1x144x7x7xf32>
	%195="ufront.parameter"(){dtype="Float", initializer="0x560b42ba0b10", requires_grad=true}:() -> tensor<144x1x3x3xf32>
	%196="ufront.parameter"(){dtype="Float", initializer="0x560b42b67800", requires_grad=true}:() -> tensor<144xf32>
	%197="ufront.conv2d"(%194, %195, %196){dilation=[1, 1], groups=144, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x144x7x7xf32>, tensor<144x1x3x3xf32>, tensor<144xf32>) -> tensor<1x144x7x7xf32>
	%198="ufront.parameter"(){dtype="Float", initializer="0x560b47102070", requires_grad=true}:() -> tensor<576x144x1x1xf32>
	%199="ufront.parameter"(){dtype="Float", initializer="0x560b49127710", requires_grad=true}:() -> tensor<576xf32>
	%200="ufront.conv2d"(%197, %198, %199){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x144x7x7xf32>, tensor<576x144x1x1xf32>, tensor<576xf32>) -> tensor<1x576x7x7xf32>
	%201="ufront.add"(%200, %189):(tensor<1x576x7x7xf32>, tensor<1x576x7x7xf32>) -> tensor<1x576x7x7xf32>
	%202="ufront.relu"(%201):(tensor<1x576x7x7xf32>) -> tensor<1x576x7x7xf32>
	%203="ufront.parameter"(){dtype="Float", initializer="0x560b471a4090", requires_grad=true}:() -> tensor<144x576x1x1xf32>
	%204="ufront.parameter"(){dtype="Float", initializer="0x560b42b56810", requires_grad=true}:() -> tensor<144xf32>
	%205="ufront.conv2d"(%202, %203, %204){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x576x7x7xf32>, tensor<144x576x1x1xf32>, tensor<144xf32>) -> tensor<1x144x7x7xf32>
	%206="ufront.relu"(%205):(tensor<1x144x7x7xf32>) -> tensor<1x144x7x7xf32>
	%207="ufront.reshape"(%206){shape=[1, 144, 7, 7]}:(tensor<1x144x7x7xf32>) -> tensor<1x144x7x7xf32>
	%208="ufront.parameter"(){dtype="Float", initializer="0x560b48f40bd0", requires_grad=true}:() -> tensor<144x1x3x3xf32>
	%209="ufront.parameter"(){dtype="Float", initializer="0x560b4900b4a0", requires_grad=true}:() -> tensor<144xf32>
	%210="ufront.conv2d"(%207, %208, %209){dilation=[1, 1], groups=144, kernel=[3, 3], operand_segment_sizes=array<i32:1, 1, 1>, pad=[1, 1, 1, 1], stride=[1, 1]}:(tensor<1x144x7x7xf32>, tensor<144x1x3x3xf32>, tensor<144xf32>) -> tensor<1x144x7x7xf32>
	%211="ufront.parameter"(){dtype="Float", initializer="0x560b472460b0", requires_grad=true}:() -> tensor<576x144x1x1xf32>
	%212="ufront.parameter"(){dtype="Float", initializer="0x560b48fc92f0", requires_grad=true}:() -> tensor<576xf32>
	%213="ufront.conv2d"(%210, %211, %212){dilation=[1, 1], groups=1, kernel=[1, 1], operand_segment_sizes=array<i32:1, 1, 1>, pad=[0, 0, 0, 0], stride=[1, 1]}:(tensor<1x144x7x7xf32>, tensor<576x144x1x1xf32>, tensor<576xf32>) -> tensor<1x576x7x7xf32>
	%214="ufront.add"(%213, %202):(tensor<1x576x7x7xf32>, tensor<1x576x7x7xf32>) -> tensor<1x576x7x7xf32>
	%215="ufront.relu"(%214):(tensor<1x576x7x7xf32>) -> tensor<1x576x7x7xf32>
	%216="ufront.pool2d"(%215){output_size=[1, 1], pad=[0, 0], pool_type="POOL_ADAPTIVE", stride=[1, 1]}:(tensor<1x576x7x7xf32>) -> tensor<1x576x1x1xf32>
	%217="ufront.flat"(%216){end_dim=-1, start_dim=1}:(tensor<1x576x1x1xf32>) -> tensor<1x576xf32>
	%218="ufront.parameter"(){dtype="Float", initializer="0x560b45e46ec0", requires_grad=true}:() -> tensor<576x1000xf32>
	%219="ufront.matmul"(%217, %218):(tensor<1x576xf32>, tensor<576x1000xf32>) -> tensor<1x1000xf32>
	%220="ufront.softmax"(%219):(tensor<1x1000xf32>) -> tensor<1x1000xf32>
	return %220: tensor<1x1000xf32>
}